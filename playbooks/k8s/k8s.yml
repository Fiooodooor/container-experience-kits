##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- hosts: k8s_cluster
  tasks:
    - name: regather selinux facts
      setup:
        gather_subset: 'selinux'
      when: ansible_os_family == "RedHat"
  roles:
    - role: cluster_defaults
    - role: kubespray_target_setup
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true

- hosts: k8s_cluster
  gather_facts: false
  tasks:
    - name: Prepare native CPU manager settings
      when: native_cpu_manager_enabled | default(false)
      ansible.builtin.set_fact:
        # Config Variant 1 - set CPU time reservation for system/kube daemons
        system_reserved: >-
          {% if not native_cpu_manager_reserved_cpus | default(false) -%}
          true{% else %}false{% endif %}
        system_master_cpu_reserved: "{{ native_cpu_manager_system_reserved_cpus | default('1000m') }}"
        system_cpu_reserved: "{{ native_cpu_manager_system_reserved_cpus | default('1000m') }}"
        kube_reserved: >-
          {% if not native_cpu_manager_reserved_cpus | default(false) and native_cpu_manager_kube_reserved_cpus | default(false) -%}
          true{% else %}false{% endif %}
        kube_master_cpu_reserved: "{{ native_cpu_manager_kube_reserved_cpus | default('1000m') }}"
        kube_cpu_reserved: "{{ native_cpu_manager_kube_reserved_cpus | default('1000m') }}"
        # Config Variant 2 - set explicit list of CPUs to run system/kube daemons exclusive
        kubelet_node_custom_flags_prepare: >-
          {%- if native_cpu_manager_reserved_cpus | default(false) -%}
            reservedSystemCPUs: "{{ native_cpu_manager_reserved_cpus }}"
          {%- endif -%}
    - name: set kube_config dir
      set_fact:
        kube_config_dir: /etc/kubernetes
    - name: Set default kube feature gates
      set_fact:
        kube_default_feature_gates:
          - RotateKubeletServerCertificate=true
    - name: Set kube CPU manager feature gate for kubernetes older than v1.26
      set_fact:
        kube_cpu_manager_feature_gate:
          - CPUManager=true
      when: kube_version | regex_replace('^v(.*)', '\\1') is version('1.26', '<')
    - name: set kube_cert_dir
      set_fact:
        kube_cert_dir: "{{ kube_config_dir }}/ssl"
        kube_csr_dir: "{{ kube_config_dir }}/csr"
    - name: prepare flannel CNI facts
      set_fact:
        flannel_backend_type: >-
          {% if minio_enabled is defined and minio_enabled -%}vxlan{%- else -%}
          {% if ansible_distribution_version is version('21.04', '>=') -%}host-gw{%- else -%}vxlan{% endif %}{% endif %}
      when: kube_network_plugin == "flannel"

    - name: Disable DNS stub listener when needed
      set_fact:
        systemd_resolved_disable_stub_listener: true
      when:
        - dns_disable_stub_listener | default(true) | bool

    - name: print flannel_backend_type
      debug:
        msg: "flannel_backend_type: {{ flannel_backend_type }}"
      when: kube_network_plugin == "flannel"

    - name: prepare calico CNI facts for vxlan backend
      set_fact:
        calico_vxlan_mode: 'CrossSubnet'
        calico_ipip_mode: 'Never'
      when:
        - kube_network_plugin == "calico"
        - calico_network_backend == "vxlan"
    - name: prepare calico CNI facts for bird backend
      set_fact:
        calico_ipip_mode: 'Always'
        calico_endpoint_to_host_action: "ACCEPT"
        calico_vxlan_mode: 'Never'
        calico_wireguard_enabled: "{{ wireguard_enabled | default(false) | bool }}"
        epel_enabled: >-
          {% if ansible_distribution == 'Rocky' and ansible_distribution_version < '9' and wireguard_enabled | d(false) %}true{% else %}false{% endif %}
      when:
        - kube_network_plugin == "calico"
        - calico_network_backend == "bird"
    - name: prepare ADQ facts
      set_fact:
        calico_ipv4pool_ipip: "Never"
        calico_ip_auto_method: "interface={{ adq_dp.interface_name }}"
        calico_vxlan_mode: "Always"
        kube_proxy_remove: true
        calico_endpoint_to_host_action: "ACCEPT"
      when:
        - inventory_hostname == groups['kube_control_plane'][0]
        - adq_dp.enabled | d(false) | bool
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true

- hosts: k8s_cluster
  tasks:
    - name: add docker runtime vars
      set_fact:
        container_manager: docker
        docker_iptables_enabled: true
        docker_dns_servers_strict: false
      when: container_runtime == "docker"
    - name: add containerd runtime vars
      set_fact:
        container_manager: containerd
        etcd_deployment_type: host
        image_command_tool: crictl
        containerd_extra_args: |2
                  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ registry_local_address }}"]
                    endpoint = ["https://{{ registry_local_address }}"]
                  [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ registry_local_address }}".tls]
                    ca_file   = "/etc/containers/certs.d/{{ registry_local_address }}/ca.crt"
      when: container_runtime == "containerd"
    - name: add crio runtime vars
      set_fact:
        container_manager: crio
        download_container: false
        etcd_deployment_type: host
      when: container_runtime == "crio"

# Run kubespray to deploy or scale cluster
- name: Deploy cluster via Kubespray
  ansible.builtin.import_playbook: "{% if scale | default(false) | bool %}kubernetes_sigs.kubespray.scale{% else %}kubernetes_sigs.kubespray.cluster{% endif %}"
  vars:
    kube_owner: root
    kube_cert_group: root
    kubeadm_enabled: true
    helm_enabled: true
    krew_enabled: true
    multus_conf_file: /host/etc/cni/net.d/templates/00-multus.conf
    multus_image_tag: "v3.9.3-amd64"
    calico_node_livenessprobe_timeout: 15
    calico_node_readinessprobe_timeout: 15
    kube_proxy_mode: iptables
    enable_network_policy: true
    override_system_hostname: false
    cilium_ipam_mode: kubernetes
    enable_nodelocaldns: false
    dashboard_enabled: "{{ kube_dashboard_enabled | default(true) }}"
    kubelet_custom_flags: "--cpu-cfs-quota=false"
    kubelet_node_config_extra_args: "{{ kubelet_node_custom_flags_prepare | default('') | from_yaml }}"
    kube_api_anonymous_auth: true
    kube_feature_gates: "{{ kube_default_feature_gates + kube_cpu_manager_feature_gate | default([]) }}"
    # Kubernetes cluster hardening
    kubernetes_audit: true
    audit_log_maxbackups: 10
    kube_scheduler_bind_address: 127.0.0.1
    kube_proxy_healthz_bind_address: 127.0.0.1
    kube_read_only_port: 0
    kube_override_hostname: ""
    kube_kubeadm_apiserver_extra_args:
      service-account-lookup: true
      service-account-key-file: "{{ kube_cert_dir }}/sa.key"
    kube_kubeadm_controller_extra_args:
      service-account-private-key-file: "{{ kube_cert_dir }}/sa.key"
    kubelet_cpu_manager_policy: "{% if native_cpu_manager_enabled | default(false) %}static{% else %}none{% endif %}"
    kubelet_topology_manager_policy: "{{ topology_manager_policy | default('none') }}"
    kubelet_topology_manager_scope: "{{ topology_manager_scope | default('container') }}"
    kubelet_config_extra_args:
      protectKernelDefaults: true
      eventRecordQPS: 0
    kube_apiserver_request_timeout: 60s
    kube_apiserver_enable_admission_plugins: ["EventRateLimit", "DefaultStorageClass", "NodeRestriction", "{% if always_pull_enabled %}AlwaysPullImages,{% endif %}PodSecurity"] # noqa yaml[line-length]
    kube_apiserver_admission_control_config_file: true
    kube_apiserver_admission_event_rate_limits:
      limit_1:
        type: Server
        qps: 10
        burst: 50
      limit_2:
        type: Namespace
        qps: 50
        burst: 100
      limit_3:
        type: User
        qps: 10
        burst: 50
      limit_4:
        type: SourceAndObject
        qps: 10
        burst: 50
    kube_pod_security_use_default: true
    kube_pod_security_default_enforce: privileged
    kube_pod_security_default_enforce_version: latest
    kube_pod_security_default_audit: privileged
    kube_pod_security_default_audit_version: latest
    kube_pod_security_default_warn: privileged
    kube_pod_security_default_warn_version: latest
    kube_pod_security_exemptions_namespaces: []
    kube_encrypt_secret_data: true
    preinstall_selinux_state: "{{ ansible_selinux.mode | default('disabled') }}"
    tls_cipher_suites:
      - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
      - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    etcd_extra_vars:
      ETCD_CIPHER_SUITES: "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"

- hosts: k8s_cluster
  tasks:
    - name: restart docker daemon to recreate iptables rules
      systemd: name=docker state=restarted
      become: yes
      when: container_runtime == "docker"
    - name: restart kubelet to trigger static pods recreation
      systemd: name=kubelet state=restarted
      become: yes
    # note: fix for the issue mentioned here:
    # https://github.com/kubernetes-sigs/kubespray/blob/58f48500b1adac3f18466fa1c5cf8aa9d9838150/docs/flannel.md#flannel
    - name: check if flannel.1 interface exists
      stat:
        path: /sys/class/net/flannel.1
      when: kube_network_plugin == "flannel"
      register: flannel_endpoint
    - name: disable offloading features on flannel.1
      command: ethtool --offload flannel.1 rx off tx off
      changed_when: true
      become: yes
      when:
        - kube_network_plugin == "flannel"
        - flannel_endpoint.stat.exists

    - name: wait for kube-apiserver to be up
      uri:
        url: "https://127.0.0.1:6443/healthz"
        validate_certs: no
      register: results
      until: results.status == 200
      retries: 30
      delay: 5
      when: inventory_hostname == groups['kube_control_plane'][0]

    - name: install calico vpp
      ansible.builtin.include_role:
        name: calico_vpp_install
      tags: calico-vpp
      when: calico_vpp.enabled | default(false) | bool

    - name: allow traffic on wireguard interface
      block:
        - name: allow traffic on wireguard interface on Ubuntu
          ufw:
            rule: allow
            interface: wireguard.cali
            direction: in
            state: reloaded
          when: ansible_os_family == "Debian"

        - name: allow traffic on wireguard interface on RHEL / Rocky
          firewalld:
            zone: trusted
            interface: wireguard.cali
            permanent: yes
            state: enabled
          when: ansible_os_family == "RedHat"
      when:
        - wireguard_enabled | default(true) | bool
        - kube_network_plugin == "calico" and calico_network_backend == "bird"
        - firewall_enabled | default(false) | bool

    - name: fix dpkg configure
      command: dpkg --configure -a <<<$(echo N)
      changed_when: true
      failed_when: false

    - name: install podman
      ansible.builtin.include_role:
        name: container_engine/podman # noqa role-name[path] - role in container_engine
      when: container_runtime in ["containerd", "crio"]

    - name: registries.conf configuration on containerd
      block:
        - name: check if registries.conf exists
          stat:
            path: /etc/containers/registries.conf
          register: registries_conf

        - name: add "unqualified-search-registries" to registries.conf
          lineinfile:
            path: /etc/containers/registries.conf
            regexp: '^#unqualified-search-registries'
            line: unqualified-search-registries = ["docker.io"]
          when: registries_conf.stat.exists
      when: container_runtime == "containerd"

    - name: Get cri-dockerd command line args
      shell: set -o pipefail && cat /etc/systemd/system/cri-dockerd.service | grep ExecStart
      args:
        executable: /bin/bash
      register: dockerd_cmd
      failed_when: dockerd_cmd.rc != 0
      changed_when: false
      when: container_runtime == "docker"

    - name: Limit cri-dockerd to listen on localhost
      block:
        - name: Create cri-dockerd drop-in directory
          file:
            path: /etc/systemd/system/cri-dockerd.service.d
            state: directory
            mode: 0755

        - name: Create cri-dockerd service drop-in
          copy:
            dest: /etc/systemd/system/cri-dockerd.service.d/bind-addr.conf
            content: |
              [Service]
              ExecStart=
              {{ dockerd_cmd.stdout }} --streaming-bind-addr=127.0.0.1
            mode: 0644

        - name: Restart cri-dockerd service
          systemd:
            name: cri-dockerd
            state: restarted
            daemon_reload: yes
      when:
        - container_runtime == "docker"
        - "'streaming-bind-addr' not in dockerd_cmd.stdout"
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true

- hosts: etcd
  tasks:
    - name: change /var/lib/etcd owner
      file:
        path: "{{ etcd_data_dir | default('/var/lib/etcd') }}"
        owner: etcd
        group: etcd
        recurse: true
        state: directory
        mode: 0700
    - name: change /var/lib/etcd permissions
      file:
        path: "{{ etcd_data_dir | default('/var/lib/etcd') }}"
        owner: etcd
        group: etcd
        mode: '0700'
        state: directory
  any_errors_fatal: true

- hosts: k8s_cluster
  roles:
    - role: cluster_defaults
      tags: defaults
      when:
        - cert_manager_enabled | default(false) or
          registry_enable | default(false)
    - role: container_registry
      tags: registry
      when:
        - registry_enable | default(false)
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true

# Run certificate generation for mTLS in kubelet
- ansible.builtin.import_playbook: kubelet-certificates.yml
  when: kubernetes | default(true)
