##
##   Copyright (c) 2020-2021 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- hosts: 127.0.0.1
  connection: local
  tasks: []
  roles:
    - role: bootstrap/ansible_host
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true

# apply common cluster node configuration
- hosts: k8s-cluster
  tasks: []
  handlers:
    - name: reboot server
      reboot: { reboot_timeout: 1200 }
  roles:
    - role: cluster_defaults
    - role: bootstrap/configure_proxy
    - role: bootstrap/install_packages
    - role: bootstrap/update_grub
      when: update_kernel | default(false)
    - role: bootstrap/configure_security
    - role: bootstrap/apply_kubernetes_reqs
    - role: bootstrap/configure_dns
      when: ansible_distribution == "Ubuntu" and dns_disable_stub_listener | default(true) | bool
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true

# apply worker node kernel configuration
- hosts: kube-node
  tasks: []
  handlers:
    - name: reboot server
      reboot: { reboot_timeout: 1200 }
  roles:
    - role: cluster_defaults
    - role: bootstrap/configure_hugepages
      when: hugepages_enabled | default(true)
    - role: bootstrap/configure_cpu_isolation
      when: isolcpus_enabled | default(true)
    - role: bootstrap/configure_intel_pstate
      when: intel_pstate_enabled | default(true) | bool
    - role: bootstrap/set_sriov_kernel_flags
      when: iommu_enabled | default(true)
    - role: bootstrap/install_gpu_kernel
      when: gpu_dp_enabled | default (false)
    - role: bootstrap/install_rt_package
      when:
        - install_real_time_package | default(false) | bool
        - ansible_distribution == 'CentOS'
        - ansible_distribution_version < '8'
    - role: bootstrap/update_grub
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true

# install worker node kernel drivers
- hosts: kube-node
  tasks: []
  roles:
    - role: cluster_defaults

    - role: bootstrap/install_qat_drivers_services
      when: update_qat_drivers | default(false)

    - role: bootstrap/update_nic_drivers
      when: update_nic_drivers | default(false) | bool

    - role: bootstrap/update_nic_firmware
      tags: firmware
      when:
        - update_nic_firmware | default(false) | bool
        - update_nic_drivers | default(false) | bool

    - role: bootstrap/determine_dataplane_interfaces
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true

# install DPDK and apply SRIOV configuration, configure SST-BF
- hosts: kube-node
  roles:
    - role: cluster_defaults
    - role: install_dpdk
      when: ovs_dpdk_enabled | default(false) or install_dpdk | default(true)
      tags: dpdk
    - role: install_ddp_pkgs
      when: install_ddp_packages | default(true) | bool
    - role: sriov_nic_init
      when: iommu_enabled | default(true) and install_dpdk | default(true)
    - role: bootstrap/configure_qat
      when:
        - qat_devices is defined and (qat_devices|length>0)
        - iommu_enabled | default(true)
        - update_qat_drivers | default(false)
    - role: sst_configure_icx
      when: sst_bf_configuration_enabled | default(true) or sst_cp_configuration_enabled | default(false)
      tags: sst
    - role: sgx_configure_icx
      when:
        - sgx_enabled | default(true)
        - ansible_os_family == "Debian" or (ansible_os_family == "RedHat" and ansible_distribution_version >= '8.2')
      tags: sgx
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true

# install SGX components for KMRA
- hosts: kube-node
  roles:
    - role: sgx_configure_icx
      when:
        - sgx_enabled | default(true)
        - ansible_distribution == 'Ubuntu'
        - not kubernetes
      tags: sgx
    - role: KMRA/configure_pccs_url
      when: not kubernetes
    - role: KMRA/install_crypto_api_toolkit
      when: not kubernetes
    - role: KMRA/install_ctk_loadkey
      when: not kubernetes
    - role: KMRA/create_empty_token_in_hsm
      vars:
        token_name: "{{ kmra_token_name }}"
        p11_module_path: "{{ p11_module_cryptoapi_path }}"
      when: not kubernetes
      tags: create_ctk_token
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true

# install and start KMRA on service node
- hosts: kube-master[0]
  roles:
    - role: KMRA/install_softhsm
      when: not kubernetes
    - role: KMRA/stop_apphsm
      when: not kubernetes
    - role: KMRA/install_apphsm
      when: not kubernetes
    - role: KMRA/create_test_token_with_key_for_apphsm
      vars:
        token_name: "{{ apphsm_token_name }}"
        p11_module_path: "{{ p11_module_softhsm_path }}"
        key_label: "{{ apphsm_key_in_token_name }}"
      when: not kubernetes
    - role: KMRA/start_apphsm
      when: not kubernetes
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true

# provision wrapped keys to KMRA compute nodes
- hosts: kube-node
  roles:
    - role: KMRA/provision_ctk_with_key_from_apphsm
      when: not kubernetes
  environment: "{{ proxy_env | d({}) }}"
  any_errors_fatal: true
