---
# apply common cluster node configuration
- hosts: k8s_cluster,vm_host
  tasks: []
  pre_tasks:
    - name: End play for VM host
      meta: end_host
      when:
        - "'vm_host' in group_names"
        - on_vms is defined and on_vms
  handlers:
    - name: reboot server
      reboot: { reboot_timeout: 1200 }
  roles:
    - role: cluster_defaults
    - role: bootstrap/configure_proxy
    - role: bootstrap/install_packages
    - role: bootstrap/update_grub
      when: update_kernel | default(false) | bool
    - role: bootstrap/configure_additional_grub_parameters
      tags: grub-extra-params
    - role: bootstrap/configure_security
    - role: bootstrap/apply_kubernetes_reqs
    - role: bootstrap/configure_dns
      when:
        - ansible_distribution == "Ubuntu" and dns_disable_stub_listener | default(true) | bool
        - not vm_enabled or (on_vms is defined and on_vms)
    - role: bootstrap/golang_install
  environment: "{{ '{{' }} proxy_env | d({}) {{ '}}' }}"
  any_errors_fatal: true

# apply worker node kernel configuration
- hosts: kube_node,vm_host
  tasks: []
  pre_tasks:
    - name: End play for VM host
      meta: end_host
      when:
        - "'vm_host' in group_names"
        - on_vms is defined and on_vms
  handlers:
    - name: reboot server
      reboot: { reboot_timeout: 1200 }
  roles:
    - role: cluster_defaults
    - role: bootstrap/configure_hugepages
      tags: hugepages
      when: hugepages_enabled | default(true) | bool
    - role: bootstrap/configure_cpu_isolation
      when: isolcpus_enabled | default(false) | bool
    - role: bootstrap/configure_intel_pstate
      when: intel_pstate_enabled is defined and intel_pstate_enabled | default(true) | bool
    - role: bootstrap/set_sriov_kernel_flags
      tags: setup-sriov
      when: iommu_enabled | default(true) | bool or (on_vms is defined and on_vms)
    - role: bootstrap/set_rdt_kernel_flags
      when: telegraf_enabled | default(true) | bool
{%- if playbook_name in ['full_nfv', 'remote_fp', 'on_prem'] %}
    - role: bootstrap/configure_sst
      tags: sst
      when:
        - (ansible_distribution == 'Ubuntu' and ansible_distribution_version >= '20.04') or
          (ansible_distribution == "CentOS" and ansible_distribution_version >= '8.3') or
          (ansible_distribution == "RedHat" and ansible_distribution_version >= '8.3')
        - (sst_bf_configuration_enabled is defined and sst_bf_configuration_enabled | default(false)) or
          (sst_cp_configuration_enabled is defined and sst_cp_configuration_enabled | default(false)) or
          (sst_tf_configuration_enabled is defined and sst_tf_configuration_enabled | default(false)) or
          (sst_pp_configuration_enabled is defined and sst_pp_configuration_enabled | default(false))
        - not vm_enabled or (on_vms is defined and on_vms)
{% endif %}
{%- if playbook_name in ['full_nfv', 'regional_dc'] %}
    - role: bootstrap/install_gpu_kernel
      when:
        - gpu_dp_enabled is defined and gpu_dp_enabled | default(false)
        - not vm_enabled or (on_vms is defined and on_vms)
{% endif %}
    - role: bootstrap/update_grub
  environment: "{{ '{{' }} proxy_env | d({}) {{ '}}' }}"
  any_errors_fatal: true

{%- if playbook_name in ['full_nfv', 'access', 'on_prem', 'remote_fp', 'storage'] %}
# install worker node qat software
- hosts: kube_node,vm_host
  tasks: []
  pre_tasks:
    - name: End play for VM host
      meta: end_host
      when:
        - "'vm_host' in group_names"
        - on_vms is defined and on_vms
  handlers:
    - name: reboot server
      reboot: { reboot_timeout: 1200 }
  roles:
    - role: cluster_defaults
    - role: bootstrap/install_qat_drivers_services
      tags: setup-qat
      when:
        - update_qat_drivers | default(false) | bool
        - qat_devices is defined and (qat_devices|length>0)
  environment: "{{ '{{' }} proxy_env | d({}) {{ '}}' }}"
  any_errors_fatal: true
{% endif %}

# install worker node network software
- hosts: kube_node,vm_host
  tasks: []
  pre_tasks:
    - name: End play for VM host
      meta: end_host
      when:
        - "'vm_host' in group_names"
        - on_vms is defined and on_vms
  roles:
    - role: cluster_defaults
    - role: bootstrap/update_nic_drivers
      when: update_nic_drivers | default(false) | bool
    - role: bootstrap/update_nic_firmware
      tags: firmware
      when:
        - dataplane_interfaces is defined and (dataplane_interfaces|length>0)
        - update_nic_firmware | default(false) | bool
        - update_nic_drivers | default(false) | bool
    - role: bootstrap/determine_dataplane_interfaces
      when:
        - not vm_enabled or (on_vms is defined and on_vms)
  environment: "{{ '{{' }} proxy_env | d({}) {{ '}}' }}"
  any_errors_fatal: true

# install DPDK and apply SRIOV configuration
- hosts: kube_node,vm_host
  pre_tasks:
    - name: End play for VM host
      meta: end_host
      when:
        - "'vm_host' in group_names"
        - on_vms is defined and on_vms
  roles:
    - role: cluster_defaults
{%- if playbook_name not in ['storage'] %}
    - role: install_dpdk
      when:
        - ovs_dpdk_enabled | default(false) | bool or install_dpdk | default(true) | bool
      tags: dpdk
{% endif %}
{%- if playbook_name in ['full_nfv', 'remote_fp'] %}
    - role: install_ddp_pkgs
      when: install_ddp_packages | default(true) | bool
{% endif %}
{%- if playbook_name not in ['storage'] %}
    - role: sriov_nic_init
      tags: setup-sriov-nic
      when:
        - install_dpdk is defined
        - iommu_enabled | default(true) | bool
        - install_dpdk | default(true) | bool
        - (kubernetes | default(true) | bool
          and not container_runtime_only_deployment | default(false) | bool
          and not sriov_network_operator_enabled | default(true) | bool
          or (not kubernetes | default(true) | bool
          and container_runtime_only_deployment | default(false) | bool))
{% endif %}
{%- if playbook_name in ['full_nfv', 'access', 'on_prem', 'remote_fp'] %}
    - role: bootstrap/configure_qat
      tags: setup-sriov-qat
      when:
        - qat_devices is defined and (qat_devices|length>0)
        - iommu_enabled | default(true) | bool
          or (on_vms is defined and on_vms)
        - update_qat_drivers | default(false) | bool
    - role: bootstrap/configure_openssl
      when:
        - qat_devices is defined and (qat_devices|length>0)
        - iommu_enabled | default(true) | bool
          or (on_vms is defined and on_vms)
        - update_qat_drivers | default(false) | bool
        - openssl_install | default(false) | bool
{% endif %}
{%- if playbook_name in ['full_nfv', 'on_prem', 'remote_fp'] %}
    - role: bootstrap/configure_sgx
      tags: sgx
      when:
        - configure_sgx is defined and configure_sgx | default(true) | bool
{% endif %}
  environment: "{{ '{{' }} proxy_env | d({}) {{ '}}' }}"
  any_errors_fatal: true
