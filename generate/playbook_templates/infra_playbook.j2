---
# apply common cluster node configuration
- hosts: k8s_cluster,vm_host
  tasks: []
  pre_tasks:
    - name: End play for VM host
      meta: end_host
      when:
        - "'vm_host' in group_names"
        - on_vms | default(false) | bool
  handlers:
    - name: reboot server
      reboot: { reboot_timeout: 1200 }
  roles:
    - role: cluster_defaults
      tags: always
    - role: bootstrap/configure_proxy
      tags:
        - proxy
        - intel-platform-sgx-setup
        - intel-platform-qat-setup
    - role: bootstrap/install_packages
    - role: bootstrap/run_dhclient_systemd_service_on_boot
      tags: run-dhclient-service-on-boot
      when:
        - ansible_os_family != "RedHat" or ansible_distribution_version <= "9.0"
        - enable_dhclient_systemd_service | default(false)
    - role: bootstrap/update_grub
      tags:
        - grub-update
        - intel-platform-qat-setup
      when: update_kernel | default(false) | bool
    - role: bootstrap/configure_additional_grub_parameters
      tags:
        - grub-extra-params
        - intel-platform-qat-setup
    - role: bootstrap/configure_security
    - role: bootstrap/apply_kubernetes_reqs
    - role: bootstrap/configure_dns
      when:
        - ansible_distribution == "Ubuntu" and dns_disable_stub_listener | default(true) | bool
        - not vm_enabled or on_vms | default(false) | bool
    - role: bootstrap/golang_install
      tags: golang-install
  environment: "{{ '{{' }} proxy_env | d({}) {{ '}}' }}"
  any_errors_fatal: true

# apply worker node kernel configuration
- hosts: kube_node,vm_host
  tasks: []
  pre_tasks:
    - name: End play for VM host
      meta: end_host
      when:
        - "'vm_host' in group_names"
        - on_vms | default(false) | bool
  handlers:
    - name: reboot server
      reboot: { reboot_timeout: 1200 }
  roles:
    - role: cluster_defaults
      tags: defaults
    - role: vm/prepare_vm_cluster
      when:
        - vm_enabled | default(false) | bool
        - not on_vms | default(false) | bool
    - role: bootstrap/configure_hugepages
      tags:
        - hugepages
        - intel-platform-qat-setup
      when: hugepages_enabled | default(true) | bool
    - role: bootstrap/configure_cpu_isolation
      when: isolcpus_enabled | default(false) | bool
    - role: bootstrap/configure_cpusets
      when: cpusets_enabled | default(false) | bool
    - role: bootstrap/configure_intel_pstate
      when: intel_pstate_enabled | default(true) | bool
    - role: bootstrap/configure_cstates
      when: cstate_enabled | default(false) | bool
    - role: bootstrap/configure_ufs
      when: ufs_enabled | default(false) | bool
    - role: bootstrap/auto_detect_qat_devices
      tags:
        - auto-detect-qat-device
        - intel-platform-qat-setup
      when:
        - update_qat_drivers | default(false) | bool
        - qat_devices | default([]) | length == 0
    - role: bootstrap/set_sriov_kernel_flags
      tags:
        - setup-sriov
        - intel-platform-qat-setup
      when:
        - iommu_enabled | default(true) | bool or on_vms | default(false) | bool
        - not ((configure_dlb_devices is defined and configure_dlb_devices) or
          (configure_dsa_devices is defined and configure_dsa_devices))
    - role: bootstrap/set_siov_kernel_flags
      tags:
        - setup-siov
        - intel-platform-qat-setup
      when:
        - iommu_enabled | default(true) | bool
        - ((configure_dsa_devices is defined and configure_dsa_devices) or
          (configure_dlb_devices is defined and configure_dlb_devices)) and
          ((ansible_distribution == "Ubuntu" and ansible_distribution_version == '20.04' and update_kernel) or
          (ansible_distribution == "Ubuntu" and ansible_distribution_version >= '21.04') or
          (ansible_os_family == "RedHat" and ansible_distribution_version >= '8.6'))
    - role: bootstrap/set_rdt_kernel_flags
      when: telegraf_enabled | default(true) | bool
    - role: bootstrap/set_intel_flexran_kernel_flags
      when: intel_flexran_enabled | default(false) | bool
{%- if playbook_name in ['full_nfv', 'remote_fp', 'on_prem', 'build_your_own'] %}
    - role: bootstrap/configure_sst
      tags: sst
      when:
        - (ansible_distribution == "Ubuntu" and ansible_distribution_version >= "20.04") or
          (ansible_os_family == "RedHat" and ansible_distribution_version >= "8.3")
        - sst_bf_configuration_enabled | default(false) | bool or
          sst_cp_configuration_enabled | default(false) | bool or
          sst_tf_configuration_enabled | default(false) | bool or
          sst_pp_configuration_enabled | default(false) | bool
        - not vm_enabled or on_vms | default(false) | bool
{%- endif %}
{%- if playbook_name in ['full_nfv', 'on_prem', 'regional_dc', 'build_your_own'] %}
    - role: bootstrap/install_gpu_driver
      when:
        - configure_gpu | default(false) | bool
        - not vm_enabled or on_vms | default(false) | bool
{%- endif %}
    - role: bootstrap/update_grub
      tags:
        - grub-update
        - intel-platform-qat-setup
  environment: "{{ '{{' }} proxy_env | d({}) {{ '}}' }}"
  any_errors_fatal: true

{% if playbook_name in ['full_nfv', 'access', 'on_prem', 'remote_fp', 'build_your_own'] -%}
# install worker node qat software
- hosts: kube_node,vm_host
  tasks: []
  pre_tasks:
    - name: End play for VM host
      meta: end_host
      when:
        - "'vm_host' in group_names"
        - on_vms | default(false) | bool
  handlers:
    - name: reboot server
      reboot: { reboot_timeout: 1200 }
  roles:
    - role: cluster_defaults
      tags: defaults
    - role: bootstrap/apply_intel_pstate
      when: intel_pstate_enabled | default(true) | bool
    - role: bootstrap/install_qat_drivers_services
      tags:
        - setup-qat
        - intel-platform-qat-setup
      when:
        - update_qat_drivers | default(false) | bool
        - qat_devices | default([]) | length > 0
    - role: bootstrap/configure_dlb
      tags: dlb-dp
      when:
        - configure_dlb_devices is defined and configure_dlb_devices
        - (ansible_distribution == "Ubuntu" and ansible_distribution_version == '20.04' and update_kernel) or
          (ansible_distribution == "Ubuntu" and ansible_distribution_version >= '21.04') or
          (ansible_os_family == "RedHat" and ansible_distribution_version >= '8.6')
    - role: bootstrap/configure_dsa
      tags: dsa-dp
      when: configure_dsa_devices | default(false)
  environment: "{{ '{{' }} proxy_env | d({}) {{ '}}' }}"
  any_errors_fatal: true
{%- endif %}

# install worker node network software
- hosts: kube_node,vm_host
  tasks: []
  pre_tasks:
    - name: End play for VM host
      meta: end_host
      when:
        - "'vm_host' in group_names"
        - on_vms | default(false) | bool
  roles:
    - role: cluster_defaults
      tags: defaults
    - role: bootstrap/determine_dataplane_interfaces
      tags:
        - determine-dataplane-interfaces
        - update-nic-firmware
      when:
        - dataplane_interfaces | default([]) | length > 0
    - role: bootstrap/update_nic_drivers
      tags: update-nic-drivers
      when: update_nic_drivers | default(false) | bool
    - role: bootstrap/update_nic_firmware
      tags: update-nic-firmware
      when:
        - dataplane_interfaces | default([]) | length > 0
        - update_nic_firmware | default(false) | bool
        - update_nic_drivers | default(false) | bool
  environment: "{{ '{{' }} proxy_env | d({}) {{ '}}' }}"
  any_errors_fatal: true

# install DPDK and apply SRIOV configuration
- hosts: kube_node,vm_host
  pre_tasks:
    - name: End play for VM host
      meta: end_host
      when:
        - "'vm_host' in group_names"
        - on_vms | default(false) | bool
  roles:
    - role: cluster_defaults
      tags: defaults
    # the role is added here again to fix NIC name changes after driver update
    - role: bootstrap/determine_dataplane_interfaces
      tags:
        - determine-dataplane-interfaces
        - setup-sriov-nic
        - sriov-network-operator
      when:
        - dataplane_interfaces | default([]) | length > 0
    - role: install_dpdk
      tags:
        - dpdk
        - intel-platform-qat-setup
      when:
        - ovs_dpdk_enabled | default(false) | bool or install_dpdk | default(true) | bool
{%- if playbook_name in ['full_nfv', 'remote_fp', 'build_your_own'] %}
    - role: install_ddp_pkgs
      when: install_ddp_packages | default(true) | bool
{%- endif %}
    - role: sriov_nic_init
      tags: setup-sriov-nic
      when:
        - install_dpdk | default(true) | bool
        - iommu_enabled | default(true) | bool
        - (kubernetes | default(true) | bool
          and not container_runtime_only_deployment | default(false) | bool
          and not sriov_network_operator_enabled | default(false) | bool
          or (not kubernetes | default(true) | bool
          and container_runtime_only_deployment | default(false) | bool))
{%- if playbook_name in ['full_nfv', 'access', 'on_prem', 'remote_fp', 'build_your_own'] %}
    - role: bootstrap/configure_qat
      tags:
        - setup-sriov-qat
        - intel-platform-qat-setup
      when:
        - qat_devices | default([]) | length > 0
        - iommu_enabled | default(true) | bool
          or on_vms | default(false) | bool
        - update_qat_drivers | default(false) | bool
    - role: bootstrap/configure_openssl
      tags:
        - configure-openssl
        - intel-platform-qat-setup
      when:
        - qat_devices | default([]) | length > 0
        - iommu_enabled | default(true) | bool
          or on_vms | default(false) | bool
        - update_qat_drivers | default(false) | bool
        - openssl_install | default(false) | bool
{%- endif %}
{%- if playbook_name in ['full_nfv', 'on_prem', 'remote_fp', 'regional_dc', 'build_your_own'] %}
    - role: bootstrap/configure_sgx
      tags:
        - sgx
        - intel-platform-sgx-setup
      when:
        - configure_sgx | default(false) | bool
{%- endif %}
  environment: "{{ '{{' }} proxy_env | d({}) {{ '}}' }}"
  any_errors_fatal: true

- hosts: k8s_cluster
  roles:
    - role: bootstrap/configure_adq
      tags: configure-adq
      when: adq_dp.enabled |d(false) | bool
  environment: "{{ '{{' }} proxy_env | d({}) {{ '}}' }}"
  any_errors_fatal: true
