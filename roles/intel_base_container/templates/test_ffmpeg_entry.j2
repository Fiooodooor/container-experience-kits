#!/bin/bash

TEST_POSTFIX="$1"

ffmpeg -decoders | grep -Ei "qsv|vaapi"
ffmpeg -encoders | grep -Ei "qsv|vaapi"

ffmpeg_data_path="$HOME"/data/ffmpeg_data_"$TEST_POSTFIX"
ffmpeg_output_path="$HOME"/data/ffmpeg_output_"$TEST_POSTFIX"
if [[ ! -d $ffmpeg_data_path ]]
then
    mkdir -p "$ffmpeg_data_path"
fi

input_mp4_md5="e919de1193da5ceb8b0fd3cd998c2694"
output_yuv_md5="8dccdfb5226e94732d83343cbaf25e8c"
count=0
while [[ ${count} -le 5 ]]
do
    if [[ ! -f ${ffmpeg_data_path}/input_car-detection.mp4 ]] || [[ $(md5sum "${ffmpeg_data_path}"/input_car-detection.mp4 | awk '{print $1}') != "${input_mp4_md5}" ]]
    then
        curl -L https://storage.openvinotoolkit.org/test_data/videos/car-detection.mp4 --output "${ffmpeg_data_path}"/input_car-detection.mp4
        (( count+=1 )) || true
    else
        break
    fi
    if [[ ${count} == 5 ]]
    then
        echo ""
        echo "[Warning] !!!The mp4 file download failed, please rerun the case."
        exit 1
    fi
done

if [[ -d ${ffmpeg_output_path} ]]
then
    rm -rf "${ffmpeg_output_path}"
fi
mkdir -p "${ffmpeg_output_path}"


{% if configure_gpu %}
if vainfo -a | grep "RateControl" | grep "CBR"
then
    echo "CBR is supported, test CBR"
    cbr_supported=1
    size_threshold=2500
else
    echo "CBR not supported, test CQP"
    cbr_supported=0
    size_threshold=100
fi

ffmpeg -v verbose -hwaccel qsv -init_hw_device qsv=qsv,child_device=/dev/dri/renderD128 -hwaccel_output_format nv12 \
       -hwaccel_flags allow_profile_mismatch -c:v h264_qsv -i "${ffmpeg_data_path}"/input_car-detection.mp4 -lavfi 'null' -c:v rawvideo -pix_fmt yuv420p \
       -fps_mode passthrough -autoscale 0 -y "${ffmpeg_output_path}"/ffmpeg_decode_output_car-detection.yuv

if [[ "${cbr_supported}" -gt 0 ]]
then
    ffmpeg -v verbose -hwaccel qsv -init_hw_device qsv=qsv,child_device=/dev/dri/renderD128 -hwaccel_output_format qsv \
        -f rawvideo -pix_fmt yuv420p -s:v 768x432  -r:v 30 -i "${ffmpeg_output_path}"/ffmpeg_decode_output_car-detection.yuv \
        -vf 'format=nv12,hwupload=extra_hw_frames=120' -an -c:v h264_qsv  -profile:v main -g 30 -slices 1 -b:v 2000k -maxrate 2000k -y "${ffmpeg_output_path}"/ffmpeg_encode_output_car-detection.264
else
    ffmpeg -v verbose -hwaccel qsv -init_hw_device qsv=qsv,child_device=/dev/dri/renderD128 -hwaccel_output_format qsv \
        -f rawvideo -pix_fmt yuv420p -s:v 768x432  -r:v 30 -i "${ffmpeg_output_path}"/ffmpeg_decode_output_car-detection.yuv \
        -vf 'format=nv12,hwupload=extra_hw_frames=120' -an -c:v h264_qsv  -profile:v main -g 30 -slices 1 -q 26 -y "${ffmpeg_output_path}"/ffmpeg_encode_output_car-detection.264
fi

{% else %}

ffmpeg -v verbose \
        -c:v h264 -i "${ffmpeg_data_path}"/input_car-detection.mp4 -lavfi 'null' -c:v rawvideo -pix_fmt yuv420p \
        -fps_mode passthrough -autoscale 0 -y "${ffmpeg_output_path}"/ffmpeg_decode_output_car-detection.yuv

ffmpeg -v verbose \
        -f rawvideo -pix_fmt yuv420p -s:v 768x432  -r:v 30 -i "${ffmpeg_output_path}"/ffmpeg_decode_output_car-detection.yuv \
        -c:v libx264 -profile:v main -g 30 -slices 1 -b:v 2000k -maxrate 2000k -y "${ffmpeg_output_path}"/ffmpeg_encode_output_car-detection.264

size_threshold=2500

{% endif %}

result="Failed"

sync
sleep 2

cd "${ffmpeg_output_path}" || exit
current_yuv_md5=$(md5sum -- *yuv | awk '{print $1}')
current_264_size=$(du ./*264 | awk '{print $1}' )
echo "***Current files md5:"
md5sum -- *yuv
echo "***Current files:"
ls -l
if [[ "${current_yuv_md5}" == "${output_yuv_md5}" ]] && [[ "${current_264_size}" -gt "${size_threshold}" ]]
then
    result="Passed"
else
    if [[ "${current_264_size}" -le "${size_threshold}" ]]
    then
        result="Failed: The size of h264 file is abnormal."
    else
        result="Failed: The MD5 value of the yuv file is different from the base value."
    fi
fi
echo "${result}" | tee "$HOME"/data/test_ffmpeg_result_"$TEST_POSTFIX"
