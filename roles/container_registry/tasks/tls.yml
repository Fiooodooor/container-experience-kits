##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: Generate Key and CSR
  when: inventory_hostname == groups['kube_control_plane'][0]
  block:
    - name: Create registry SSL directory
      ansible.builtin.file:
        path: "{{ registry_tls_dir }}"
        state: directory
        mode: 0700
        owner: root
        group: root
      become: true

    - name: Populate registry CSR template
      ansible.builtin.template:
        src: "registry_csr_template.json.j2"
        dest: "{{ (registry_tls_dir, 'registry-csr.json') | path_join }}"
        mode: 0600
        owner: root
        group: root
      become: true

    - name: Get GOPATH
      ansible.builtin.command: >-
        go env GOPATH
      register: gopath
      changed_when: false

    - name: Generate key and CSR using cfssl
      ansible.builtin.shell:
        cmd: >-
          set -o pipefail &&
          {{ gopath.stdout }}/bin/cfssl genkey registry-csr.json |
          {{ gopath.stdout }}/bin/cfssljson -bare registry
        creates: registry-key.pem
        chdir: "{{ registry_tls_dir }}"
      args:
        executable: /bin/bash
      become: true

    - name: Read generated key
      ansible.builtin.slurp:
        src: "{{ (registry_tls_dir, 'registry-key.pem') | path_join }}"
      register: generated_key
      no_log: true

    - name: Read generated csr
      ansible.builtin.slurp:
        src: "{{ (registry_tls_dir, 'registry.csr') | path_join }}"
      register: generated_csr

    - name: Load generated key & csr
      ansible.builtin.set_fact:
        registry_key_base64: "{{ generated_key.content }}"
        registry_csr_base64: "{{ generated_csr.content }}"
      no_log: true


- name: Get certificate signed by kubernetes
  when: inventory_hostname == groups['kube_control_plane'][0]
  block:
    - name: Send CSR to the Kubernetes API Server
      kubernetes.core.k8s:
        template: registry_csr.yaml.j2
        state: present
      register: csr_signing

    - name: Approve CSR to sign certificate
      ansible.builtin.command: >-
        kubectl -n {{ registry_namespace }} certificate approve {{ registry_csr_name }}
      changed_when: true
      when: csr_signing.changed

    - name: Get signed certificate
      kubernetes.core.k8s_info:
        kind: CertificateSigningRequest
        name: "{{ registry_csr_name }}"
        namespace: "{{ registry_namespace }}"
      register: registry_csr
      retries: 10
      delay: 3
      until: |
        registry_csr.resources | length() != 0 and
        registry_csr.resources[0].status is defined and
        registry_csr.resources[0].status.certificate is defined
      no_log: true

    - name: Load signed cert
      ansible.builtin.set_fact:
        registry_cert_base64: "{{ registry_csr.resources[0].status.certificate }}"


- name: Create TLS secret for registry
  kubernetes.core.k8s:
    template: registry_tls_secret.yaml.j2
    state: present
  no_log: true
  when: inventory_hostname == groups['kube_control_plane'][0]

- name: Clean up generated files from system
  ansible.builtin.file:
    path: "{{ registry_tls_dir }}"
    state: absent
  become: true
  when: inventory_hostname == groups['kube_control_plane'][0]

# copy CA file so that registry clients can validate its certificate
- name: Copy Kubernetes CA so that registry client can validate registry's certificate
  become: true
  vars:
    certs_path: |-
      {%- if container_runtime == "docker" -%}
      /etc/docker/certs.d/
      {%- else -%}
      /etc/containers/certs.d/
      {%- endif -%}
  block:
    - name: Remove existing certs and keys
      ansible.builtin.file:
        path: "{{ (certs_path, registry_local_address) | path_join }}"
        state: absent

    - name: Ensure that path exists
      ansible.builtin.file:
        path: "{{ (certs_path, registry_local_address) | path_join }}"
        mode: '0700'
        owner: root
        group: root
        state: directory

    - name: Place Kubernetes CA in the /etc/docker/certs.d
      ansible.builtin.copy:
        src: /etc/kubernetes/ssl/ca.crt
        dest: "{{ (certs_path, registry_local_address, 'ca.crt') | path_join }}"
        remote_src: true
        mode: '0600'
        owner: root
        group: root
