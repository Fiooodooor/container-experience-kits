##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: Install dependencies
  ansible.builtin.include_role:
    name: install_dependencies
  when: inventory_hostname == groups['kube_control_plane'][0]

- name: Wait for kube-apiserver to be up
  ansible.builtin.uri:
    url: "https://127.0.0.1:6443/healthz"
    client_cert: "{{ kube_apiserver_cert }}"
    client_key: "{{ kube_apiserver_key }}"
    validate_certs: false
  register: kube_api
  until: kube_api.status == 200
  retries: 15
  delay: 5
  when: inventory_hostname == groups['kube_control_plane'][0]

- name: Create container registry directory
  ansible.builtin.file:
    path: "{{ registry_root_dir }}"
    state: directory
    mode: 0755
  when: inventory_hostname == groups['kube_control_plane'][0]

- name: Generate server and client certificates
  ansible.builtin.include_tasks: tls.yml

- name: Generate registry password if not provided
  ansible.builtin.set_fact:
    registry_password: "{{ lookup('ansible.builtin.password', '/dev/null') }}"
  no_log: true
  when:
    - (registry_password is not defined) or (not registry_password)
  run_once: true

- name: Prepare registry htpasswd configuration
  when: inventory_hostname == groups['kube_control_plane'][0]
  block:
    - name: Generate htpasswd contents
      ansible.builtin.command: >-
        htpasswd -Bbn {{ registry_user }} {{ registry_password }}
      changed_when: true
      register: registry_htpasswd
      no_log: true

    - name: Crate htpasswd secret
      kubernetes.core.k8s:
        state: present
        template: registry_htpasswd.yaml.j2
        wait: true
      no_log: true


- name: Prepare registry storage
  when: inventory_hostname == groups['kube_control_plane'][0]
  block:
    - name: Create registry storage directory
      ansible.builtin.file:
        path: "{{ registry_storage_dir }}"
        owner: '1000'
        group: root
        mode: '0700'
        state: directory

    - name: Create registry persistent volume
      kubernetes.core.k8s:
        state: present
        template: registry_pv.yaml.j2
        wait: true

    - name: Create registry persistent volume claim
      kubernetes.core.k8s:
        state: present
        template: registry_pvc.yaml.j2
        wait: true


- name: Copy container-registry helm chart
  copy:
    src: "{{ (role_path, 'charts', 'container-registry/') | path_join }}"
    dest: "{{ registry_chart_dir }}"
    mode: 0644
  when: inventory_hostname == groups['kube_control_plane'][0]

- name: Template Chart appVersion
  replace:
    path: "{{ (registry_chart_dir, 'Chart.yaml') | path_join }}"
    regexp: "<app-version>"
    replace: "{{ registry_version }}"
  when: inventory_hostname == groups['kube_control_plane'][0]

- name: Template container registry helm values
  ansible.builtin.template:
    src: values_registry.yaml.j2
    dest: "{{ (registry_chart_dir, 'values_registry.yaml') | path_join }}"
    force: yes
    mode: preserve
  when: inventory_hostname == groups['kube_control_plane'][0]

- name: Deploy container registry
  kubernetes.core.helm:
    chart_ref: "{{ registry_chart_dir }}"
    release_name: "{{ registry_release_name }}"
    release_namespace: "{{ registry_namespace }}"
    values_files: "{{ (registry_chart_dir, 'values_registry.yaml') | path_join }}"
    create_namespace: true
    force: true
    wait: true
    timeout: 10m0s
  when: inventory_hostname == groups['kube_control_plane'][0]

- name: Wait for container registry to be reachable by all nodes
  ansible.builtin.uri:
    url: "https://{{ registry_local_address }}"
    user: "{{ registry_user }}"
    password: "{{ registry_password }}"
    method: GET
    ca_path: /etc/kubernetes/ssl/ca.crt
    force_basic_auth: true
    force: true
  register: result
  until: result.status == 200
  retries: 20
  delay: 5

- name: Check docker config file exists
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.docker/config.json"
  register: docker_conf_stat

- name: Fetch existing docker config
  ansible.builtin.slurp:
    src: "{{ ansible_env.HOME }}/.docker/config.json"
  register: docker_conf_content
  no_log: true
  when: docker_conf_stat.stat.exists

- name: Add auth to docker config
  vars:
    original_conf: |-
     {%- if docker_conf_stat.stat.exists -%}
     {{ (docker_conf_content.content | b64decode | from_json) }}
     {%- else -%}
     {}
     {%- endif -%}
    auth_section: "{{ lookup('template', 'docker_auth.json.j2') }}"
  ansible.builtin.copy:
    content: "{{ original_conf | combine(auth_section) | to_nice_json(indent=8) }}"
    dest: "{{ ansible_env.HOME }}/.docker/config.json"
    owner: "{{ ansible_user | default(ansible_user_id) }}"
    group: "{{ ansible_user | default(ansible_user_id) }}"
    mode: 0640
  no_log: true

- name: Copy config file to Kubelet config dir
  ansible.builtin.copy:
    src: "{{ ansible_env.HOME }}/.docker/config.json"
    dest: "{{ registry_auth_path }}"
    remote_src: true
    owner: root
    group: root
    mode: 0640

- name: Add registry environment variable to /etc/environment
  ansible.builtin.lineinfile:
    path: /etc/environment
    line: "{{ registry_auth_env }}"
    owner: root
    group: root
    mode: 0644

- name: Setup registry config file for rke2 provisioner
  ansible.builtin.include_role:
    name: rke2_defaults
    tasks_from: rke2_registries
  when: kube_provisioner == 'rke2'
