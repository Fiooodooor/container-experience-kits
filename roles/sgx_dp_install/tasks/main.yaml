##
##   Copyright (c) 2020-2021 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: Set is_icx to false
  set_fact:
    is_icx: False

- name: Read CPU Type
  shell:
    cmd: lscpu | grep "Model name:"
  register: cpu_model
  changed_when: false

- name: Check if icx sku
  set_fact:
    is_icx: True
  when: item in cpu_model.stdout
  loop: '{{ supported_icx_skus }}'

- name: install dependencies
  include_role:
    name: install_dependencies
  when: is_icx | default(false) | bool

- name: clone Intel Device Plugins repository
  git:
    repo: "{{ intel_sgx_dp_git_url }}"
    version: "{{ intel_sgx_dp_git_ref }}"
    dest: "{{ intel_sgx_dp_dir }}"
    force: yes
  when: is_icx | default(false) | bool

- name: create Helm charts directory if needed
  file:
    path: /usr/src/charts
    state: directory
    mode: 0755
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool

- name: build Intel SGX Device Plugin image
  make:
    target: intel-sgx-plugin
    chdir: "{{ intel_sgx_dp_dir }}"
  when:
    - inventory_hostname == groups['kube-node'][0]
    - sgx_dp_build_image_locally
    - is_icx | default(false) | bool

- name: build Intel sgx-aesmd image
  make:
    target: sgx-aesmd-demo
    chdir: "{{ intel_sgx_dp_dir }}"
  when:
    - inventory_hostname == groups['kube-node'][0]
    - is_icx | default(false) | bool

- name: build Intel SGX Device Plugin initcontainer image
  make:
    target: intel-sgx-initcontainer
    chdir: "{{ intel_sgx_dp_dir }}"
  when:
    - inventory_hostname == groups['kube-node'][0]
    - sgx_dp_build_image_locally
    - is_icx | default(false) | bool

- name: tag Intel sgx-aesmd image
  command: docker tag intel/sgx-aesmd-demo:{{ sgx_dp_aesmd_image_version }} {{ registry_local_address }}/intel-sgx-aesmd-demo:latest
  when:
    - inventory_hostname == groups['kube-node'][0]
    - is_icx | default(false) | bool

- name: tag Intel SGX Device Plugin image
  command: docker tag intel/intel-sgx-plugin:{{ intel_sgx_dp_version }} {{ registry_local_address }}/intel-sgx-plugin:latest
  when:
    - inventory_hostname == groups['kube-node'][0]
    - sgx_dp_build_image_locally
    - is_icx | default(false) | bool

- name: tag Intel SGX Device Plugin initcontainer image
  command: docker tag intel/intel-sgx-initcontainer:{{ intel_sgx_dp_init_version }} {{ registry_local_address }}/intel-sgx-initcontainer:latest
  when:
    - inventory_hostname == groups['kube-node'][0]
    - sgx_dp_build_image_locally
    - is_icx | default(false) | bool

- name: push Intel SGX Device Plugin image to local registry
  command: docker push {{ registry_local_address }}/intel-sgx-plugin:latest
  when:
    - inventory_hostname == groups['kube-node'][0]
    - sgx_dp_build_image_locally
    - is_icx | default(false) | bool

- name: push Intel sgx-aesmd image to local registry
  command: docker push {{ registry_local_address }}/intel-sgx-aesmd-demo:latest
  when:
    - inventory_hostname == groups['kube-node'][0]
    - is_icx | default(false) | bool

- name: push Intel SGX Device Plugin initcontainer image to local registry
  command: docker push {{ registry_local_address }}/intel-sgx-initcontainer:latest
  when:
    - inventory_hostname == groups['kube-node'][0]
    - sgx_dp_build_image_locally
    - is_icx | default(false) | bool

- name: check if cert-manager namespace exists
  command: kubectl get namespace {{ cert_manager_namespace }}
  register: ns_exists
  failed_when: no
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool

- name: create a namespace for cert-manager
  command: kubectl create namespace {{ cert_manager_namespace }}
  when:
    - inventory_hostname == groups['kube-master'][0]
    - ns_exists.stderr is defined and "NotFound" in ns_exists.stderr
    - is_icx | default(false) | bool

- name: add the Jetstack helm repository
  command: helm repo add jetstack {{ cert_manager_repo }}
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool

- name: update local Helm chart repository cache
  command: helm repo update
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool

- name: install the cert-manager Helm chart
  command: helm upgrade -i cert-manager jetstack/cert-manager --namespace cert-manager --version v1.0.3 --set installCRDs=true
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool

- name: change memory limit in Intel One Operator for Device Plugins
  lineinfile:
    dest: "{{ intel_sgx_dp_dir }}/deployments/operator/manager/manager.yaml"
    regexp: 'memory: 30Mi'
    line: "            memory: 50Mi"
    mode: '0644'
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool

- name: change memory request in Intel One Operator for Device Plugins
  lineinfile:
    dest: "{{ intel_sgx_dp_dir }}/deployments/operator/manager/manager.yaml"
    regexp: 'memory: 20Mi'
    line: "            memory: 40Mi"
    mode: '0644'
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool

- name: install Intel One Operator for Device Plugins
  command: kubectl apply -k {{ intel_sgx_dp_dir }}/deployments/operator/default
  register: result
  retries: 10
  delay: 1
  until: result is not failed
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool

- name: copy Helm chart to the controller node
  copy:
    src: "{{ role_path }}/charts/intel-sgx-plugin"
    dest: "/usr/src/charts/"
    mode: 0755
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool

- name: set values for Helm charts
  set_fact:
    sgx_dp_image: "{{ registry_local_address }}/intel-sgx-plugin"
    sgx_dp_version: latest
    sgx_dp_init_image: "{{ registry_local_address }}/intel-sgx-initcontainer"
    sgx_dp_init_version: latest
  when:
    - inventory_hostname == groups['kube-master'][0]
    - sgx_dp_build_image_locally
    - is_icx | default(false) | bool

- name: populate Intel SGX Plugin Helm chart values template and push to controller node
  template:
    src: "sgx_values.yml.j2"
    dest: "/usr/src/charts/intel-sgx-plugin-values.yml"
    force: yes
    mode: preserve
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool

- name: wait for Intel One Operator for Device Plugins to become fully available
  pause:
    seconds: 90
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool

- name: install Intel SGX Plugin Helm chart
  command: helm upgrade -i intel-sgx-plugin -f /usr/src/charts/intel-sgx-plugin-values.yml --namespace {{ sgx_dp_namespace }} /usr/src/charts/intel-sgx-plugin
  when:
    - inventory_hostname == groups['kube-master'][0]
    - is_icx | default(false) | bool
