##
##   Copyright (c) 2020-2021 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: determine machine type
  include_role:
    name: check_machine_type

- name: install dependencies
  include_role:
    name: install_dependencies
  when: is_icx | default(false) | bool

- name: clone Intel Device Plugins repository
  git:
    repo: "{{ intel_sgx_dp_git_url }}"
    version: "{{ intel_sgx_dp_git_ref }}"
    dest: "{{ intel_sgx_dp_dir }}"
    force: yes
  when:
    - inventory_hostname == groups['kube_node'][0]
    - is_icx | default(false) | bool

# docker is used as container runtime:
- name: prepare containers images
  block:
    - name: build SGX Plugin before Intel SGX Device Plugin images
      make:
        target: sgx_plugin
        chdir: "{{ intel_sgx_dp_dir }}"
      when: sgx_dp_build_image_locally

    - name: build Intel SGX Device Plugin images
      make:
        target: "{{ item }}"
        chdir: "{{ intel_sgx_dp_dir }}"
      loop:
        - intel-sgx-plugin
        - intel-sgx-initcontainer
      when: sgx_dp_build_image_locally

    - name: tag Intel SGX Device Plugin images
      command: docker tag intel/{{ item }}:{{ intel_sgx_dp_version }} {{ registry_local_address }}/{{ item }}:{{ intel_sgx_dp_version }}
      loop:
        - intel-sgx-plugin
        - intel-sgx-initcontainer
      when: sgx_dp_build_image_locally

    - name: push Intel SGX Device Plugin images to local registry
      command: docker push {{ registry_local_address }}/{{ item }}:{{ intel_sgx_dp_version }}
      loop:
        - intel-sgx-plugin
        - intel-sgx-initcontainer
      when: sgx_dp_build_image_locally

    - name: build Intel sgx-aesmd image
      make:
        target: sgx-aesmd-demo
        chdir: "{{ intel_sgx_dp_dir }}"
      retries: 5
      delay: 10
      register: build_aesmd
      until: build_aesmd is not failed

    - name: tag Intel sgx-aesmd image
      command: docker tag intel/sgx-aesmd-demo:{{ intel_sgx_dp_version }} {{ registry_local_address }}/intel-sgx-aesmd-demo:{{ intel_sgx_dp_version }}

    - name: push Intel sgx-aesmd image to local registry
      command: docker push {{ registry_local_address }}/intel-sgx-aesmd-demo:{{ intel_sgx_dp_version }}
  when:
    - inventory_hostname == groups['kube_node'][0]
    - is_icx | default(false) | bool
    - container_runtime == "docker"

# containerd/cri-o is used as container runtime:
- name: prepare containers images
  block:
    - name: build and tag Intel SGX Device Plugin images
      command: buildah bud -f build/docker/{{ item.file }} -t {{ registry_local_address }}/{{ item.name }}:{{ intel_sgx_dp_version }}
      args:
        chdir: "{{ intel_sgx_dp_dir }}"
      changed_when: true
      with_items:
        - { file: intel-sgx-initcontainer.Dockerfile, name: intel-sgx-initcontainer }
        - { file: intel-sgx-plugin.Dockerfile, name: intel-sgx-plugin }
      when: sgx_dp_build_image_locally

    - name: push Intel SGX Device Plugin images to local registry
      command: buildah push {{ registry_local_address }}/{{ item }}:{{ intel_sgx_dp_version }}
      changed_when: true
      loop:
        - intel-sgx-initcontainer
        - intel-sgx-plugin
      when: sgx_dp_build_image_locally

    - name: build and tag Intel sgx-aesmd image
      command: buildah bud -f demo/sgx-aesmd-demo/Dockerfile -t {{ registry_local_address }}/intel-sgx-aesmd-demo:{{ intel_sgx_dp_version }}
      args:
        chdir: "{{ intel_sgx_dp_dir }}"
      changed_when: true

    - name: push Intel sgx-aesmd image to local registry
      command: buildah push {{ registry_local_address }}/intel-sgx-aesmd-demo:{{ intel_sgx_dp_version }}
      changed_when: true
  when:
    - inventory_hostname == groups['kube_node'][0]
    - is_icx | default(false) | bool
    - '"docker" not in container_runtime'

- name: prepare and deploy PSP and RBAC
  block:
    - name: make sure directory for PSP and RBAC rules exists
      file:
        path: "{{ intel_sgx_psp_rbac_dir }}"
        state: directory
        mode: 0755

    - name: copy PSP and RBAC files
      copy:
        src: "{{ role_path }}/files/{{ item }}"
        dest: "{{ intel_sgx_psp_rbac_dir }}/{{ item }}"
        mode: 0755
      loop:
        - sgx-psp.yml
        - sgx-rbac-cluster-role.yml

    - name: populate RBAC role binding yaml file and push to controller node
      template:
        src: "sgx-rbac-role-binding.yml.j2"
        dest: "{{ intel_sgx_psp_rbac_dir }}/sgx-rbac-role-binding.yml"
        force: yes
        mode: preserve

    - name: create PSP and RBAC
      k8s:
        state: present
        src: "{{ intel_sgx_psp_rbac_dir }}/{{ item }}"
      loop:
        - sgx-psp.yml
        - sgx-rbac-cluster-role.yml
        - sgx-rbac-role-binding.yml
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
    - is_icx | default(false) | bool
    - psp_enabled | default(true)

- name: prepare and deploy Intel SGX Device Plugin
  block:
    - name: set values
      set_fact:
        sgx_dp_image: "{{ registry_local_address }}/intel-sgx-plugin"
        sgx_dp_init_image: "{{ registry_local_address }}/intel-sgx-initcontainer"
        sgx_dp_version: "{{ intel_sgx_dp_version }}"
      when: sgx_dp_build_image_locally

    - name: populate Intel SGX Plugin yaml file and push to controller node
      template:
        src: "intel-sgx-plugin.yml.j2"
        dest: "/usr/src/intel-sgx-plugin.yml"
        force: yes
        mode: preserve

    - name: deploy Intel SGX Device Plugin with the Intel Device Plugin Operator
      k8s:
        state: present
        src: "/usr/src/intel-sgx-plugin.yml"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
    - is_icx | default(false) | bool

- name: wait for Intel SGX Device Plugin
  pause:
    minutes: 1
  when: is_icx | default(false) | bool

- name: prepare and deploy Intel SGX aesmd
  block:
    - name: create Helm charts directory if needed
      file:
        path: /usr/src/charts
        state: directory
        mode: 0755

    - name: populate Intel SGX aesmd Helm chart values template and push to controller node
      template:
        src: "aesmd-values.yml.j2"
        dest: "/usr/src/charts/intel-sgx-aesmd-values.yml"
        force: yes
        mode: preserve

    - name: copy Helm chart to the controller node
      copy:
        src: "{{ role_path }}/charts/intel-sgx-aesmd"
        dest: "/usr/src/charts/"
        mode: 0755

    - name: install Intel SGX aesmd Helm chart
      command: >-
        helm upgrade -i intel-sgx-aesmd
        -f /usr/src/charts/intel-sgx-aesmd-values.yml
        --namespace {{ sgx_aesmd_namespace }}
        /usr/src/charts/intel-sgx-aesmd
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
    - is_icx | default(false) | bool
