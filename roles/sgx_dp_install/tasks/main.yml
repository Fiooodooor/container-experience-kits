##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: Install dependencies
  include_role:
    name: install_dependencies
  when:
    - inventory_hostname == groups['kube_node'][0]

# docker is used as container runtime:
- name: Prepare containers images
  when:
    - inventory_hostname == groups['kube_node'][0]
    - container_runtime == "docker"
  block:
    - name: Build Intel SGX Device Plugin images
      make:
        target: "{{ item }}"
        chdir: "{{ intel_dp_dir }}"
      loop:
        - intel-sgx-plugin
        - intel-sgx-initcontainer
      when: sgx_dp_build_image_locally

    - name: Tag Intel SGX Device Plugin images
      command: docker tag intel/{{ item }}:{{ intel_dp_version }} {{ registry_local_address }}/{{ item }}:{{ intel_dp_version }}
      loop:
        - intel-sgx-plugin
        - intel-sgx-initcontainer
      when: sgx_dp_build_image_locally

    - name: Push Intel SGX Device Plugin images to local registry
      command: docker push {{ registry_local_address }}/{{ item }}:{{ intel_dp_version }}
      loop:
        - intel-sgx-plugin
        - intel-sgx-initcontainer
      when: sgx_dp_build_image_locally

# containerd/cri-o is used as container runtime:
- name: Prepare containers images
  when:
    - inventory_hostname == groups['kube_node'][0]
    - '"docker" not in container_runtime'
  block:
    - name: Build and tag Intel SGX Device Plugin images
      command: podman build -f build/docker/{{ item.file }} -t {{ registry_local_address }}/{{ item.name }}:{{ intel_dp_version }}
      args:
        chdir: "{{ intel_dp_dir }}"
      changed_when: true
      with_items:
        - {file: intel-sgx-initcontainer.Dockerfile, name: intel-sgx-initcontainer}
        - {file: intel-sgx-plugin.Dockerfile, name: intel-sgx-plugin}
      when: sgx_dp_build_image_locally

    - name: Push Intel SGX Device Plugin images to local registry
      command: podman push {{ registry_local_address }}/{{ item }}:{{ intel_dp_version }}
      changed_when: true
      loop:
        - intel-sgx-initcontainer
        - intel-sgx-plugin
      when: sgx_dp_build_image_locally

- name: Prepare and deploy Intel SGX Device Plugin
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
  block:
    - name: Set values
      set_fact:
        intel_sgx_dp_image: "{{ registry_local_address }}/intel-sgx-plugin:{{ intel_dp_version }}"
        intel_sgx_dp_init_image: "{{ registry_local_address }}/intel-sgx-initcontainer:{{ intel_dp_version }}"
      when: sgx_dp_build_image_locally

    - name: Populate Intel SGX Plugin yaml file and push to controller node
      template:
        src: "intel-sgx-plugin.yml.j2"
        dest: "{{ (intel_dp_templates_dir, 'intel-sgx-plugin.yml') | path_join }}"
        force: yes
        mode: preserve

    - name: Deploy Intel SGX Device Plugin with the Intel Device Plugin Operator
      k8s:
        state: present
        src: "{{ (intel_dp_templates_dir, 'intel-sgx-plugin.yml') | path_join  }}"

    - name: Wait for Intel SGX Device Plugin
      kubernetes.core.k8s_info:
        kind: SgxDevicePlugin
        name: intel-sgx-device-plugin
      retries: 24
      delay: 10
      register: sgx_plugin_info
      until: |
        sgx_plugin_info.resources is defined and
        sgx_plugin_info.resources | length != 0 and
        (sgx_plugin_info.resources[0].status.numberReady | int) == (sgx_plugin_info.resources[0].status.desiredNumberScheduled | int)

- name: Build Intel sgx-aesmd demo image Docker engine
  when:
    - sgx_aesmd_demo_enable | default(false) | bool
    - inventory_hostname == groups['kube_node'][0]
    - container_runtime == "docker"
  block:
    - name: Build Intel sgx-aesmd image
      make:
        target: sgx-aesmd-demo
        chdir: "{{ intel_dp_dir }}"
      retries: 5
      delay: 10
      register: build_aesmd
      until: build_aesmd is not failed

    - name: Tag Intel sgx-aesmd image
      command: docker tag intel/sgx-aesmd-demo:{{ intel_dp_version }} {{ registry_local_address }}/intel-sgx-aesmd-demo:{{ intel_dp_version }}
      changed_when: true

    - name: Push Intel sgx-aesmd image to local registry
      command: docker push {{ registry_local_address }}/intel-sgx-aesmd-demo:{{ intel_dp_version }}
      changed_when: true

- name: Build Intel sgx-aesmd demo image non-Docker engine
  when:
    - sgx_aesmd_demo_enable | default(false) | bool
    - inventory_hostname == groups['kube_node'][0]
    - '"docker" not in container_runtime'
  block:
    - name: Build and tag Intel sgx-aesmd image
      command: podman build -f demo/sgx-aesmd-demo/Dockerfile -t {{ registry_local_address }}/intel-sgx-aesmd-demo:{{ intel_dp_version }}
      args:
        chdir: "{{ intel_dp_dir }}"
      changed_when: true

    - name: Push Intel sgx-aesmd image to local registry
      command: podman push {{ registry_local_address }}/intel-sgx-aesmd-demo:{{ intel_dp_version }}
      changed_when: true

- name: Prepare and deploy Intel SGX aesmd demo
  when:
    - sgx_aesmd_demo_enable | default(false) | bool
    - inventory_hostname == groups['kube_control_plane'][0]
  block:
    - name: Create Helm charts directory if needed
      file:
        path: "{{ (project_root_dir, 'charts') | path_join }}"
        state: directory
        mode: 0755

    - name: Populate Intel SGX aesmd Helm chart values template and push to controller node
      template:
        src: "intel-sgx-aesmd-demo-values.yml.j2"
        dest: "{{ (project_root_dir, 'charts', 'intel-sgx-aesmd-demo-values.yml') | path_join }}"
        force: yes
        mode: preserve

    - name: Copy Helm chart to the controller node
      copy:
        src: "{{ (role_path, 'charts', 'intel-sgx-aesmd') | path_join }}"
        dest: "{{ (project_root_dir, 'charts') | path_join }}"
        mode: 0755

    - name: Install Intel SGX aesmd Helm chart
      command: >-
        helm upgrade -i intel-sgx-aesmd
        -f {{ (project_root_dir, 'charts', 'intel-sgx-aesmd-demo-values.yml') | path_join }}
        --namespace {{ sgx_aesmd_namespace }}
        --create-namespace
        {{ (project_root_dir, 'charts', 'intel-sgx-aesmd') | path_join }}
      changed_when: true

    - name: Wait for SGX aesmd DaemonSet
      kubernetes.core.k8s_info:
        kind: DaemonSet
        name: intel-sgx-aesmd-demo
        namespace: "{{ sgx_aesmd_namespace }}"
      register: sgx_aesmd_info
      retries: 6
      delay: 10
      until: |
        sgx_aesmd_info.resources is defined and
        sgx_aesmd_info.resources | length != 0 and
        (sgx_aesmd_info.resources[0].status.numberReady | int) == (sgx_aesmd_info.resources[0].status.desiredNumberScheduled | int)
