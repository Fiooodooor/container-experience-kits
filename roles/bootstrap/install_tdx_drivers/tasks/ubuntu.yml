##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: install dependencies for Intel tdx
  ansible.builtin.include_role:
    name: install_dependencies

# Intel tdx driver compilation and installation
- name: create folder for tdx packages
  ansible.builtin.file:
    path: "{{ intel_tdx_packages_dir }}"
    state: directory
    mode: 0755

- name: set the tdx(1.5) tag and kernel version by default
  ansible.builtin.set_fact:
    intel_tdx_tag: "{{ tdx_1_5_tag }}"
    tdx_kernel_version: "{{ tdx_1_5_kernel_version }}"

# override the fact for tdx 1.0
- name: overwrite the tag and kernel version for tdx 1.0
  ansible.builtin.set_fact:
    intel_tdx_tag: "{{ tdx_1_0_tag }}"
    tdx_kernel_version: "{{ tdx_1_0_kernel_version }}"
  when:
    tdx_version == "1.0"

- name: block to compile Intel TDX drvier
  block:
    - name: download Intel TDX source code
      ansible.builtin.git:
        repo: "{{ intel_tdx_repo_url }}"
        dest: "{{ intel_tdx_download_dir }}"
        version: "{{ intel_tdx_tag }}"
        force: true

    - name: block to fix the compilation error for tdx 1.5
      block:
        - name: fix the tdx migration module compilation error
          ansible.builtin.lineinfile:
            path: "{{ (intel_tdx_download_dir, 'build', 'ubuntu-22.04', 'intel-mvp-tdx-migration', 'build.sh') | path_join }}"
            insertafter: "    ./sh_script/preparation.sh"
            line: "    cp ./Cargo.lock ./deps/td-shim/"
        - name: fix the tdx vtpm module compilation error
          ansible.builtin.lineinfile:
            path: "{{ (intel_tdx_download_dir, 'build', 'ubuntu-22.04', 'intel-mvp-vtpm-td', 'build.sh') | path_join }}"
            insertafter: "    source sh_script/pre-build.sh"
            line: "    cp ../../intel-mvp-tdx-migration/migtd/Cargo.lock ./deps/td-shim/"
      when:
        - tdx_version == "1.5"

    - name: cleanup the already built libraries and packages
      ansible.builtin.command: >-
        ./build-repo.sh cleanup
      args:
        chdir: "{{ (intel_tdx_download_dir, 'build', 'ubuntu-22.04') | path_join }}"
      changed_when: true

    - name: compile the tdx source code
      ansible.builtin.command: >-
        ./build-repo.sh > /dev/null
      args:
        chdir: "{{ (intel_tdx_download_dir, 'build', 'ubuntu-22.04') | path_join }}"
      changed_when: true

- name: copy the comiled host/guest packages to {{ intel_tdx_packages_dir }}
  block:
    - name: copy host packages
      ansible.builtin.copy:
        src: "{{ (intel_tdx_download_dir, 'build', 'ubuntu-22.04', 'host_repo') | path_join }}"
        dest: "{{ intel_tdx_packages_dir }}"
        remote_src: yes
        mode: '0644'

    - name: sync guest packages
      ansible.builtin.copy:
        src: "{{ (intel_tdx_download_dir, 'build', 'ubuntu-22.04', 'guest_repo') | path_join }}"
        dest: "{{ intel_tdx_packages_dir }}"
        remote_src: yes
        mode: '0644'

- name: install the host packages
  # npm do not use the apt module due to it can not resolve the dependencies for multiple packages
  # noqa command-instead-of-module
  ansible.builtin.shell: apt-get install -y --allow-downgrades ./*.deb
  args:
    chdir: "{{ (intel_tdx_packages_dir, 'host_repo') | path_join }}"
  changed_when: true

- name: set tdx kernel as default kernel
  block:
    - name: fetch tdx kernel first entry
      ansible.builtin.shell: >-
        set -o pipefail && cat /boot/grub/grub.cfg | grep submenu | awk -F\' '{print $2}'
      args:
        executable: /bin/bash
      register: kernel_fisrt_entry
      failed_when: kernel_fisrt_entry.rc > 1
      changed_when: false

    - name: fetch tdx kernel second entry
      ansible.builtin.shell: >-
        set -o pipefail && cat /boot/grub/grub.cfg | grep menuentry | grep {{ tdx_kernel_version }} | grep -v recovery | awk -F\' '{print $2}'
      args:
        executable: /bin/bash
      register: kernel_second_entry
      failed_when: kernel_second_entry.rc > 1
      changed_when: false

    - name: Set tdx kernel(2-level entries) as default boot kernel
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: "^GRUB_DEFAULT"
        line: GRUB_DEFAULT="{{ kernel_fisrt_entry.stdout }}>{{ kernel_second_entry.stdout }}"
      when: kernel_fisrt_entry.stdout != ""

    - name: Set tdx kernel(1-level entry) as default boot kernel
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: "^GRUB_DEFAULT"
        line: GRUB_DEFAULT="{{ kernel_second_entry.stdout }}"
      when: kernel_fisrt_entry.stdout == ""
