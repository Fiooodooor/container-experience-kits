##
##   Copyright (c) 2020-2021 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: check if firewall service is enabled on the target server
# noqa 303 - systemctl is called intentionally here
  command: systemctl is-enabled {{ firewall_svc[ansible_distribution] }}
  register: fw_service_enabled
  failed_when: fw_service_enabled.rc not in [0, 1]
  become: yes
  vars:
    firewall_svc:
      CentOS: firewalld
      RedHat: firewalld
      Ubuntu: ufw
  changed_when: false

- name: register firewall service status
  set_fact:
    fw_enabled: "{{ fw_service_enabled.rc == 0 | default(false) | bool }}"

- name: ensure that firewall is running if the service is enabled
  systemd:
    name: "{{ firewall_svc[ansible_distribution] }}"
    state: started
  vars:
    firewall_svc:
      CentOS: firewalld
      RedHat: firewalld
      Ubuntu: ufw
  when:
    - fw_enabled
  become: yes

- name: open required ports in the firewall configuration on the controller
  command: firewall-cmd --zone=public --add-port={{ item | regex_replace(':', '-') }} --permanent
  with_items: "{{ fw_open_ports['controller'] }}"
  become: yes
  when:
    - ansible_distribution in ["CentOS", "RedHat"]
    - inventory_hostname in groups['kube-master']
    - fw_enabled

- name: open required ports in the firewall configuration on the node
  command: firewall-cmd --zone=public --add-port={{ item | regex_replace(':', '-') }} --permanent
  with_items: "{{ fw_open_ports['node'] }}"
  become: yes
  when:
    - ansible_distribution in ["CentOS", "RedHat"]
    - inventory_hostname in groups['kube-node']
    - fw_enabled

- name: add Kubernetes pods and services subnets to the "trusted" zone in firewalld
  command: firewall-cmd --zone=trusted --permanent --add-source={{ item }}
  with_items: "{{ fw_open_subnets }}"
  when:
    - ansible_distribution in ["CentOS", "RedHat"]
    - fw_enabled

- name: apply firewall configuration
  command: firewall-cmd --reload
  become: yes
  when:
    - ansible_distribution in ["CentOS", "RedHat"]
    - fw_enabled

- name: open required ports in the firewall configuration on the controller nodes
  command: ufw allow {{ item }}
  with_items: "{{ fw_open_ports['controller'] }}"
  become: yes
  when:
    - ansible_distribution == "Ubuntu"
    - inventory_hostname in groups['kube-master']
    - fw_enabled

- name: open required ports in the firewall configuration on the worker nodes
  command: ufw allow {{ item }}
  with_items: "{{ fw_open_ports['node'] }}"
  become: yes
  when:
    - ansible_distribution == "Ubuntu"
    - inventory_hostname in groups['kube-node']
    - fw_enabled

- name: allow traffic from Kubernetes subnets
  command: ufw allow from {{ item }}
  become: yes
  with_items: "{{ fw_open_subnets }}"
  when:
    - ansible_distribution == "Ubuntu"
    - fw_enabled

- name: enable ufw
  ufw:
    state: enabled
  become: yes
  when:
    - ansible_distribution == "Ubuntu"
    - fw_enabled

# fix for file size limit bug on RHEL-based distros, please see https://access.redhat.com/solutions/33993
- name: fix file size limit settings bug
  shell: sed -i -r 's/^(session\s+required\s+pam_limits.so)/#\1/' /etc/pam.d/* # noqa 303
  when: ansible_os_family == "RedHat"

- name: increase file size limit settings
  blockinfile:
    dest: /etc/security/limits.conf
    marker: ""
    block: |2
      root soft fsize unlimited
      root hard fsize unlimited
      root soft nofile unlimited
      root hard nofile unlimited

- name: register selinux status
  set_fact:
    selinux_mode: "{{ ansible_selinux.status }}"
  when:
    - ansible_os_family == "RedHat"
    - ansible_selinux is defined and ansible_selinux.status == 'disabled'
    - selinux_mode is not defined

- name: register selinux mode
  set_fact:
    selinux_mode: "{{ ansible_selinux.mode }}"
  when:
    - ansible_os_family == "RedHat"
    - ansible_selinux is defined and ansible_selinux.status == 'enabled'
    - selinux_mode is not defined

- name: set selinux policy and state
  selinux:
    policy: "{{ selinux_policy | default(ansible_selinux.type) }}"
    state: "{{ selinux_mode }}"
  when:
    - ansible_os_family == "RedHat"
    - ansible_selinux is defined and ansible_selinux.status == 'enabled'

# set SELINUX to disabled when container_runtime is docker
- name: check SELINUX status in RHEL >= 8.4 when container_runtime is docker
  command: getenforce
  register: selinux_status
  changed_when: true
  when:
    - ansible_distribution == "RedHat" and ansible_distribution_version >= '8.4'
    - container_runtime == "docker"

- name: set SELINUX=disabled in RHEL >= 8.4 when container_runtime is docker
  lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: SELINUX=disabled
    mode: 0644
  become: yes
  notify: reboot server
  when:
    - ansible_distribution == "RedHat" and ansible_distribution_version >= '8.4'
    - container_runtime == "docker"
    - '"Disabled" not in selinux_status.stdout'

- debug:
    var: selinux_status.stdout
  when:
    - ansible_distribution == "RedHat" and ansible_distribution_version >= '8.4'
    - container_runtime == "docker"
    - '"Disabled" in selinux_status.stdout'