#!/bin/bash
#
# Copyright (c) 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

DEVBIND_TOOL=${DEVBIND_TOOL:-"/usr/local/bin/dpdk-devbind.py"}
QAT_SRIOV_NUMVFS_MAPPINGS=${QAT_SRIOV_NUMVFS_MAPPINGS:-"/etc/cek/cek_sriov_qat_numvfs"}
QAT_DEVICE_DRIVER_MAPPINGS=${QAT_DEVICE_DRIVER_MAPPINGS:-"/etc/cek/cek_qat_vfs"}
QAT_FORCE_DRIVER_BINDING=${QAT_FORCE_DRIVER_BINDING:-"/etc/cek/cek_force_qat_driver_binding"}
DO_DRIVER_BINDING=""
WA_PREVIOUS_QAT_ID=""

setup_vfs() {
    echo "Setting up VFs"
    if [[ ! -r "${QAT_SRIOV_NUMVFS_MAPPINGS}" ]]; then
        echo "File ${QAT_SRIOV_NUMVFS_MAPPINGS} doesn't exist, no VFs will be created"
        return 0
    fi

    while read -r pci_address numvfs; do
        if [[ ${pci_address} == "" ]] || [[ ${numvfs} == "" ]]; then
            echo "Empty PCI address or number of VFs, skipping..."
            continue
        fi

        numvfs_path="/sys/bus/pci/devices/${pci_address}/sriov_numvfs"
        if [[ ! -e "${numvfs_path}" ]]; then
            echo "Could not find sriov_numvfs for device ${pci_address}, skipping..."
            continue
        fi

        read -r current_vfs < "${numvfs_path}"

        total_numvfs_path="/sys/bus/pci/devices/${pci_address}/sriov_totalvfs"
        if [[ ! -e "${total_numvfs_path}" ]]; then
            echo "Could not find sriov_totalvfs for device ${pci_address}, skipping..."
            continue
        fi

        read -r total_vfs < "${total_numvfs_path}"

        echo "Setting up ${numvfs} Virtual Functions on ${pci_address}"
        if [[ ${current_vfs} -ne ${numvfs} ]]; then
            if [[ ${current_vfs} -ne ${total_vfs} ]] || [[ ${numvfs} -eq 0 ]] || [[ "${WA_PREVIOUS_QAT_ID}" == "${pci_address}" ]]; then
                # if change is needed we must reset it first
                echo 0 > "${numvfs_path}"
                echo "${numvfs}" > "${numvfs_path}"
                if [[ "${WA_PREVIOUS_QAT_ID}" != "${pci_address}" ]]; then
                    DO_DRIVER_BINDING="${DO_DRIVER_BINDING} ${pci_address}"
                fi
                if [[  ${current_vfs} -eq 0 ]] && [[ "${WA_PREVIOUS_QAT_ID}" == "" ]]; then
                    WA_PREVIOUS_QAT_ID=${pci_address}
                    echo "pci_address stored for WA check: ${WA_PREVIOUS_QAT_ID}"
                fi
            else
                echo "There is max number ${total_vfs} of Virtual Functions on ${pci_address} available. Do nothing."
            fi
        else
            echo "${numvfs} Virtual Functions are already present on ${pci_address} Do nothing."
        fi

    done < "${QAT_SRIOV_NUMVFS_MAPPINGS}"
}

bind_all() {
    if [[ -r "${QAT_FORCE_DRIVER_BINDING}" ]]; then
        echo "Force QAT driver binding"
        while read -r pci_address; do
            DO_DRIVER_BINDING="${DO_DRIVER_BINDING} ${pci_address}"
        done < "${QAT_FORCE_DRIVER_BINDING}"
        rm -f ${QAT_FORCE_DRIVER_BINDING}
    fi

    for physfn in ${DO_DRIVER_BINDING}; do
        echo "Driver binding to VFs from PF ${physfn}"
        if [[ ! -r "${QAT_DEVICE_DRIVER_MAPPINGS}_${physfn}" ]]; then
            echo "File ${QAT_DEVICE_DRIVER_MAPPINGS}_${physfn} doesn't exist, driver bindings won't be changed"
            return 0
        fi

        while read -r pci_address driver; do
            if [[ ${pci_address} == "" ]] || [[ ${driver} == "" ]]; then
                echo "Empty PCI address or driver, skipping..."
                continue
            fi

            echo "Binding ${pci_address} to ${driver}"

            device_path="/sys/bus/pci/devices/${pci_address}"

            # skip if device doesn't exist
            if [[ ! -e "${device_path}" ]]; then
                echo "Could not find device ${pci_address}, skipping..."
                continue
            fi

            # get current driver
            if [[ -L "${device_path}/driver" ]]; then
                current_driver=$(readlink "${device_path}/driver")
                current_driver=$(basename "$current_driver")
                echo "Current driver of ${pci_address} is ${current_driver}"
            else
                current_driver=""
            fi

            # don't bind if not needed
            if [[ "${driver}" != "${current_driver}" ]]; then
                modprobe -q "${driver}" || true
                if [[ -e "/sys/bus/pci/drivers/${driver}" ]]; then
                    $DEVBIND_TOOL -b "${driver}" --force "${pci_address}"
                else
                    echo "Failed to bind ${pci_address}: target driver ${driver} doesn't exist"
                fi
            fi

        done < "${QAT_DEVICE_DRIVER_MAPPINGS}_${physfn}"
    done
}

setup_vfs
bind_all
