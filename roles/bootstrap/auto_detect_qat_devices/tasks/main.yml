##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: user configured qat_devices
  ansible.builtin.debug: var=qat_devices

- name: initializing new qat_devices list
  ansible.builtin.set_fact:
    new_qat_devices: []

- name: get supported QAT PF devices
  ansible.builtin.shell:
    cmd: "set -o pipefail && lspci -nnm | grep -i Co-processor | egrep -i '{{ qat_supported_pf_dev_ids | join('|') }}'"
    executable: /bin/bash
  register: qat_pci_pf_devices
  changed_when: false
  failed_when: qat_pci_pf_devices.rc not in [0, 1]
  when: not on_vms | default(false)

- name: get supported QAT VF devices
  ansible.builtin.shell:
    cmd: "set -o pipefail && lspci -nnm | grep -i Co-processor | egrep -i '{{ qat_supported_vf_dev_ids | join('|') }}'"
    executable: /bin/bash
  register: qat_pci_vf_devices
  changed_when: false
  failed_when: qat_pci_vf_devices.rc not in [0, 1]
  when: on_vms | default(false)

- name: get QAT device bus IDs
  ansible.builtin.set_fact:
    qat_pci_devices: "{{ ['0000:'] |
      product((qat_pci_vf_devices.stdout_lines if (on_vms | default(false)) else qat_pci_pf_devices.stdout_lines) |
      map('split') | map('first'))| map('join') | list }}"

- name: read sriov_totalvfs for each QAT PF
  ansible.builtin.slurp:
    src: "{{ ('/sys/bus/pci/devices', item, 'sriov_totalvfs') | path_join }}"
  with_items: "{{ qat_pci_devices }}"
  register: qat_dev_sriov_total_vfs_reg
  when: not on_vms | default(false)

- name: get QAT device max SRIOV VFs
  ansible.builtin.set_fact:
    qat_device_sriov_total_vfs: "{{ qat_device_sriov_total_vfs | d({}) | combine({ item.item: (item.content | b64decode | trim) }) }}"
  with_items: "{{ qat_dev_sriov_total_vfs_reg.results }}"
  when: not on_vms | default(false)

- name: get QAT device uevent information
  ansible.builtin.slurp:
    src: "{{ ('/sys/bus/pci/devices', item, 'uevent') | path_join }}"
  with_items: "{{ qat_pci_devices }}"
  register: qat_dev_uevent_reg
  when: not on_vms | default(false)

- name: create new_qat_devices list
  ansible.builtin.set_fact:
    new_qat_devices: |-
      [
      {% for uevent, total_vfs in qat_dev_uevent_reg.results | zip(qat_dev_sriov_total_vfs_reg.results) %}
        {
          "qat_id": "{{ uevent.item }}",
          "qat_sriov_numvfs": {{ total_vfs.content | b64decode | trim }},
          "qat_default_vf_driver": "{{ uevent.content | b64decode | regex_search('DRIVER=(.+)', '\1') | default([qat_vf_driver_required[:-2]]) | first }}vf",
          "qat_vfs": {}
        },
      {% endfor %}
      ]
  changed_when: true
  when: not on_vms | default(false)

- name: create new_qat_devices list for VMs
  ansible.builtin.set_fact:
    new_qat_devices: |-
      [
      {% for item in qat_pci_devices %}
        {
          "qat_id": "{{ item }}",
          "qat_sriov_numvfs": 0
        },
      {% endfor %}
      ]
  changed_when: true
  when: on_vms | default(false)

- name: replace original qat_devices
  ansible.builtin.set_fact:
    qat_devices: "{{ new_qat_devices }}"

- name: print new qat_devices
  ansible.builtin.debug:
    var: qat_devices
