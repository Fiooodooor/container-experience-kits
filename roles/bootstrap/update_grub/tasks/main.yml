##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: update grub.cfg
  command: update-grub
  when:
    - ansible_os_family == "Debian"

- name: block for Rocky / RHEL < 9.0
  block:
    - name: check if grub2.cfg config file exists (MBR variant)
      stat:
        path: /etc/grub2.cfg
      register: grub_mbr_cfg

    - name: update MBR grub2.cfg
      command: grub2-mkconfig -o /etc/grub2.cfg
      when: grub_mbr_cfg.stat.exists

    - name: check if grub2-efi.cfg config file exists (EFI variant)
      stat:
        path: /etc/grub2-efi.cfg
      register: grub_efi_cfg

    - name: update MBR grub2-efi.cfg on Rocky / RHEL < 9.0
      command: "grub2-mkconfig -o /etc/grub2-efi.cfg"
      when: grub_efi_cfg.stat.exists
      changed_when: true
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_version < "9.0"

- name: block for Rocky/RHEL 9.0 or greater
  block:
    - name: check if grub.cfg config file exists (Rocky / RHEL >= 9.0)
      stat:
        path: "/boot/efi/EFI/{{ ansible_distribution | lower }}/grub.cfg"
      register: grub_rhel_rocky_cfg

    - name: update MBR grub.cfg on (Rocky / RHEL >= 9.0)
      command: "grub2-mkconfig -o /boot/efi/EFI/{{ ansible_distribution | lower }}/grub.cfg"
      when: grub_rhel_rocky_cfg.stat.exists
      changed_when: true
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_version >= "9.0"

- name: create empty machine_id list from the worker nodes
  set_fact:
    machine_id_list: []

- name: collect machine_id list for the worker nodes
  set_fact:
    machine_id_list: "{{ machine_id_list | default([]) + [hostvars[item]['ansible_machine_id'] | default([])] }}"
  with_items:
    - "{{ groups['kube_node'] }}"

- block:
    - name: detect that machine-id duplicates over multiple nodes
      debug:
        msg: "Detected there are /etc/machine-id duplicates {{ machine_id_list }}, will generate a new machine-id for groups['kube_node'] nodes"

    - name: remove /etc/machine-id
      file:
        state: absent
        path: /etc/machine-id
        force: yes

    - name: create new /etc/machine-id (debian)
      command: dbus-uuidgen --ensure=/etc/machine-id
      changed_when: true
      when:
        - ansible_os_family == "Debian"

    - name: create new /etc/machine-id (redhat)
      command: systemd-machine-id-setup
      changed_when: true
      when:
        - ansible_os_family == "RedHat"
  when: ( machine_id_list | unique | length < groups['kube_node'] | length )
