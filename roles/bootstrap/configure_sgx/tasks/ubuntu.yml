##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: install dependencies
  include_role:
    name: install_dependencies

- name: create configuration directory if it does not exist
  file:
    path: "{{ sgx_config_dir }}"
    state: directory
    mode: 0700
  become: yes

- name: add {{ sgx_apt_source_list }} repo key
  apt_key:
    url: "{{ sgx_apt_repo_key }}"

- name: set sgx release name
  set_fact:
    sgx_release_name: "{{ ansible_distribution_release }}"

- name: add sgx apt repository
  apt_repository:
    repo: "deb {{ sgx_apt_repo_url }} {{ sgx_release_name }} main"
    filename: "{{ sgx_apt_source_list }}"

- name: install sgx platform sw
  apt:
    name:
      - libsgx-launch={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-epid={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-urts={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-quote-ex={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-enclave-common={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-uae-service={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - sgx-aesm-service={{ sgx_pkg_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-ql={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-ae-qe3={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-ae-qve={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-qe3-logic={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-pce-logic={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-ql-dev={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-default-qpl={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-default-qpl-dev={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-quote-verify={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-dcap-quote-verify-dev={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-ra-network={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - libsgx-ra-uefi={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1
      - sgx-ra-service={{ sgx_pkg_dcap_version }}-{{ sgx_release_name }}1

- name: start aesmd service, if not started
  service:
    state: started
    name: aesmd

- name: download sgx sdk
  get_url:
    url: "{{ sgx_sdk_url_ubuntu }}"
    dest: "{{ sgx_config_dir }}"
    mode: 0755
    checksum: "{{ sgx_sdk_checksum_ubuntu }}"
  register: get_url_results
  retries: "{{ number_of_retries | default(5) }}"
  until: get_url_results is success
  delay: "{{ retry_delay | default(3) }}"

- name: install sgx sdk
  shell: "set -o pipefail && echo 'yes' | ./{{ sgx_sdk_version_ubuntu }}"
  args:
    chdir: "{{ sgx_config_dir }}"
    executable: /bin/bash
  register: sdk_output
  failed_when: '"Installation is successful!" not in sdk_output.stdout'
  changed_when: '"Installation is successful!" in sdk_output.stdout'

- name: setup environment & make code samples in hardware mode to ensure package works well
  shell: >
    source {{ sgx_config_dir }}/sgxsdk/environment &&
    make
  args:
    chdir: "{{ sgx_config_dir }}/sgxsdk/SampleCode/LocalAttestation"
    executable: /bin/bash
  register: make_confirm
  failed_when: '"The project has been built in hardware debug mode." not in make_confirm.stdout'
  changed_when: '"The project has been built in hardware debug mode." in make_confirm.stdout'

- name: ensure that sgx driver / psw installed in hardware mode with code samples
  command: ./app
  args:
    chdir: "{{ sgx_config_dir }}/sgxsdk/SampleCode/LocalAttestation/bin"
  register: psw_confirm
  changed_when: '"Succeed" in psw_confirm.stdout'

- debug:
    var: psw_confirm.stdout_lines
  when: '"Succeed" in psw_confirm.stdout'

- name: prepare worker node with sgx enabled
  block:
    - name: ensure sgx_prv group exists
      ansible.builtin.group:
        name: sgx_prv
        state: present

    - name: add user to sgx_prv group
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: sgx_prv
        append: yes

    - name: create udev rules
      ansible.builtin.blockinfile:
        path: /etc/udev/rules.d/10-sgx.rules
        create: yes
        mode: '0644'
        block: |
          SUBSYSTEM=="misc",KERNEL=="enclave",MODE="0666"
          SUBSYSTEM=="misc",KERNEL=="provision",GROUP="sgx_prv",MODE="0660"
          SUBSYSTEM=="sgx",KERNEL=="sgx/enclave",MODE="0666"
          SUBSYSTEM=="sgx",KERNEL=="sgx/provision",MODE="0660"
          SUBSYSTEM=="misc",KERNEL=="sgx_enclave",MODE="0666",SYMLINK+="sgx/enclave"
          SUBSYSTEM=="misc",KERNEL=="sgx_provision",GROUP="sgx_prv",MODE="0660",SYMLINK+="sgx/provision"

    - name: copy configure-sgx-udev.service file
      ansible.builtin.copy:
        src: configure-sgx-udev.service
        dest: /lib/systemd/system/configure-sgx-udev.service
        mode: 0755

    - name: ensure configure-sgx-udev.service started
      ansible.builtin.systemd:
        state: started
        name: configure-sgx-udev
        enabled: true
  when:
    - (ansible_distribution == "Ubuntu" and ansible_distribution_version >= '21.04')
      or (ansible_os_family == "RedHat" and ansible_distribution_version >= '8.4')
