##
##   Copyright (c) 2020-2021 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: install libssl-dev development files in Ubuntu 21.04
  apt:
    deb: "{{ openssl_ubuntu_libssldev_pkg }}"
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version >= '21.04'

- name: install dependencies for OpenSSL
  include_role:
    name: install_dependencies

- name: confirm module before OpenSSL installation
  shell: "set -o pipefail && lsmod | grep qat"
  args:
    chdir: "/usr/src"
    executable: /bin/bash
  register: confirm_mod
  failed_when: '"intel_qat" not in confirm_mod.stdout'
  changed_when: false
  ignore_errors: true

- name: Module not found, playbook terminated
  fail:
     msg: "No QAT module found. Kindly, confirm QAT module on system can also download latest drivers + services as enabling update_qat_drivers: true"
  when: '"intel_qat" not in confirm_mod.stdout'

- debug:
   var: confirm_mod.stdout_lines

# ansible_facts.services is not supported currently on Ubuntu 20.04, once sorted will remove and use ansible service module
- name: check status of service for OpenSSL*Engine
  shell: "set -o pipefail && service qat_service status | grep qat_dev"
  args:
    executable: /bin/bash
  register: service_check
  changed_when: true
  ignore_errors: true

- name: Service not found, playbook terminated
  fail:
     msg: "Failed to start qat_service on system. Kindly, download latest drivers + services this can also be achieved as enabling update_qat_drivers: true"
  when:
    - "'up' not in service_check.stdout"

- name: check if OpenSSL dir exists in CentOS <= 7.9
  stat:
    path: "{{ openssl_centos7_dir }}"
  register: centos7_openssl_stat_result
  when: ansible_distribution == 'CentOS' and ansible_distribution_version <= '7.9'
  changed_when: true

- name: install required packages in CentOS 7.9 before OpenSSL Configuration
  include_tasks: install_req_packages_centos7.yml
  when:
    - ansible_distribution == 'CentOS' and ansible_distribution_version <= '7.9'
    - not centos7_openssl_stat_result.stat.exists

- name: install required packages in CentOS 7.9 before OpenSSL Configuration
  include_tasks: install_openssl_1.1.1_centos7.yml
  when:
    - ansible_distribution == 'CentOS' and ansible_distribution_version <= '7.9'
    - not centos7_openssl_stat_result.stat.exists
# OpenSSL build
- name: create directory {{ openssl_dir }} for all OpenSSL dependencies
  file:
    path: "{{ openssl_dir }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"

- name: clone OpenSSL repository
  git:
    repo: "{{ openssl_url }}"
    version: " {{ openssl_version }}"
    dest: "{{ openssl_dir }}"
    force: yes

- name: check all configuration is present for OpenSSL
  command: './config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib'
  args:
    chdir: "{{ openssl_dir }}"
  register: openssl_config
  changed_when: true
  ignore_errors: true

- name: playbook terminated. Configuration for OpenSSL is missing requirements
  fail:
    msg:
      - "OpenSSL configuration failed. Make sure QAT drivers + services are properly configured as per requirements for OpenSSL*Engine"
  when: '"OpenSSL has been successfully configured" not in openssl_config.stdout'

- debug:
    var: openssl_config.stdout_lines
  when: '"OpenSSL has been successfully configured" in openssl_config.stdout'

- name: make depend once OpenSSL has been successfully configured
  make:
    chdir: "{{ openssl_dir }}"
    target: depend

- name: make install once OpenSSL has been successfully configured
  make:
    chdir: "{{ openssl_dir }}"
    target: install

- name: exporting environment variable for OpenSSL dynamic engines at runtime
  command: /bin/bash -c  "export OPENSSL_ENGINES=/usr/local/ssl/lib/engines-1.1"
  args:
    chdir: "{{ openssl_dir }}"
  register: openssl_config
  changed_when: true

- name: reload the dynamic linker cache
  command: "ldconfig"
  changed_when: true

- name: verify OpenSSL dir after successful configuration
  command: "ls -al"
  args:
    chdir: "/usr/local/ssl"
  register: verify_openssl
  changed_when: true

- debug:
    var: verify_openssl.stdout_lines
