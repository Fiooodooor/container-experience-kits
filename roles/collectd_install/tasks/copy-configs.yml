##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: check if intel-rapl dir exist
  stat: path=/sys/devices/virtual/powercap/intel-rapl
  register: intel_rapl_status

- name: disable pkgpower_plugin if intel-rapl dir is not available
  set_fact:
    enable_pkgpower_plugin: false
  changed_when: true
  when:
    - not intel_rapl_status.stat.exists
    - enable_pkgpower_plugin

- name: disable intel_pmu plugin
  set_fact:
    exclude_collectd_plugins: "{{ exclude_collectd_plugins + [ 'intel_pmu' ] }}"
  when: not enable_intel_pmu_plugin

- name: disable intel_rdt plugin
  set_fact:
    exclude_collectd_plugins: "{{ exclude_collectd_plugins + [ 'rdt' ] }}"
  when: not enable_intel_rdt_plugin

- name: set rdt monitored cores to avoid core dump on ICX
  block:
    - name: get cores number
      shell: "set -o pipefail && cat /proc/cpuinfo | grep processor | wc -l"
      args:
        executable: /bin/bash
      register: cores_number
      changed_when: false

    - name: set intel_rdt_plugin_monitored_cores if using default value
      set_fact:
        intel_rdt_plugin_monitored_cores: "0-{{ cores_number.stdout|int - 1 }}"
  when: enable_intel_rdt_plugin and intel_rdt_plugin_monitored_cores == ""

- name: disable pkgpower plugin
  set_fact:
    exclude_collectd_plugins: "{{ exclude_collectd_plugins + [ 'pkgpower' ] }}"
  when: not enable_pkgpower_plugin

- name: prepare list of plugins to be deployed
  set_fact:
    plugins: "{{ collectd_plugins[profile_name] | flatten | difference(exclude_collectd_plugins) }}"

- name: rename ipmi to 0_ipmi to ensure that ipmi plugin will be loaded first (https://sourceforge.net/p/openipmi/bugs/86/)
  set_fact:
    plugins: "{{ plugins | difference(['ipmi']) + ['0_ipmi']  }}"
  when: "'ipmi' in plugins"

- name: following collectd plugins will be installed
  debug:
    msg: "{{ plugins }}"

- name: delete directory with config files
  file:
    path: "{{ host_collectd_folder }}"
    state: absent

- name: create directory for collect.d configs on workers
  file:
    path: "{{ collectd_configuration_files_dir }}"
    state: directory
    mode: 0755

- name: get PowerPkg file
  get_url:
    url: https://raw.githubusercontent.com/intel/CommsPowerManagement/73bdab6f6e3861f3d86e15e36c363f343a142509/telemetry/pkgpower.py
    dest: "{{ collectd_configuration_files_dir }}/pkgpower.py"
    owner: root
    group: root
    mode: 0755
    checksum: "sha1:4aa175aae132ca0d251d839462d23d971b039713"
  when: "'pkgpower' in plugins"
  register: pkgpower_download
  until: pkgpower_download is not failed
  retries: 5

# Segmentation core dump issues in Ubuntu were previously caused by lshw; blocks will be recommended such as,
# hwinfo for RHEL / ROCKY & lshw for Ubuntu.
# NOTE(skonefal): noqa due to ansible-lint linting bash oneliners.
- name: get network interfaces for ethstat plugin
  shell: set -o pipefail && hwinfo --short --netcard |  awk -F '  ' '{if ($2!="") print $2}' # noqa empty-string-compare
  args:
    executable: /bin/bash
  register: ethstat_interfaces_in_ubuntu
  changed_when: ethstat_interfaces_in_ubuntu is defined
  when:
    - "'ethstat' in plugins"
    - ansible_distribution == "Ubuntu"

# NOTE(skonefal): noqa due to ansible-lint linting bash oneliners.
- name: get network interfaces for ethstat plugin
  shell: set -o pipefail && lshw -c network -businfo | grep "pci@" |  awk -F '  ' '{if ($2!="") print $2}' # noqa empty-string-compare
  args:
    executable: /bin/bash
  register: ethstat_interfaces
  changed_when: ethstat_interfaces is defined
  when:
    - "'ethstat' in plugins"
    - ansible_os_family == "RedHat"

- name: parse network interfaces output for ethstat plugin
  set_fact:
    ethstat_interfaces={{ ethstat_interfaces_in_ubuntu.stdout.split('\n') }}
  when:
    - "'ethstat' in plugins"
    - ansible_distribution == "Ubuntu"

- name: parse network interfaces output for ethstat plugin
  set_fact:
    ethstat_interfaces={{ ethstat_interfaces.stdout.split('\n') }}
  when:
    - "'ethstat' in plugins"
    - ansible_os_family == "RedHat"

- name: template config files
  template:
    src: "plugin_configuration/{{ item }}.conf"
    dest: "{{ collectd_configuration_files_dir }}/{{ item }}.conf"
    mode: 0755
  loop: "{{ plugins }}"

- name: copy ovs_pmd_stats scripts to nodes
  copy:
    src: "{{ item }}"
    dest: "{{ collectd_configuration_files_dir }}/{{ item }}"
    mode: 0755
    owner: root
    group: root
  loop:
    - ovs_pmd_stats.sh
    - write_notification.sh
  when: "'ovs_pmd_stats' in plugins"

- name: populate collectd.conf from template
  template:
    src: "collectd.conf"
    dest: "{{ host_collectd_folder }}/collectd.conf"
    mode: 0644
    owner: root
    group: root
    force: yes

- name: copy ovs_pmd_stats.sh to nodes
  copy:
    src: "ovs_pmd_stats.sh"
    dest: "{{ collectd_configuration_files_dir }}/ovs_pmd_stats.sh"
    mode: 0755
    owner: root
    group: root
  when: "'ovs_pmd_stats' in plugins"

- name: copy custom.types.db to nodes
  copy:
    src: "{{ item }}"
    dest: "{{ collectd_configuration_files_dir }}/{{ item }}"
    mode: 0755
    owner: root
    group: root
  loop:
    - "custom.types.db"
    - "types.conf"
  when: enable_custom_types_db

- name: remove pkgpower directory
  file:
    path: "{{ pkgpower_dir }}"
    state: absent
  when: "'pkgpower' in plugins"
