##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- ansible.builtin.debug:
    msg: "fec_acc pciid is {{ fec_acc | regex_replace('^ip-', '') }}"

# Configure PF for HOST
- name: set FEC PF Driver
  set_fact:
    fec_pf_driver: "{{ 'vfio-pci' if (fec_dev == 'acc200' and intel_flexran_type == 'pod') else 'igb_uio' }}"

- name: bind FEC ACC physical device
  ansible.builtin.command: >-
    dpdk-devbind.py -b {{ fec_pf_driver }} {{ fec_acc }}
  register: fec_bind_set
  changed_when: fec_bind_set.rc == 0

- name: show FEC devices binding status
  ansible.builtin.command: >-
    dpdk-devbind.py --status-dev baseband
  register: fec_bind_show
  changed_when: false

- ansible.builtin.debug:
    msg: "{{ fec_bind_show.stdout }}"

# Create and configure VF for POD
- name: set FEC ACC virtual device for FlexRAN in Docker POD
  block:
    - name: set vfs_directory
      set_fact:
        vfs_directory: "{{ 'sriov_numvfs' if fec_dev == 'acc200' else 'max_vfs' }}"

    - name: reset FEC VFs and instate one FEC VF
      ansible.builtin.shell: >-
        echo {{ item }} > {{ ('/sys/bus/pci/devices/', fec_acc, vfs_directory) | path_join }}
      args:
        executable: /bin/bash
      register: set_fec_vfs
      changed_when: set_fec_vfs.rc == 0
      failed_when: set_fec_vfs.rc != 0
      with_items:
        - 0
        - 1

    - name: probe for FEC VF
      ansible.builtin.shell: >-
        set -o pipefail && lspci | grep -i acc | grep -i -e 0d5d -e 57c1
      args:
        executable: /bin/bash
      register: acc_vf_probe
      changed_when: false
      failed_when: acc_vf_probe.rc != 0

    - ansible.builtin.debug:
        msg: "{{ acc_vf_probe.stdout }}"

    - ansible.builtin.set_fact:
        fec_acc_vf: "{{ acc_vf_probe.stdout.split(' ').0 }}"

    - ansible.builtin.debug:
        msg: "fec_acc_vf is at {{ fec_acc_vf }}"

    - name: bind FEC ACC VF device
      ansible.builtin.shell: >-
        dpdk-devbind.py -b vfio-pci {{ fec_acc_vf }} && dpdk-devbind.py --status-dev baseband
      args:
        executable: /bin/bash
      register: fec_bind
      changed_when: fec_bind.rc == 0
      failed_when: fec_bind.rc != 0

    - ansible.builtin.debug:
        msg: "{{ fec_bind.stdout }}"

  when: intel_flexran_type == "pod"

- name: clean up existing FEC info
  ansible.builtin.file:
    path: "{{ fec_info_path }}/cek_fec_info"
    state: absent
  become: yes
  when:
    - not (intel_sriov_fec_operator_enabled | default(false) | bool)

- name: save FEC info
  ansible.builtin.lineinfile:
    path: "{{ fec_info_path }}/cek_fec_info"
    line: "{{ fec_acc }} {{ fec_dev }} {{ fec_pf_driver }} {{ '1' if intel_flexran_type == 'pod' else '0' }}"
    regexp: "^{{ fec_acc }}"
    create: yes
    owner: root
    group: root
    mode: '0600'
  become: yes
  when:
    - not (intel_sriov_fec_operator_enabled | default(false) | bool)
