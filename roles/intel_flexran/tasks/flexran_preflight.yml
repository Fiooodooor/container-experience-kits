##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
#  - name: load FlexRAN vars
#    include_vars: "../roles/intel_flexran/defaults/main.yml"

- name: verify gNB (BBU) node
  block: # only on gNB (node)
    # check target for FlexRAN
    - debug: msg="Cluster nodes are '{{ groups['kube_node'] }}'"
    - name: check target for FlexRAN
      assert:
        that: groups['kube_node'] | length == 1
        msg: "Intel FlexRAN deployment is supported on a sigle node only. Please correct the number of nodes in inventor file"

    # check mode for FlexRAN
    - debug: msg="Intel FlexRAN mode is set to '{{ intel_flexran_mode }}'"
    - name: check mode for FlexRAN
      assert:
        that: intel_flexran_mode in ['timer', 'xran']
        msg: "Intel FlexRAN mode must be either 'timer' or 'xran'. Please correct the intel_flexran_mode value in roles\\intel_flexran\\defaults\\main.yml"

    # check FEC acc for FlexRAN
    - name: check acc h/w
      assert:
        that: fec_acc is defined # and PCIID is present in the host and its DevID in supported list
        success_msg: "Assertion passed. The FEC Accelerator Device is defined as '{{ fec_acc }}'"
        fail_msg: "Intel FlexRAN requires the FEC Accelerator Device variable 'fec_acc' to be defined. Please correct the host h/w configuration"

    - name: check FEC Acc devices on worker node
      shell: "set -o pipefail && lspci | grep -i acc"
      args:
        executable: /bin/bash
      register: intel_flexran_fec_devs
      changed_when: false
      failed_when: intel_flexran_fec_devs.rc != 0

    - debug: msg="lspci probing returned '{{ intel_flexran_fec_devs.stdout }}'"

    # check oRU for FlexRAN
    - name: check oRU for FlexRAN
      assert:
        that: groups['oru'][0] is defined | default(false) | bool
        success_msg: "Assertion passed. Intel FlexRAN on bare-metal host in xRAN test mode has {{ groups['oru'][0] }} as oRU target defined in inventory file"
        fail_msg: "Intel FlexRAN on bare-metal host in xRAN test mode requires an oRU target defined in inventory. Please add 'oru' group in the inventory file"
      when: intel_flexran_mode == 'xran'

    # check network for FlexRAN
    - debug: msg="BBU_FH={{ intel_flexran_bbu_front_haul }} BBU_PS={{ intel_flexran_bbu_ptp_sync }} oRU_FH={{ intel_flexran_oru_front_haul }} oRU_PS={{ intel_flexran_oru_ptp_sync }}" # noqa yaml[line-length]
    - name: check network for FlexRAN
      assert:
        that: "intel_flexran_bbu_front_haul is defined and intel_flexran_bbu_ptp_sync is defined and intel_flexran_oru_front_haul is defined and intel_flexran_oru_ptp_sync is defined" # noqa yaml[line-length]
        msg: "Intel FlexRAN on bare-metal host in xRAN test mode requires defining the network devices for 'Front Haul' and 'PTP Sync'. See docs/flexran_guide.md"
      when: intel_flexran_mode == 'xran'

    # check NIC for FlexRAN
    - name: read Physical NICs PCIIDs
      set_fact:
        phy_nics_pciids: "{{ phy_nics_pciids + [ ansible_facts[item]['pciid'] ] }}"
      with_items: "{{ ansible_interfaces }}"
      when: ansible_facts[item]['pciid'] is defined and ansible_facts[item]['type'] == "ether"

    - debug:
        msg:
          - "PCI Slots for the NICs on target '{{ ansible_hostname }}' = {{ phy_nics_pciids }}"
          - "Network interfaces present on target '{{ ansible_hostname }}' = {{ ansible_interfaces }}"
          - "Dataplane (DP) interface(s) defined in host_vars are {{ dataplane_interfaces }}"

    - name: check DP Interfaces
      ansible.builtin.assert:
        that: "{{ dataplane_interfaces | length }} >= 2"
        fail_msg: "For FlexRAN xRAN test mode, at least TWO dataplane (DP) interface(s) on target '{{ ansible_hostname }}' must be set in host_vars. Please correct the configuration" # noqa yaml[line-length]
        success_msg: "Assertion passed. Two (or more) dataplane (DP) interface(s) are configured."
      when: intel_flexran_mode == 'xran'

    # {{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }} | grep driver | sed 's/^driver: //'"

    # check CPU for FlexRAN
    - debug: msg="CPU={{ ansible_processor[2] }} cores={{ ansible_processor_cores }} count={{ ansible_processor_count }} nproc={{ ansible_processor_nproc }} tpc={{ ansible_processor_threads_per_core }} vcpus={{ ansible_processor_vcpus }}" # noqa yaml[line-length]
    - name: check CPU for FlexRAN
      assert:
        that: >
          (ansible_processor_count == 1 and ansible_processor_cores in [16, 20, 32]) or
          (ansible_processor_count == 2 and ansible_processor_cores in [32, 52, 56])
        fail_msg: "Intel FlexRAN on bare-metal host may proceed on target with {{ cpu_id }} CPU, but is unsupported!"
        success_msg: "Assertion passed. Intel FlexRAN on bare-metal host is supported and can be deployed on target with {{ cpu_id }} CPU"
      failed_when: false

    # check patch when FlexRAN xx.yy.z
    - name: check FlexRAN PATCH Release
      when: intel_flexran_ver | length > 5
      block:
        - debug: msg="Expecting file {{ (intel_flexran_staging_location, intel_flexran_patch) | path_join }} on local ansible host"

        - name: probe for FlexRAN xx.yy.z patch
          delegate_to: localhost
          become: false
          stat:
            path: "{{ (intel_flexran_staging_location, intel_flexran_patch) | path_join }}"
            checksum_algorithm: sha256
          register: provided_flexran_patch

        - debug: msg="{{ intel_flexran_patch }} exists is {{ provided_flexran_patch.stat.exists }}"

        - name: check the FlexRAN xx.yy.z patch name
          assert:
            that: "provided_flexran_patch.stat.exists"
            msg:
              - Mandatory file {{ (intel_flexran_staging_location, intel_flexran_patch) | path_join }} does NOT exist on localhost.
              - Please acquire the zip file and place it in the location indicated above in order to deploy FlexRAN. See docs/flexran_guide.md

        - debug: msg="{{ intel_flexran_patch }} checksum is {{ provided_flexran_patch.stat.checksum }}"

        - name: check the FlexRAN xx.yy.z patch integrity
          assert:
            that: "provided_flexran_patch.stat.checksum == '{{ intel_flexran_patch_chk }}'"
            msg:
              - File {{ (intel_flexran_staging_location, intel_flexran_patch) | path_join }} on localhost is NOT the expected one.
              - Please provide the correct file. See docs/flexran_guide.md

    # check DPDK patch for FlexRAN
    - debug: msg="Expecting file {{ (dpdk_local_patches_dir, 'dpdk-' + dpdk_version, intel_flexran_dpdk_patch) | path_join }} on local ansible host"

    - name: probe for FlexRAN DPDK patch
      delegate_to: localhost
      become: false
      stat:
        path: "{{ (dpdk_local_patches_dir, 'dpdk-' + dpdk_version, intel_flexran_dpdk_patch) | path_join }}"
        checksum_algorithm: sha256
      register: provided_flexran_dpdk_patch

    - debug: msg="{{ intel_flexran_dpdk_patch }} exists is {{ provided_flexran_dpdk_patch.stat.exists }}"

    - name: check the FlexRAN DPDK patch name
      assert:
        that: "provided_flexran_dpdk_patch.stat.exists"
        msg:
          - Mandatory file {{ (dpdk_local_patches_dir, 'dpdk-' + dpdk_version, intel_flexran_dpdk_patch) | path_join }} does NOT exist on localhost.
          - Please acquire the DPDK patch.zip and unzip it in the location indicated above in order to deploy FlexRAN. See docs/flexran_guide.md

    - debug: msg="{{ intel_flexran_dpdk_patch }} checksum is {{ provided_flexran_dpdk_patch.stat.checksum }}"

    - name: check the FlexRAN DPDK patch integrity
      assert:
        that: "provided_flexran_dpdk_patch.stat.checksum == '{{ intel_flexran_dpdk_patch_chk }}'"
        msg:
          - File {{ (dpdk_local_patches_dir, 'dpdk-' + dpdk_version, intel_flexran_dpdk_patch) | path_join }} on localhost is NOT the expected one.
          - Please provide the correct file. See docs/flexran_guide.md

    # check DPDK for FlexRAN
    - name: check DPDK is enabled for FlexRAN
      assert:
        that: install_dpdk
        msg: "DPDK is required for FlexRAN. Please make sure install_dpdk is true in the node host_vars file and correct DPDK version is set"

    - debug: msg="DPDK version is set to '{{ dpdk_version }}'"

    - name: check DPDK version for FlexRAN
      assert:
        that: dpdk_version == intel_flexran_dpdk_ver
        msg:
          - DPDK version '{{ dpdk_version }}' set in the worker node host_vars file does NOT match the DPDK version required for FlexRAN.
          - Must be '{{ intel_flexran_dpdk_ver }}'

    - name: check intel oneAPI basekit enabled
      assert:
        that:
          - intel_oneapi_enabled | default(false) # basekit must be enabled by default
        fail_msg: >
          Intel oneAPI is not enabled.
          Intel oneAPI must be enabled for FlexRAN.
  when:
    - intel_flexran_enabled | default(false) | bool
    - intel_flexran_type == "host"
    - inventory_hostname == groups['kube_node'][0]

- name: verify gNB (BBU) node and oRU
  block: # repeat for gNB (node) and oRU
    # check o/s for FlexRAN
    - debug: msg="Linux distribution on target is {{ ansible_distribution }} {{ ansible_distribution_version }} ({{ ansible_distribution_release }}) with {{ ansible_kernel }} kernel" # noqa yaml[line-length]
    - name: check linux distro version and kernel for FlexRAN
      assert:
        that: >
          (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04' and 'realtime' in ansible_kernel) or
          (ansible_distribution == 'RedHat' and ansible_distribution_version == '9.2' and 'rt' in ansible_kernel)
        msg:
          - Deploying Intel FlexRAN is supported only on Ubuntu 22.04 or RHEL 9.2 and with real-time kernel.
          - Please prepare accordingly the o/s image on target(s) or disable FlexRAN. See docs/flexran_guide.md

    # check package for FlexRAN
    - debug: msg="Expecting subfolders inside '{{ intel_flexran_dir }}' on target(s) gNR and oRU"

    - name: probe for FlexRAN pre-extraction
      stat:
        path: "{{ item }}"
      register: flexran_dir_stats
      with_items:
        - "{{ (intel_flexran_dir, 'bin') | path_join }}"
        - "{{ (intel_flexran_dir, 'framework') | path_join }}"
        - "{{ (intel_flexran_dir, 'sdk') | path_join }}"
        - "{{ (intel_flexran_dir, 'source') | path_join }}"
        - "{{ (intel_flexran_dir, 'tests') | path_join }}"
        - "{{ (intel_flexran_dir, 'xran') | path_join }}"

    - name: check FlexRAN folders
      assert:
        that: "item.stat.exists and item.stat.isdir"
        msg:
          - Directory '{{ item.item }}' is missing on target '{{ inventory_hostname }}'
          - Deploying Intel FlexRAN requires the tarball package to be pre-extracted on the worker node. See docs/flexran_guide.md
      with_items: "{{ flexran_dir_stats.results }}"

    # check NICs for xRAN mode
    - debug:
        msg: "Network interfaces present on target '{{ ansible_hostname }}' = {{ ansible_interfaces }}"
      when: intel_flexran_mode == 'xran'
#
#  - name: probe NICs PCIIDs
#    set_fact:
#      phy_nics_pciids: "{{ phy_nics_pciids + [ ansible_facts[item]['pciid'] ] }}"
#    with_items: "{{ ansible_interfaces }}"
#    when: ansible_facts[item]['pciid'] is defined and ansible_facts[item]['type'] == "ether"
#
#   - debug: msg="PCI Slots for the NICs on target '{{ ansible_hostname }}' = {{ phy_nics_pciids }}"
  when:
    - intel_flexran_enabled | default(false) | bool
    - intel_flexran_type == "host"
    - inventory_hostname == groups['kube_node'][0] or (inventory_hostname == groups['oru'][0] and intel_flexran_mode == "xran")

- name: verify target configuration for FlexRAN in Docker POD
  block:
    # check o/s for FlexRAN in Docker POD
    - debug: msg="Linux distribution on target is {{ ansible_distribution }} {{ ansible_distribution_version }} ({{ ansible_distribution_release }}) with {{ ansible_kernel }} kernel" # noqa yaml[line-length]
    - name: check linux distro version and kernel for FlexRAN in Docker POD
      ansible.builtin.assert:
        that: >
          (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04' and 'realtime' in ansible_kernel)
        fail_msg:
          - Deploying Intel FlexRAN in Docker POD is supported only on Ubuntu 22.04 with real-time kernel.
          - Please prepare accordingly the o/s image on target(s) or disable FlexRAN. See docs/flexran_guide.md
        success_msg: "Assertion passed. Intel FlexRAN in Docker POD is supported and can be deployed on {{ ansible_distribution }} {{ ansible_distribution_version }} {{ ansible_kernel }} target" # noqa yaml[line-length]
      when:
        - rt_kernel_enabled is not defined or
          not rt_kernel_enabled | default(false) | bool

    # check CPU for FlexRAN in Docker POD on ICX-SP(Ice Lake Scalable Performance)
    - debug: msg="CPU={{ ansible_processor[2] }} cores={{ ansible_processor_cores }} count={{ ansible_processor_count }} nproc={{ ansible_processor_nproc }} tpc={{ ansible_processor_threads_per_core }} vcpus={{ ansible_processor_vcpus }}" # noqa yaml[line-length]
    - name: check CPU for FlexRAN in Docker POD on ICX-SP
      ansible.builtin.assert:
        that: "ansible_processor_count == 1 and ansible_processor_cores == 32 and cpu_id == '6338N'"
        fail_msg: "Intel FlexRAN in Docker POD on ICL-SP requires worker with single 32-cores ICX 6338N CPU"
        success_msg: "Assertion passed. Intel FlexRAN in Docker POD is supported and can be deployed on target with ICX {{ cpu_id }} CPU"
      when:
        - configured_arch == "icx"

    # check CPU for FlexRAN in Docker POD on SPR-EE MCC
    - name: check CPU for FlexRAN in Docker POD on SPR-EE MCC
      ansible.builtin.assert:
        that: "ansible_processor_count == 1 and ansible_processor_cores == 32"
        fail_msg: "Intel FlexRAN in Docker POD on SPR-EE MCC requires worker with single 32-cores CPU"
        success_msg: "Assertion passed. Intel FlexRAN in Docker POD is supported on target with SPR-EE MCC"
      when:
        - configured_arch == "spr"

    # FlexRAN pod for SPR-EE MCC do not support core pinning. So need to disable k8s cpu manager.
    - name: check k8s cpu manager is disabled for FlexRAN Pod on SPR-EE MCC
      ansible.builtin.assert:
        that: native_cpu_manager_enabled == false
        fail_msg: "Please set 'native_cpu_manager_enabled' to 'false' in group vars to run FlexRAN pod on SPR-EE MCC"
      when:
        - configured_arch == "spr"
        - native_cpu_manager_enabled is defined

    # check runtime for FlexRAN in Docker POD
    - debug: msg="Container runtime is set to {{ container_runtime }}"
    - name: check runtime for FlexRAN in Docker POD
      ansible.builtin.assert:
        that: container_runtime in ['docker', 'containerd']
        fail_msg: "Deploying Intel FlexRAN as a Docker POD is supported only for docker/containerd runtime. Please correct the group_vars configuration"
        success_msg: "Assertion passed. Intel FlexRAN as a Docker POD is supported and can be deployed on '{{ container_runtime }}' runtime"

    # check SRIOV for FlexRAN in Docker POD
    - debug: msg="SRIOV Operator is {{ sriov_network_operator_enabled | default(false) }} or undefined, and SRIOV DP is set to {{ sriov_net_dp_enabled }}"
    - name: check SRIOV for FlexRAN in Docker POD
      ansible.builtin.assert:
        that: sriov_net_dp_enabled
        fail_msg: "Deploying Intel FlexRAN as a Docker POD is supported only with SRIOV DP (not SRIOV Operator). Please correct the group_vars configuration"
        success_msg: "Assertion passed. Intel FlexRAN as a Docker POD is supported and can be deployed with SRIOV DP"

    # check NICs for FlexRAN in Docker POD for xRAN test mode
    - debug:
        msg: "Dataplane (DP) interface(s) defined in host_vars are {{ dataplane_interfaces }}"
      when: intel_flexran_mode == 'xran'
    - name: check DP Interfaces
      ansible.builtin.assert:
        that: "{{ dataplane_interfaces | length }} >= 2"
        fail_msg: "At least TWO dataplane (DP) interface(s) on target '{{ ansible_hostname }}' must be set in host_vars. Please correct the configuration"
        success_msg: "Assertion passed. Two (or more) dataplane (DP) interface(s) are configured."
      when: intel_flexran_mode == 'xran'

  when:
    - intel_flexran_enabled | default(false) | bool
    - intel_flexran_type == "pod"
