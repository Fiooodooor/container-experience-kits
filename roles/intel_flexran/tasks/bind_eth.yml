##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: set DP VFs on DP0 for FlexRAN in Docker POD
  shell: "for i in {0..3}; do ip link set {{ dataplane_interfaces[0].name }} vf ${i} mac 00:11:22:33:00:${i}0; done; ip link show {{ dataplane_interfaces[0].name }}" # noqa yaml[line-length]
  args:
    executable: /bin/bash
  register: vfs_macs_dp0
  changed_when: vfs_macs_dp0.rc == 0
  failed_when: vfs_macs_dp0.rc != 0

- name: set DP VFs on DP1 for FlexRAN in Docker POD
  shell: "for i in {0..3}; do ip link set {{ dataplane_interfaces[1].name }} vf ${i} mac 00:11:22:33:00:${i}1; done; ip link show {{ dataplane_interfaces[1].name }}" # noqa yaml[line-length]
  args:
    executable: /bin/bash
  register: vfs_macs_dp1
  changed_when: vfs_macs_dp1.rc == 0
  failed_when: vfs_macs_dp1.rc != 0

- name: show DP VFs config
  debug: msg="{{ vfs_macs_dp0.stdout }}\n{{ vfs_macs_dp1.stdout }}"

- name: load vfio-pci
  modprobe:
    name: vfio-pci
    state: present

- name: show DPDK devices binding for FlexRAN in Docker POD
  ansible.builtin.command: "{{ (intel_flexran_dpdk_dir, 'usertools', 'dpdk-devbind.py -s') | path_join }}"
  register: devbind_status
  changed_when: false

- debug: msg="{{ devbind_status.stdout }}"

- name: restart SRIOV NET DP daemonset to re-initialize resources for FlexRAN in Docker POD
  ansible.builtin.command: kubectl rollout restart -n kube-system daemonset sriov-net-dp-kube-sriov-device-plugin-amd64
  register: sriov_ds_restart
  changed_when: sriov_ds_restart.rc == 0
  failed_when: sriov_ds_restart.rc != 0 or ("restarted" not in sriov_ds_restart.stdout)

- debug: msg="{{ sriov_ds_restart.stdout }}"

- name: cluster check-point
  ansible.builtin.include_role:
    name: wait_for_kubernetes_ready

- name: short wait for SRIOV DP to instate FEC VF resource
  pause:
    seconds: 10

- name: dump resources for FlexRAN in Docker POD
  shell: "set -o pipefail && kubectl get node {{ groups['kube_node'][0] }} -o json | jq '.status.allocatable'" # noqa command-instead-of-shell
  args:
    executable: /bin/bash
  register: node_resources
  changed_when: false
  failed_when: node_resources.rc != 0

- debug: msg="{{ node_resources.stdout }}"

- name: check 'intel_fec_5g resources' for FlexRAN in Docker POD
  ansible.builtin.assert:
    that: "'\"intel.com/intel_fec_5g\": \"1\"' in node_resources.stdout"
    fail_msg: "The expected 'intel_fec_5g' resources are NOT ready for FlexRAN in Docker POD"
    success_msg: "All expected 'intel_fec_5g' resources are ready for FlexRAN in Docker POD"

- name: check 'intel_sriov_odu' for FlexRAN in Docker POD
  ansible.builtin.assert:
    that: "'\"intel.com/intel_sriov_odu\": \"4\"' in node_resources.stdout"
    fail_msg: "The expected 'intel_sriov_odu' resources are NOT ready for FlexRAN in Docker POD"
    success_msg: "All expected 'intel_sriov_odu' resources are ready for FlexRAN in Docker POD"

- name: check 'intel_sriov_oru' for FlexRAN in Docker POD
  ansible.builtin.assert:
    that: "'\"intel.com/intel_sriov_oru\": \"4\"' in node_resources.stdout"
    fail_msg: "The expected 'intel_sriov_oru' resources are NOT ready for FlexRAN in Docker POD"
    success_msg: "All expected 'intel_sriov_oru' resources are ready for FlexRAN in Docker POD"
