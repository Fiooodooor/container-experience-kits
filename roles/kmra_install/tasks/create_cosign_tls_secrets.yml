##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: create tmp dir for keys-certs
  ansible.builtin.tempfile:
    state: directory
    suffix: kmra-mtls
  register: mtls_tmp_dir

- name: generate CA root crt
  ansible.builtin.command: >-
    openssl req -SHA384 -nodes -x509 -newkey rsa:3072
    -days {{ kmra.certs_validity_period_days }}
    -keyout {{ (mtls_tmp_dir.path, 'ca.key') | path_join }}
    -out {{ (mtls_tmp_dir.path, 'ca.crt') | path_join }}
    -subj "/O={{ kmra.ca_root_crt_subj.O }}/OU={{ kmra.ca_root_crt_subj.OU }}/CN={{ kmra.ca_root_crt_subj.CN }}"
  changed_when: true

- name: generate csr for the cosign key
  ansible.builtin.command: >-
    openssl req -SHA384 -nodes -newkey rsa:3072
    -keyout {{ (mtls_tmp_dir.path, item.name) | path_join }}.key
    -out {{ (mtls_tmp_dir.path, item.name) | path_join }}.csr
    -subj "/O={{ item.subj.O | default('') }}/OU={{ item.subj.OU | default('') }}/CN={{ item.subj.CN | default('') }}"
  loop: "{{ secrets }}"
  changed_when: true

- name: generate cert for the cosign key
  ansible.builtin.shell: >-
    set -o pipefail &&
    openssl x509 -SHA384 -req -in {{ (mtls_tmp_dir.path, item.name) | path_join }}.csr
    -days {{ kmra.certs_validity_period_days }}
    -CA {{ (mtls_tmp_dir.path, 'ca.crt') | path_join }}
    -CAkey {{ (mtls_tmp_dir.path, 'ca.key') | path_join }}
    {{ '-extfile <(printf "subjectAltName=DNS:' + item.subj.CN + '")'
    if item.subj.CN | default('') | length > 0 }}
    -CAcreateserial -CAserial {{ (mtls_tmp_dir.path, 'ca.srl' ) | path_join }}
    -out {{ (mtls_tmp_dir.path, item.name) | path_join }}.crt
  args:
    executable: /bin/bash
  loop: "{{ secrets }}"
  changed_when: true

- name: get GOPATH
  ansible.builtin.command: go env GOPATH
  register: gopath
  changed_when: false

- name: generate cosign password if not provided
  ansible.builtin.set_fact:
    cosign_password: "{{ lookup('ansible.builtin.password', '/dev/null') }}"
  no_log: true
  run_once: true
  when:
    - (cosign_password is not defined) or (not cosign_password)

- name: import secret for cosign
  ansible.builtin.command: >-
    env COSIGN_PASSWORD={{ cosign_password }} {{ gopath.stdout }}/bin/cosign
    import-key-pair --key {{ (mtls_tmp_dir.path, item.name) | path_join }}.key
    --output-key-prefix {{ item.name }}.cosign
  args:
    chdir: "{{ mtls_tmp_dir.path }}"
  loop: "{{ secrets }}"
  changed_when: true

- name: generate a list of all secrets files
  ansible.builtin.find:
    paths: "{{ mtls_tmp_dir.path }}"
    file_type: file
    recurse: no
  register: secret_list

- name: read all secrets
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  register: secret_files
  no_log: true
  loop: "{{ secret_list.files }}"

- name: set fact of all secrets
  ansible.builtin.set_fact:
    "cosign_{{ item['source'] | basename | replace('.','')}}": "{{ item['content'] | replace(\"'\",'') }}"
  no_log: true
  loop: "{{ secret_files.results }}"

- name: create provider and operator secrets for cosign
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "{{ item.name }}-cosign"
        namespace: "{{ item.namespace | default(kmra.namespace) }}"
      data:
        cosign.ca: "{{ cosign_cacrt }}"
        cosign.cert: "{{ hostvars[inventory_hostname]['cosign_' + item.name + 'crt'] }}"
        cosign.key: "{{ hostvars[inventory_hostname]['cosign_' + item.name + 'cosignkey'] }}"
        cosign.pub: "{{ hostvars[inventory_hostname]['cosign_' + item.name + 'cosignpub'] }}"
      stringData:
        cosign.password: "{{ cosign_password }}"
  loop: "{{ secrets }}"

- name: create pubkey secret for policy-controller
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "{{ item.name }}-cosign-pubkey"
        namespace: "{{ cosign_namespace }}"
      data:
        cosign.pub: "{{ hostvars[inventory_hostname]['cosign_' + item.name + 'cosignpub'] }}"
  loop: "{{ secrets }}"

- name: clean up tmp directory
  ansible.builtin.file:
    path: "{{ mtls_tmp_dir.path }}"
    state: absent
