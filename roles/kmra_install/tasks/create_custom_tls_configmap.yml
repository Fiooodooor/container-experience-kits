##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: create tmp dir for keys-certs
  ansible.builtin.tempfile:
    state: directory
    suffix: kmra-custom-tls
  register: tls_tmp_dir

- name: download netopeer2 server and client keys-certs
  ansible.builtin.get_url:
    url: "{{ (kmra.apphsm.oran_netopeer2_sample_tls_url, 'tls_certs', item) | path_join }}"
    dest: "{{ (tls_tmp_dir.path, item) | path_join }}"
    mode: 0644
  loop:
    - "server.key"
    - "server.crt"
    - "client.key"
    - "client.crt"

- name: generate a list of all secrets files
  ansible.builtin.find:
    paths: "{{ tls_tmp_dir.path }}"
    file_type: file
    recurse: no
  register: secret_list

- name: read all secrets
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  register: secret_files
  no_log: true
  loop: "{{ secret_list.files }}"

- name: set fact of all secrets
  ansible.builtin.set_fact:
    "custom_tls_{{ item['source'] | basename | replace('.','')}}": "{{ item['content'] | replace(\"'\",'') | b64decode }}"
  no_log: true
  loop: "{{ secret_files.results }}"

- name: create configmap for the kmra app custom-tls
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: kmra-apphsm-custom-config
        namespace: "{{ kmra.namespace }}"
      data:
        server.key: "{{ custom_tls_serverkey }}"
        server.crt: "{{ custom_tls_servercrt }}"
        client.key: "{{ custom_tls_clientkey }}"
        client.crt: "{{ custom_tls_clientcrt }}"

- name: clean up tmp directory
  ansible.builtin.file:
    path: "{{ tls_tmp_dir.path }}"
    state: absent

- name: create tmp dir for sysrepo
  ansible.builtin.tempfile:
    state: directory
    suffix: oran-sysrepo
  register: sys_tmp_dir

- name: download netopeer2 sysrepo config
  ansible.builtin.get_url:
    url: "{{ (kmra.apphsm.oran_netopeer2_sample_tls_url, item) | path_join }}"
    dest: "{{ (sys_tmp_dir.path, item) | path_join }}"
    mode: 0644
  loop:
    - "tls_keystore.xml"
    - "tls_listen.xml"
    - "tls_truststore.xml"

- name: hide the private key as we use pkcs11 to load it from ctk_loader
  ansible.builtin.replace:
    path: "{{ (sys_tmp_dir.path, 'tls_keystore.xml') | path_join }}"
    regexp: '<private-key>.+</private-key>'
    replace: "<private-key>{{ ('pkcs11:token=token_server;object=client_key_priv;pin-value=' + \
              kmra.oran_netopeer2_server.default_user_pin + ';') | b64encode }}</private-key>"

- name: generate a list of all sysrepo files
  ansible.builtin.find:
    paths: "{{ sys_tmp_dir.path }}"
    file_type: file
    recurse: no
  register: sysrepo_list

- name: read all sysrepo files
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  register: sysrepo_files
  no_log: true
  loop: "{{ sysrepo_list.files }}"

- name: set fact of all sysrepo files
  ansible.builtin.set_fact:
    "sysrepo_{{ item['source'] | basename | replace('.','')}}": "{{ item['content'] | replace(\"'\",'') | b64decode }}"
  no_log: true
  loop: "{{ sysrepo_files.results }}"

- name: create configmap for the netopeer2 app
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: oran-sysrepo-config
        namespace: "{{ cosign_enforce_namespace }}"
      data:
        tls_keystore.xml: "{{ sysrepo_tls_keystorexml }}"
        tls_listen.xml: "{{ sysrepo_tls_listenxml }}"
        tls_truststore.xml: "{{ sysrepo_tls_truststorexml }}"

- name: clean up tmp directory
  ansible.builtin.file:
    path: "{{ sys_tmp_dir.path }}"
    state: absent
