##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: create tmp dir for keys-certs
  ansible.builtin.tempfile:
    state: directory
    suffix: kmra-custom-tls
  register: tls_tmp_dir

- name: generate custom RSA keys
  block:
    - name: generate netopeer2 CA root crt
      ansible.builtin.command: >-
        openssl req -SHA384 -nodes -x509 -newkey rsa:3072
        -days {{ kmra.certs_validity_period_days }}
        -keyout {{ (tls_tmp_dir.path, 'ca.key') | path_join }}
        -out {{ (tls_tmp_dir.path, 'ca.crt') | path_join }}
        -subj "/O={{ kmra.ca_root_crt_subj.O }}/OU={{ kmra.ca_root_crt_subj.OU }}/CN={{ kmra.ca_root_crt_subj.CN }}"
      changed_when: true

    - name: generate new keys and csrs
      ansible.builtin.command: >-
        openssl req -SHA384 -nodes -newkey rsa:3072
        -keyout {{ (tls_tmp_dir.path, item.token_name) | path_join }}.key
        -out {{ (tls_tmp_dir.path, item.token_name) | path_join }}.csr
        -subj "/O={{ item.crt_subj.O | default('') }}/OU={{ item.crt_subj.OU | default('') }}/CN={{ item.crt_subj.CN | default('') }}"
      loop: "{{ kmra.apphsm.app_keys }}"
      changed_when: true

    - name: generate crts for the new keys
      ansible.builtin.shell: >-
        set -o pipefail &&
        openssl x509 -SHA384 -req -in {{ (tls_tmp_dir.path, item.token_name) | path_join }}.csr
        -days {{ kmra.certs_validity_period_days }}
        -CA {{ (tls_tmp_dir.path, 'ca.crt') | path_join }}
        -CAkey {{ (tls_tmp_dir.path, 'ca.key') | path_join }}
        {{ '-extfile <(printf "subjectAltName=DNS:' + item.crt_subj.CN + '")'
        if item.crt_subj.CN | default('') | length > 0 }}
        -CAcreateserial -CAserial {{ (tls_tmp_dir.path, 'ca.srl' ) | path_join }}
        -out {{ (tls_tmp_dir.path, item.token_name) | path_join }}.crt
      args:
        executable: /bin/bash
      loop: "{{ kmra.apphsm.app_keys }}"
      changed_when: true
  when: kmra.apphsm.ecdsa_keys != "true"

- name: generate custom ECDSA keys
  block:
    - name: generate netopeer2 CA root crt
      ansible.builtin.command: >-
        openssl req -SHA384 -nodes -x509 -newkey ec -pkeyopt ec_paramgen_curve:secp384r1
        -days {{ kmra.certs_validity_period_days }}
        -keyout {{ (tls_tmp_dir.path, 'ca.key') | path_join }}
        -out {{ (tls_tmp_dir.path, 'ca.crt') | path_join }}
        -subj "/O={{ kmra.ca_root_crt_subj.O }}/OU={{ kmra.ca_root_crt_subj.OU }}/CN={{ kmra.ca_root_crt_subj.CN }}"
      changed_when: true

    - name: generate new keys and csrs
      ansible.builtin.command: >-
        openssl req -SHA384 -nodes -newkey ec -pkeyopt ec_paramgen_curve:secp384r1
        -keyout {{ (tls_tmp_dir.path, item.token_name) | path_join }}.ekey
        -out {{ (tls_tmp_dir.path, item.token_name) | path_join }}.csr
        -subj "/O={{ item.crt_subj.O | default('') }}/OU={{ item.crt_subj.OU | default('') }}/CN={{ item.crt_subj.CN | default('') }}"
      loop: "{{ kmra.apphsm.app_keys }}"
      changed_when: true

    - name: convert keys to pkcs8 format
      ansible.builtin.command: >-
        openssl pkcs8 -topk8 --inform PEM --outform PEM --nocrypt
        -in {{ (tls_tmp_dir.path, item.token_name) | path_join }}.ekey
        -out {{ (tls_tmp_dir.path, item.token_name) | path_join }}.key
      loop: "{{ kmra.apphsm.app_keys }}"
      changed_when: true

    - name: generate crts for the new keys
      ansible.builtin.shell: >-
        set -o pipefail &&
        openssl x509 -req -SHA384 -in {{ (tls_tmp_dir.path, item.token_name) | path_join }}.csr
        -days {{ kmra.certs_validity_period_days }}
        -CA {{ (tls_tmp_dir.path, 'ca.crt') | path_join }}
        -CAkey {{ (tls_tmp_dir.path, 'ca.key') | path_join }}
        {{ '-extfile <(printf "subjectAltName=DNS:' + item.crt_subj.CN + '")'
        if item.crt_subj.CN | default('') | length > 0 }}
        -CAcreateserial -CAserial {{ (tls_tmp_dir.path, 'ca.srl' ) | path_join }}
        -out {{ (tls_tmp_dir.path, item.token_name) | path_join }}.crt
      args:
        executable: /bin/bash
      loop: "{{ kmra.apphsm.app_keys }}"
      changed_when: true
  when: kmra.apphsm.ecdsa_keys == "true"

- name: generate a list of all secrets files
  ansible.builtin.find:
    paths: "{{ tls_tmp_dir.path }}"
    file_type: file
    recurse: no
  register: secret_list

- name: read all secrets
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  register: secret_files
  no_log: true
  loop: "{{ secret_list.files }}"

- name: set fact of all secrets
  ansible.builtin.set_fact:
    "custom_tls_{{ item['source'] | basename | replace('.','')}}": "{{ item['content'] | replace(\"'\",'') | b64decode }}"
  no_log: true
  loop: "{{ secret_files.results }}"

- name: create configmap for the kmra app custom-tls
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: kmra-apphsm-custom-config
        namespace: "{{ kmra.namespace }}"
      data:
        server_cu.key: "{{ custom_tls_token_server_cukey }}"
        server_cu.crt: "{{ custom_tls_token_server_cucrt }}"
        server_du.key: "{{ custom_tls_token_server_dukey }}"
        server_du.crt: "{{ custom_tls_token_server_ducrt }}"
        server_ric.key: "{{ custom_tls_token_server_rickey }}"
        server_ric.crt: "{{ custom_tls_token_server_riccrt }}"
        client.key: "{{ custom_tls_token_clientkey }}"
        client.crt: "{{ custom_tls_token_clientcrt }}"

- name: clean up tmp directory
  ansible.builtin.file:
    path: "{{ tls_tmp_dir.path }}"
    state: absent

- name: create tmp dir for sysrepo
  ansible.builtin.tempfile:
    state: directory
    suffix: oran-sysrepo
  register: sys_tmp_dir

- name: create sysrepo for cu, du, ric separately - tls_truststore & tls_listen
  block:
    - name: get ca crt base64
      ansible.builtin.shell: >-
        set -o pipefail &&
        echo -n "{{ custom_tls_cacrt }}" | openssl x509 -outform der | base64 -w0
      register: ca_crt_str
      args:
        executable: /bin/bash
      changed_when: true

    - name: get client crt base64
      ansible.builtin.shell: >-
        set -o pipefail &&
        echo -n "{{ custom_tls_token_clientcrt }}" | openssl x509 -outform der | base64 -w0
      register: client_crt_str
      args:
        executable: /bin/bash
      changed_when: true

    - name: populate tls_truststore.xml
      ansible.builtin.template:
        src: "tls_truststore.xml.j2"
        dest: "{{ (sys_tmp_dir.path, 'tls_truststore.xml') | path_join }}"
        mode: '0644'

    - name: get client finger
      ansible.builtin.shell: >-
        set -o pipefail &&
        echo -n "{{ custom_tls_cacrt }}" | openssl x509 -noout -fingerprint | cut -b '18-'
      register: finger_str
      args:
        executable: /bin/bash
      changed_when: true

    - name: populate tls_listen.xml
      ansible.builtin.template:
        src: "tls_listen.xml.j2"
        dest: "{{ (sys_tmp_dir.path, 'tls_listen.xml') | path_join }}"
        mode: '0644'

- name: create sysrepo for cu, du, ric separately - tls_keystore
  include_tasks: create_sysrepo_keystore.yml
  no_log: true
  loop:
    - {
      key: "{{ custom_tls_token_server_cukey }}",
      crt: "{{ custom_tls_token_server_cucrt }}",
      xml: 'tls_keystore_cu.xml'
    }
    - {
      key: "{{ custom_tls_token_server_dukey }}",
      crt: "{{ custom_tls_token_server_ducrt }}",
      xml: 'tls_keystore_du.xml'
    }
    - {
      key: "{{ custom_tls_token_server_rickey }}",
      crt: "{{ custom_tls_token_server_riccrt }}",
      xml: 'tls_keystore_ric.xml'
    }

- name: generate a list of all sysrepo files
  ansible.builtin.find:
    paths: "{{ sys_tmp_dir.path }}"
    file_type: file
    recurse: no
  register: sysrepo_list

- name: read all sysrepo files
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  register: sysrepo_files
  no_log: true
  loop: "{{ sysrepo_list.files }}"

- name: set fact of all sysrepo files
  ansible.builtin.set_fact:
    "sysrepo_{{ item['source'] | basename | replace('.','')}}": "{{ item['content'] | replace(\"'\",'') | b64decode }}"
  no_log: true
  loop: "{{ sysrepo_files.results }}"

- name: create configmap for the netopeer2 app
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ item.key }}-oran-sysrepo-config"
        namespace: "{{ cosign_enforce_namespace }}"
      data:
        tls_keystore.xml: "{{ item.xml }}"
        tls_listen.xml: "{{ sysrepo_tls_listenxml }}"
        tls_truststore.xml: "{{ sysrepo_tls_truststorexml }}"
  no_log: true
  loop:
    - {
      key: "{{ kmra.oran_netopeer2_server.release_name }}-cu",
      xml: "{{ sysrepo_tls_keystore_cuxml }}"
    }
    - {
      key: "{{ kmra.oran_netopeer2_server.release_name }}-du",
      xml: "{{ sysrepo_tls_keystore_duxml }}"
    }
    - {
      key: "{{ kmra.oran_netopeer2_server.release_name }}-ric",
      xml: "{{ sysrepo_tls_keystore_ricxml }}"
    }
    # just reuse cu keystore for client sysrepo format check only
    - {
      key: "{{ kmra.oran_netopeer2_client.release_name }}",
      xml: "{{ sysrepo_tls_keystore_cuxml }}"
    }

- name: clean up tmp directory
  ansible.builtin.file:
    path: "{{ sys_tmp_dir.path }}"
    state: absent
