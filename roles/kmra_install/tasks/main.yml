##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: combine defaults and user provided vars
  set_fact:
    kmra: "{{ kmra_oran | combine(kmra | default({}), recursive=True) }}"
  no_log: true
  when:
    - kmra.oran.enabled | default(false)

- name: combine defaults and user provided vars
  set_fact:
    kmra: "{{ kmra_defaults | combine(kmra | default({}), recursive=True) }}"
  no_log: true

- name: include sigstore variables when needed
  include_vars: "{{ (role_path, '../', 'sigstore_policy_controller/defaults/main.yml') | path_join }}"
  when:
    - kmra.oran.enabled | default(false)

- name: prepare worker node
  block:
    - name: ensure sgx_prv group exist
      ansible.builtin.group:
        name: sgx_prv
        state: present
      when:
        - (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('21.04', '>='))
          or (ansible_os_family == "RedHat" and ansible_distribution_version is version('8.4', '>='))

    - name: determine sgx_prv and sgx ID
      ansible.builtin.getent:
        database: group
  when:
    - kmra.ctk_loadkey_demo.enabled or kmra.oran.enabled | default (false)
    - inventory_hostname == groups['kube_node'][0]

- name: update aesmd/qcnl host settings
  block:
    - name: update qcnl configuration pccs url
      lineinfile:
        path: /etc/sgx_default_qcnl.conf
        regexp: '^(\s+)"pccs_url":.*$'
        line: '\1"pccs_url": "https://{{ kmra.pccs.hostname }}:{{ kmra.pccs.upstream_port }}/sgx/certification/v3/",'
        state: present
        mode: 0644
        backrefs: yes

    - name: update qcnl configuration unsecure cert usage
      lineinfile:
        path: /etc/sgx_default_qcnl.conf
        regexp: '^(\s+)"use_secure_cert":.*$'
        line: '\1"use_secure_cert": false,'
        state: present
        mode: 0644
        backrefs: yes

    - name: update aesmd service configuration
      lineinfile:
        path: /etc/aesmd.conf
        regexp: '^#default quoting type = ecdsa_256$'
        line: 'default quoting type = ecdsa_256'
        state: present
        mode: 0644

    - name: restart aesmd service to apply config changes
      service:
        state: restarted
        name: aesmd

    - name: get aesmd service facts
      service_facts:
      register: service_info

    - debug:
        var: service_info.ansible_facts.services['aesmd.service'].state
      failed_when: "'running' not in service_info.ansible_facts.services['aesmd.service'].state"
  when:
    - inventory_hostname == groups['kube_node'][0]
    - kmra.pccs.enabled

- name: prepare and deploy kmra
  block:
    - name: install dependencies
      include_role:
        name: install_dependencies

    - name: cleanup existing artifacts
      include_tasks: cleanup.yml

    - name: label worker node with KMRA label
      command: kubectl label nodes {{ hostvars[groups['kube_node'][0]]['ansible_hostname'] }} app=kmra --overwrite
      changed_when: true

    - name: create KMRA namespace
      k8s:
        name: "{{ kmra.namespace }}"
        kind: Namespace
        state: present

    - name: create k8s tls secrets for apphsm and ctk apps
      include_tasks: create_tls_secrets.yml
      vars:
        kmra_apps:
          - {
            name: "{{ kmra.pccs.release_name }}",
            subj: "{{ kmra.pccs.crt_subj }}",
            deploy: "{{ kmra.pccs.enabled | default(false) }}"
          }
          - {
            name: "{{ kmra.apphsm.release_name }}",
            subj: "{{ kmra.apphsm.crt_subj }}",
            deploy: "{{ kmra.apphsm.enabled | default(false) }}"
          }
          - {
            name: "generic-apphsm-client",
            subj: {O: "AppHSM", OU: "{{ kmra.apphsm.generic_client_cert_id }}"},
            deploy: "{{ kmra.apphsm.enabled | default(false) }}"
          }
          - {
            name: "{{ kmra.ctk_loadkey_demo.release_name }}",
            subj: "{{ kmra.ctk_loadkey_demo.crt_subj }}",
            deploy: "{{ kmra.ctk_loadkey_demo.enabled | default(false) }}"
          }
          - {
            name: "{{ kmra.oran_netopeer2_server.release_name | default('') }}-cu",
            namespace: "{{ cosign_enforce_namespace | default('default') }}",
            subj: "{{ kmra.oran_netopeer2_server.crt_subj | default('') }}",
            deploy: "{{ kmra.oran_netopeer2_server.enabled | default(false) }}",
          }
          - {
            name: "{{ kmra.oran_netopeer2_server.release_name | default('') }}-du",
            namespace: "{{ cosign_enforce_namespace | default('default') }}",
            subj: "{{ kmra.oran_netopeer2_server.crt_subj | default('') }}",
            deploy: "{{ kmra.oran_netopeer2_server.enabled | default(false) }}",
          }
          - {
            name: "{{ kmra.oran_netopeer2_server.release_name | default('') }}-ric",
            namespace: "{{ cosign_enforce_namespace | default('default') }}",
            subj: "{{ kmra.oran_netopeer2_server.crt_subj | default('') }}",
            deploy: "{{ kmra.oran_netopeer2_server.enabled | default(false) }}",
          }
          - {
            name: "{{ kmra.oran_netopeer2_client.release_name | default('') }}",
            namespace: "{{ cosign_enforce_namespace | default('default')}}",
            subj: "{{ kmra.oran_netopeer2_client.crt_subj | default('')}}",
            deploy: "{{ kmra.oran_netopeer2_client.enabled | default(false) }}",
          }

    - name: prepare sbx apphsm images for pre-PRQ sgx
      include_tasks: prepare_sbx_apphsm.yml
      when:
        - kmra.sbx | default(false)

    - name: create Helm charts directory if needed
      file:
        path: "{{ (project_root_dir, 'charts') | path_join }}"
        state: directory
        mode: 0755

    - name: copy KMRA Helm chart to the controller node
      copy:
        src: "{{ (role_path, 'charts', item.chart) | path_join }}"
        dest: "{{ (project_root_dir, 'charts')  | path_join }}"
        mode: 0755
      loop:
        - {chart: 'kmra-pccs', deploy: "{{ kmra.pccs.enabled | default(false) }}"}
        - {chart: 'kmra-apphsm', deploy: "{{ kmra.apphsm.enabled | default(false) }}"}
        - {chart: 'kmra-ctk', deploy: "{{ kmra.ctk_loadkey_demo.enabled | default(false) }}"}
        - {chart: 'kmra-oran-netopeer2-server', deploy: "{{ kmra.oran_netopeer2_server.enabled | default(false) }}"}
        - {chart: 'kmra-oran-netopeer2-client', deploy: "{{ kmra.oran_netopeer2_client.enabled | default(false) }}"}
      when:
        - item.deploy

    - name: populate KMRA Helm charts values templates and push to controller node
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: yes
        mode: preserve
      loop:
        - {
          src: "kmra-pccs-values.yaml.j2",
          dest: "{{ (project_root_dir, 'charts', 'kmra-pccs-values.yml') | path_join }}",
          deploy: "{{ kmra.pccs.enabled | default(false) }}"
        }
        - {
          src: "kmra-pccs-rbac-cluster-role.yml.j2",
          dest: "{{ (kmra.pccs.chart_path, 'templates','kmra-pccs-rbac-cluster-role.yml') | path_join }}",
          deploy: "{{ kmra.pccs.enabled | default(false) }}"
        }
        - {
          src: "kmra-apphsm-values.yaml.j2",
          dest: "{{ (project_root_dir, 'charts', 'kmra-apphsm-values.yml') | path_join }}",
          deploy: "{{ kmra.apphsm.enabled | default(false) }}"
        }
        - {
          src: "kmra-apphsm-rbac-cluster-role.yml.j2",
          dest: "{{ (kmra.apphsm.chart_path, 'templates', 'kmra-apphsm-rbac-cluster-role.yml') | path_join }}",
          deploy: "{{ kmra.apphsm.enabled | default(false) }}"
        }
        - {
          src: "kmra-ctk-values.yaml.j2",
          dest: "{{ (project_root_dir, 'charts', 'kmra-ctk-values.yml') | path_join }}",
          deploy: "{{ kmra.ctk_loadkey_demo.enabled | default(false) }}"
        }
        - {
          src: "kmra-ctk-loadkey-rbac-cluster-role.yml.j2",
          dest: "{{ (kmra.ctk_loadkey_demo.chart_path, 'templates', 'kmra-ctk-loadkey-rbac-cluster-role.yml') | path_join }}",
          deploy: "{{ kmra.ctk_loadkey_demo.enabled | default(false) }}"
        }
      when:
        - item.deploy

    - name: install KMRA pccs helm chart
      kubernetes.core.helm:
        chart_ref: "{{ kmra.pccs.chart_path }}"
        release_name: "{{ kmra.pccs.release_name }}"
        release_namespace: "{{ kmra.namespace }}"
        values_files: "{{ kmra.pccs.helm_values_file }}"
        create_namespace: true
        force: true
      when:
        - kmra.pccs.enabled | default(false)

    - name: Wait for pccs to start
      kubernetes.core.k8s_info:
        kind: Deployment
        name: kmra-pccs
        namespace: "{{ kmra.namespace }}"
        wait: true
        wait_condition:
          reason: MinimumReplicasAvailable
          type: Available
        wait_timeout: 600

    - name: create apphsm custom_tls for oran case
      include_tasks: create_custom_tls_configmap.yml
      when:
        - kmra.oran.enabled | default(false)

    - name: install KMRA AppHSM helm chart
      kubernetes.core.helm:
        chart_ref: "{{ kmra.apphsm.chart_path }}"
        release_name: "{{ kmra.apphsm.release_name }}"
        release_namespace: "{{ kmra.namespace }}"
        values_files: "{{ kmra.apphsm.helm_values_file }}"
        create_namespace: true
        force: true
      when:
        - kmra.apphsm.enabled | default(false)

    - name: Wait for apphsm to start
      kubernetes.core.k8s_info:
        kind: Deployment
        name: kmra-apphsm
        namespace: "{{ kmra.namespace }}"
        wait: true
        wait_condition:
          reason: MinimumReplicasAvailable
          type: Available
        wait_timeout: 600

    - name: install KMRA Ctk loadkey helm chart
      kubernetes.core.helm:
        chart_ref: "{{ kmra.ctk_loadkey_demo.chart_path }}"
        release_name: "{{ kmra.ctk_loadkey_demo.release_name }}"
        release_namespace: "{{ kmra.namespace }}"
        values_files: "{{ kmra.ctk_loadkey_demo.helm_values_file }}"
        create_namespace: true
        force: true
      when:
        - kmra.ctk_loadkey_demo.enabled | default(false)

    - name: Wait for ctk_loadkey to start
      kubernetes.core.k8s_info:
        kind: Deployment
        name: kmra-ctk
        namespace: "{{ kmra.namespace }}"
        wait: true
        wait_condition:
          reason: MinimumReplicasAvailable
          type: Available
        wait_timeout: 600
      when:
        - kmra.ctk_loadkey_demo.enabled | default(false)
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: deploy the oran ctk_loadkey based apps
  block:
    - name: create k8s tls secrets for oran apps cosign usage
      include_tasks: create_cosign_tls_secrets.yml
      vars:
        secrets:
          - {
            name: "{{ kmra.oran.sw_provider_name }}",
            namespace: "{{ cosign_enforce_namespace }}",
            subj: "{{ kmra.oran.sw_provider_crt_subj }}",
            deploy: true,
          }
          - {
            name: "{{ kmra.oran.sw_operator_name }}",
            namespace: "{{ cosign_enforce_namespace }}",
            subj: "{{ kmra.oran.sw_operator_crt_subj }}",
            deploy: true,
          }

    - name: create enforce pubkey policy crd yaml
      ansible.builtin.template:
        src: "kmra-oran-key-cosign-verification.yaml.j2"
        dest: "{{ (policy_controller_dir, 'kmra-oran-key-cosign-verification.yaml') | path_join }}"
        force: yes
        mode: preserve

    - name: apply enforce pubkey policy crd yaml
      kubernetes.core.k8s:
        state: present
        src: "{{ (policy_controller_dir, 'kmra-oran-key-cosign-verification.yaml') | path_join }}"

    - name: prepare image for oran case
      include_tasks: prepare_oran_image.yml

    - name: populate oran helm charts values templates and push to controller node - servers
      ansible.builtin.template:
        src: "kmra-oran-netopeer2-server-values.yaml.j2"
        dest: "{{ kmra.oran_netopeer2_server.helm_values_file }}-{{ item }}"
        force: yes
        mode: preserve
      loop: ['cu', 'du', 'ric']
      when:
        - kmra.oran_netopeer2_server.enabled | default(false) | bool

    - name: populate oran helm charts values templates and push to controller node - others
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: yes
        mode: preserve
      loop:
        - {
          src: "kmra-oran-netopeer2-server-rbac-cluster-role.yml.j2",
          dest: "{{ (kmra.oran_netopeer2_server.chart_path, 'templates', 'kmra-oran-netopeer2-server-rbac-cluster-role.yml') | path_join }}",
          deploy: "{{ kmra.oran_netopeer2_server.enabled | default(false) }}"
        }
        - {
          src: "kmra-oran-netopeer2-client-values.yaml.j2",
          dest: "{{ (project_root_dir, 'charts', 'kmra-oran-netopeer2-client-values.yml') | path_join }}",
          deploy: "{{ kmra.oran_netopeer2_client.enabled | default(false) }}"
        }
        - {
          src: "kmra-oran-netopeer2-client-rbac-cluster-role.yml.j2",
          dest: "{{ (kmra.oran_netopeer2_client.chart_path, 'templates', 'kmra-oran-netopeer2-client-rbac-cluster-role.yml') | path_join }}",
          deploy: "{{ kmra.oran_netopeer2_client.enabled | default(false) }}"
        }
      when:
        - item.deploy

    - name: install KMRA oran netopeer2 server helm chart
      kubernetes.core.helm:
        chart_ref: "{{ kmra.oran_netopeer2_server.chart_path }}"
        release_name: "{{ kmra.oran_netopeer2_server.release_name }}-{{ item }}"
        release_namespace: "{{ cosign_enforce_namespace }}"
        values_files: "{{ kmra.oran_netopeer2_server.helm_values_file }}-{{ item }}"
        wait: true
        timeout: 4m0s
      loop: ['cu', 'du', 'ric']
      when:
        - kmra.oran_netopeer2_server.enabled | default(false)

    - name: install KMRA oran netopeer2 client helm chart
      kubernetes.core.helm:
        chart_ref: "{{ kmra.oran_netopeer2_client.chart_path }}"
        release_name: "{{ kmra.oran_netopeer2_client.release_name }}"
        release_namespace: "{{ cosign_enforce_namespace }}"
        values_files: "{{ kmra.oran_netopeer2_client.helm_values_file }}"
        wait: true
        timeout: 4m0s
      when:
        - kmra.oran_netopeer2_client.enabled | default(false)
  when:
    - kmra.oran.enabled | default(false)
    - inventory_hostname == groups['kube_control_plane'][0]
