##
##   Copyright (c) 2020-2021 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: Import role for setting apphsm hostname variable
  import_role:
    name: KMRA/set_apphsm_hostname

- name: Try to check if OpenSSL can be used
  block:
    - name: Check if openssl version matches the {{ required_openssl_version }}
      shell: >
        {{ openssl_bin_path }} version|
        grep "OpenSSL {{ required_openssl_version }}"
  rescue:
    - name: Print what OpenSSL version is required
      fail:
        msg: >-
          OpenSSL version '{{ required_openssl_version }}*' is required.
          Install correct OpenSSL version and run ansible-playbook again.

# NOTE: this role is meant to be delegated to localhost - doing user
# discovery manual way because ansible_user_id in this case will be
# showing username used on remote side (e.g. root) and this may cause
# directory permissions problems later
- name: Get username of user that started ansible script on localhost
  command: whoami
  register: whoami_lookup

- name: Create directory for certs - {{ ca_cert_dir }}
  file:
    path: "{{ ca_cert_dir }}"
    state: directory
    owner: "{{ whoami_lookup.stdout }}"
    mode: "0700"
  become: true

- name: Generate root CA cert
  command:
    cmd: >
      {{ openssl_bin_path }} req -nodes -x509 -newkey rsa:2048
      -subj "{{ ca_cert_subject }}" -keyout {{ ca_name }}.key
      -out {{ ca_name }}.crt
    chdir: "{{ ca_cert_dir }}"
    creates: "{{ ca_cert_dir }}/{{ ca_name }}.crt"

- name: Generate server certificates
  command:
    cmd: >
      {{ openssl_bin_path }} req -nodes -newkey rsa:2048
      -subj "{{ server_cert_subject }}" -keyout {{ server_name }}.key
      -out {{ server_name }}.csr
    chdir: "{{ ca_cert_dir }}"
    creates: "{{ ca_cert_dir }}/{{ server_name }}.key"

- name: Create server cert using ca cert
  command:
    cmd: >
      {{ openssl_bin_path }} x509 -req -in {{ server_name }}.csr
      -CA {{ ca_name }}.crt -CAkey {{ ca_name }}.key -CAcreateserial
      -out {{ server_name }}.crt
    chdir: "{{ ca_cert_dir }}"
    creates: "{{ ca_cert_dir }}/{{ server_name }}.crt"

- name: Generate client certificates
  command:
    cmd: >
      {{ openssl_bin_path }} req -nodes -newkey rsa:2048
      -subj "{{ client_cert_subject }}" -keyout {{ client_name }}.key
      -out {{ client_name }}.csr
    chdir: "{{ ca_cert_dir }}"
    creates: "{{ ca_cert_dir }}/{{ client_name }}.key"

- name: Create client cert using ca cert
  command:
    cmd: >
      {{ openssl_bin_path }} x509 -req -in {{ client_name }}.csr
      -CA {{ ca_name }}.crt -CAkey {{ ca_name }}.key -CAcreateserial
      -out {{ client_name }}.crt
    chdir: "{{ ca_cert_dir }}"
    creates: "{{ ca_cert_dir }}/{{ client_name }}.crt"

- name: Export names of the keys/certs for ctk_loadkey
  set_fact:
    ctk_loadkey_ca_files:
      - "{{ client_name }}.crt"
      - "{{ client_name }}.key"
      - "{{ ca_name }}.crt"

- name: Export names of the keys/certs for AppHSM
  set_fact:
    apphsm_ca_files:
      - "{{ server_name }}.crt"
      - "{{ server_name }}.key"
      - "{{ ca_name }}.crt"
