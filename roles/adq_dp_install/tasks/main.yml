##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- block:
    - name: set_fact for Cilium
      set_fact:
        adq_cilium_deploy: true

    - name: create Intel ADQ Device Plugin directory
      file:
        path: "{{ intel_adq_dp_dir }}"
        state: directory
        mode: '0755'

    - name: clone Intel ADQ Device Plugin repository
      git:
        repo: "{{ intel_adq_dp_git_url }}"
        dest: "{{ (intel_adq_dp_dir, 'adq-k8s-plugins') | path_join }}"
        version: "{{ intel_adq_dp_version }}"

    - name: copy Intel ADQ cluster role
      copy:
        src: adq-cluster-role.yml
        dest: "{{ (intel_adq_dp_dir, 'adq-cluster-role.yml') | path_join }}"
        owner: root
        group: root
        mode: '0644'

    - name: template Intel ADQ files
      template:
        src: "{{ item.src }}"
        dest: "{{ (intel_adq_dp_dir, item.dst) | path_join }}"
        force: yes
        mode: '0644'
      loop:
        - {src: 'adq-cluster-config.yml.j2', dst: 'adq-cluster-config.yml'}
        - {src: 'adq-cluster-role-binding.yml.j2', dst: 'adq-cluster-role-binding.yml'}
        - {src: 'adq-service-account.yml.j2', dst: 'adq-service-account.yml'}
        - {src: 'adq-cni-dp-ds.yml.j2', dst: 'adq-cni-dp-ds.yml'}

    - name: create Intel ADQ cluster config
      command: "kubectl apply -f {{ (intel_adq_dp_dir, 'adq-cluster-config.yml') | path_join }}"
      changed_when: true

    - name: build Intel ADQ Device Plugin images
      command: "podman build --build-arg=BUILD_VERSION={{ intel_adq_dp_version }} -f {{ item.file }} -t {{ item.tag }} ."
      changed_when: true
      args:
        chdir: "{{ (intel_adq_dp_dir, 'adq-k8s-plugins') | path_join }}"
      loop:
        - {file: 'Dockerfile.adqsetup', tag: "{{ registry_local_address }}/adqsetup:{{ intel_adq_dp_version }}"}
        - {file: 'monitoring/Dockerfile.adqexporter', tag: "{{ registry_local_address }}/adqexporter:{{ intel_adq_dp_version }}"}
        - {file: 'Dockerfile', tag: "{{ registry_local_address }}/adq-cni-dp:{{ intel_adq_dp_version }}"}

    - name: push Intel ADQ Device Plugin images
      command: "podman push {{ registry_local_address }}/{{ item }}:{{ intel_adq_dp_version }}"
      changed_when: true
      loop:
        - "adqsetup"
        - "adqexporter"
        - "adq-cni-dp"

    - name: deploy Cilium
      include_role:
        name: cilium

    - name: create Intel ADQ Device Plugin resources
      command: kubectl apply -f ./
      changed_when: true
      args:
        chdir: "{{ intel_adq_dp_dir }}"

    - name: check if ADQ pods are running
      shell: set -o pipefail && kubectl get pods -n kube-system | grep -i adq | awk '{ print $3 }'
      args:
        executable: /bin/bash
      register: adq_pods_status
      retries: 30
      delay: 15
      until:
        - "'Error' not in adq_pods_status.stdout"
        - "'CrashLoopBackOff' not in adq_pods_status.stdout"
        - "'Terminating' not in adq_pods_status.stdout"
        - "'ContainerCreating' not in adq_pods_status.stdout"
        - "'Pending' not in adq_pods_status.stdout"
        - "'Init' not in adq_pods_status.stdout"
      changed_when: false

    - name: restart unmanaged pods
      shell: >-
        set -o pipefail && kubectl get pods --all-namespaces
        -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,HOSTNETWORK:.spec.hostNetwork --no-headers=true
        | grep '<none>' | awk '{print "-n "$1" "$2}' | xargs -L 1 -r kubectl delete pod
      args:
        executable: /bin/bash
      changed_when: true

    - name: check if all pods are running
      shell: set -o pipefail && kubectl get pods -A | awk 'NR != 1 { print $4 }'
      args:
        executable: /bin/bash
      register: cilium_pods_status
      retries: 30
      delay: 15
      until:
        - "'Error' not in cilium_pods_status.stdout"
        - "'CrashLoopBackOff' not in cilium_pods_status.stdout"
        - "'Terminating' not in cilium_pods_status.stdout"
        - "'ContainerCreating' not in cilium_pods_status.stdout"
        - "'Pending' not in cilium_pods_status.stdout"
      changed_when: false
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
