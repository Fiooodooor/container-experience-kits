##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: copy kube-prometheus-stack manifests
  ansible.builtin.copy:
    src: kube-prometheus-stack/
    dest: "{{ kube_prometheus_stack_directory }}"
    owner: root
    group: root
    mode: 0744

- name: copy grafana dashboards manifests
  ansible.builtin.copy:
    src: "dashboards/{{ item.dashboard }}"
    dest: "{{ kube_prometheus_stack_directory }}/{{ item.dashboard }}"
    owner: root
    group: root
    mode: 0744
  with_items:
    - dashboard: telegraf-dashboard.yml
      create: "{{ telegraf_enabled |d(false) }}"
    - dashboard: collectd-dashboard.yml
      create: "{{ collectd_enabled |d(false) }}"
    - dashboard: xpumanager-dashboard.yml
      create: "{{ intel_xpumanager_enabled |d(false) }}"
    - dashboard: kubernetes-mixin-dashboards.yml
      create: true
  when: item.create | default(false) | bool

- name: replace node_exporter version tag
  ansible.builtin.replace:
    path: "{{ kube_prometheus_stack_directory }}/nodeExporter-prometheusRule.yaml"
    regexp: '<node_exporter_version>'
    replace: "{{ node_exporter_version }}"

- name: replace grafana version tag
  ansible.builtin.replace:
    path: "{{ kube_prometheus_stack_directory }}/{{ item.dashboard }}"
    regexp: '<grafana_version>'
    replace: "{{ grafana_version }}"
  with_items:
    - dashboard: telegraf-dashboard.yml
      create: "{{ telegraf_enabled |d(false) }}"
    - dashboard: collectd-dashboard.yml
      create: "{{ collectd_enabled |d(false) }}"
    - dashboard: xpumanager-dashboard.yml
      create: "{{ intel_xpumanager_enabled |d(false) }}"
    - dashboard: kubernetes-mixin-dashboards.yml
      create: true
  when: item.create | default(false) | bool

- name: replace prometheus_stack_version tag
  ansible.builtin.replace:
    path: "{{ item }}"
    regexp: '<prometheus_stack_version>'
    replace: "{{ prometheus_stack_version }}"
  loop: "{{ prometheus_stack_version_files }}"

- name: replace prometheus_operator_version tag
  ansible.builtin.replace:
    path: "{{ item }}"
    regexp: '<prometheus_operator_version>'
    replace: "{{ prometheus_operator_version }}"
  loop: "{{ prometheus_operator_version_files }}"

- name: find template files
  ansible.builtin.find:
    paths: "{{ (role_path, 'templates') | path_join }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns:
      - '^(?!kube-prometheus-stack-certs).*'
  register: template_files
  delegate_to: localhost
  become: false

- name: template kube-prometheus-stack manifests
  ansible.builtin.template:
    src: "{{ item.path }}"
    dest: "{{ kube_prometheus_stack_directory }}/{{ item.path | basename | regex_replace('.j2','') }}"
    owner: root
    group: root
    mode: 0744
  with_items: "{{ template_files.files }}"

- name: template prometheus-srv yamls
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ kube_prometheus_stack_directory }}/{{ item | basename | regex_replace('.j2','') }}"
    owner: root
    group: root
    mode: 0744
  with_fileglob:
    - ../templates/prometheus_srv/*.j2
  when: prometheus_srv_expose | default(false)

- name: find kube-prometheus CRD manifests
  ansible.builtin.find:
    paths: "{{ (kube_prometheus_stack_directory, 'crds') | path_join }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns:
      - '^.*\.y*'
  register: crs_files

- name: install kube-prometheus CRD manifests
  kubernetes.core.k8s:
    state: present
    src: "{{ item.path }}"
  with_items:
    - "{{ crs_files.files }}"
  when:
    - "'0alertmanagerConfigCustomResourceDefinition' not in item.path"

# This CRD is failing with 'kubernetes.core.k8s' ansible module above
# This task is workaround for that failure
- name: install kube-prometheus CRD manifest 0alertmanagerConfigCustomResourceDefinition
  ansible.builtin.command: "kubectl apply -f {{ (kube_prometheus_stack_directory, 'crds', '0alertmanagerConfigCustomResourceDefinition.yaml') | path_join }}"
  changed_when: true

- name: wait for kube-prometheus CRDs to finish installation
  kubernetes.core.k8s_info:
    kind: CustomResourceDefinition
    name: "{{ item }}"
    wait: true
    wait_condition:
      type: "Established"
    wait_timeout: 120
  loop:
    - alertmanagerconfigs.monitoring.coreos.com
    - alertmanagers.monitoring.coreos.com
    - podmonitors.monitoring.coreos.com
    - probes.monitoring.coreos.com
    - prometheuses.monitoring.coreos.com
    - prometheusrules.monitoring.coreos.com
    - servicemonitors.monitoring.coreos.com
    - thanosrulers.monitoring.coreos.com

- name: find kube-prometheus application manifests
  ansible.builtin.find:
    paths: "{{ kube_prometheus_stack_directory }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns:
      - '^.*\.y*'
  register: app_files

- name: install kube-prometheus application manifests
  kubernetes.core.k8s:
    state: present
    src: "{{ item.path }}"
  with_items:
    - "{{ app_files.files }}"
