##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: Remove old records for the same VXLAN IP in ~/.ssh/config
  replace:
    path: "{{ local_login_user_dir }}/.ssh/config"
    regexp: "^Host {{ item.value }}\n  ProxyCommand ssh (.*)$\n"
    replace: ""
  with_items: "{{ vm_vxlan_ips | dict2items }}"
  delegate_to: localhost
  become: false
  when:
    - "vm_cluster_name | default('') | length == 0"

- name: Set vxlan bastion host
  set_fact:
    vxlan_bastion_host: >-
      {% if hostvars[groups['vm_host'][0]]['ip'] is defined %}{{ hostvars[groups['vm_host'][0]]['ip'] }}{% else %}
      {{ hostvars[groups['vm_host'][0]]['ansible_host'] }}{% endif %}

- name: Prepare bastion host configuration for VXLAN in ~/.ssh/config
  blockinfile:
    path: "{{ local_login_user_dir }}/.ssh/config"
    block: |
      Host {{ item.value }}
        ProxyCommand ssh {{ login_user }}@{{ vxlan_bastion_host | trim }} -W %h:%p
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.key }} VXLAN"
    create: yes
    owner: "{{ local_login_user }}"
    group: "{{ local_login_user }}"
    mode: '0644'
  with_items: "{{ vm_vxlan_ips | dict2items }}"
  delegate_to: localhost
  become: false
  when:
    - "vm_cluster_name | default('') | length == 0"

- name: Remove old ECDSA key fingerprint on localhost for VXLAN
  command: ssh-keygen -f "{{ local_login_user_dir }}/.ssh/known_hosts" -R "{{ item.value }}"
  with_items: "{{ vm_vxlan_ips | dict2items }}"
  delegate_to: localhost
  become: false
  register: ssh_keygen_result
  changed_when: '" not found in " not in ssh_keygen_result.stderr'
  when:
    - (not item.key in current_vms.stdout) or
      vm_recreate_existing | default(true)

- name: Store ECDSA key fingerprint on localhost for VXLAN
  command: ssh -o StrictHostKeyChecking=No {{ login_user }}@{{ item.value }} hostname
  with_items: "{{ vm_vxlan_ips | dict2items }}"
  delegate_to: localhost
  become: false
  register: ssh_result
  changed_when: '"Warning: Permanently added " in ssh_result.stderr'
  when:
    - (not item.key in current_vms.stdout) or
      vm_recreate_existing | default(true)
    - "vm_cluster_name | default('') | length == 0"

- name: Store ECDSA key fingerprint on localhost
  command: ssh -o StrictHostKeyChecking=No {{ login_user }}@{{ item.key }} hostname
  with_items: "{{ vm_vxlan_ips | dict2items }}"
  delegate_to: localhost
  become: false
  register: ssh_result
  changed_when: '"Warning: Permanently added " in ssh_result.stderr'
  when:
    - (not item.key in current_vms.stdout) or
      vm_recreate_existing | default(true)
    - "vm_cluster_name | default('') | length > 0"

- name: Update vm inventory file - all
  ini_file:
    dest: "{{ vm_inventory_name }}"
    section: "all"
    option: "{{ item.name }} ansible_host={{ vm_vxlan_ips[item.name] }} ip={{ vm_vxlan_ips[item.name] }} ansible_user={{ login_user }}"
    no_extra_spaces: yes
    allow_no_value: yes
    mode: '0644'
    state: present
    backup: no
  with_items: "{{ vms }}"
  delegate_to: localhost
  become: false
  when:
    - "vm_cluster_name | default('') | length == 0"

- name: Update vm inventory file - all (cluster)
  ini_file:
    dest: "{{ vm_inventory_name }}"
    section: "all"
    option: "{{ item.name }} ansible_host={{ item.name }} ansible_user={{ login_user }}"
    no_extra_spaces: yes
    allow_no_value: yes
    mode: '0644'
    state: present
    backup: no
  with_items: "{{ vms }}"
  delegate_to: localhost
  become: false
  when:
    - "vm_cluster_name | default('') | length > 0"

- name: Update vm inventory file - kube*
  ini_file:
    dest: "{{ vm_inventory_name }}"
    section: "{% if item.0.type == 'ctrl' %}{{ item.1 }}{% elif item.0.type == 'work' %}kube_node{% else %}vms{% endif %}"
    option: "{{ item.0.name }}"
    no_extra_spaces: yes
    allow_no_value: yes
    mode: '0644'
    state: present
    backup: no
  with_nested:
    - "{{ vms }}"
    - ['kube_control_plane', 'etcd']
  delegate_to: localhost
  become: false
