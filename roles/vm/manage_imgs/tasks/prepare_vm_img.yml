##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: install dependencies for Intel tdx
  include_role:
    name: install_dependencies
  when:
    - configure_tdx | default(false)

- name: Check VM status - {{ vm.name }}
  ansible.builtin.command: virsh list --state-running
  register: current_vms
  changed_when: false
  failed_when: false

- name: Block to force selected VMs recreation
  when: vm_recreate_listed_vms | default ([]) | length > 0
  block:
    - name: Prepare grep args - initial value
      ansible.builtin.set_fact:
        vms_to_be_filtered_out: ""

    - name: Prepare grep args
      ansible.builtin.set_fact:
        vms_to_be_filtered_out: "{{ vms_to_be_filtered_out }} -e {{ item }}"
      with_items: "{{ vm_recreate_listed_vms }}"

    - name: Remove VMs to be recreated from current_vms
      ansible.builtin.shell: set -o pipefail && echo "{{ current_vms.stdout }}" | grep -v {{ vms_to_be_filtered_out }}
      args:
        executable: /bin/bash
      register: current_vms_filtered
      changed_when: false
      failed_when: false
      when: vms_to_be_filtered_out | length > 0

- name: Block to keep not running VMs
  when: vm_keep_listed_vms | default([]) | length > 0
  block:
    - name: Check VM status all - {{ vm.name }}
      ansible.builtin.command: virsh list --all
      register: current_vms_all
      changed_when: false
      failed_when: false

    - name: Prepare grep args keep - initial value
      ansible.builtin.set_fact:
        vms_to_be_kept: ""

    - name: Prepare grep args keep
      ansible.builtin.set_fact:
        vms_to_be_kept: "{{ vms_to_be_kept }} -e {{ item }}"
      with_items: "{{ vm_keep_listed_vms }}"

    - name: Filter not running VMs to be kept
      ansible.builtin.shell: set -o pipefail && echo "{{ current_vms_all.stdout }}" | grep {{ vms_to_be_kept }}
      args:
        executable: /bin/bash
      register: current_vms_all
      changed_when: false
      failed_when: false

    - name: Current VMs to be kept
      ansible.builtin.debug:
        msg: "{{ current_vms_all.stdout }}"

- name: Set current_vms fact
  ansible.builtin.set_fact:
    current_vms: "{% if current_vms_filtered.skipped | default(false) %}{{ current_vms.stdout }}{% else %}{{ current_vms_filtered.stdout }}{% endif %}"

- name: Update current_vms with kept VMs
  ansible.builtin.command: echo -e "{{ current_vms }}{% if not current_vms_all.skipped | default(false) %}\n{{ current_vms_all.stdout }}{% endif %}"
  register: current_vms
  failed_when: false
  changed_when: false

- name: Current VMs - after filtering
  ansible.builtin.debug:
    msg: "{{ current_vms.stdout }}"

- name: Handle VMs
  block:
    - name: Make sure user directories exist
      file:
        path: "{{ vm_project_root_dir }}/{{ vm.type }}/{{ vm.name }}"
        state: directory
        mode: 0700
        recurse: yes

    - name: Destroy VMs if changing state
      command: virsh destroy {{ vm.name }}
      changed_when: true
      register: destroy_result
      failed_when: (destroy_result.stderr | length > 0) and
        (('domain is not running' not in destroy_result.stderr) and
        ('failed to get domain' not in destroy_result.stderr))

    - name: Undefine VMs if changing state
      command: virsh undefine {{ vm.name }}
      changed_when: true
      register: undefine_result
      failed_when: (undefine_result.stderr | length > 0) and
        ('failed to get domain' not in undefine_result.stderr)

    - name: Remove VM disk images if changing state
      file:
        path: "{{ vm_project_root_dir }}/{{ vm.type }}/{{ vm.name }}/cek.qcow2"
        state: absent

    - name: Remove VM config images if changing state
      file:
        path: "{{ vm_project_root_dir }}/{{ vm.type }}/{{ vm.name }}/cek.iso"
        state: absent

    - name: Generate cloud-init user-data
      template:
        src: user-data.j2
        dest: "{{ vm_project_root_dir }}/{{ vm.type }}/{{ vm.name }}/user-data"
        mode: 0644

    - name: Generate cloud-init meta-data
      template:
        src: meta-data.j2
        dest: "{{ vm_project_root_dir }}/{{ vm.type }}/{{ vm.name }}/meta-data"
        mode: 0644

    - name: Create disk images for VMs
      command: >
        qemu-img create -f qcow2 -F qcow2 -o backing_file={{ vm_project_root_dir }}/{{ vm_image }}
        {{ vm_project_root_dir }}/{{ vm.type }}/{{ vm.name }}/cek.qcow2 256G
      changed_when: true

    - name: Create config images for VMs
      command: >
        genisoimage -output {{ vm_project_root_dir }}//{{ vm.type }}/{{ vm.name }}/cek.iso -volid cidata -joliet
        -rock {{ vm_project_root_dir }}/{{ vm.type }}/{{ vm.name }}/meta-data {{ vm_project_root_dir }}/{{ vm.type }}/{{ vm.name }}/user-data
      changed_when: true
  when:
    - (not vm.name in current_vms.stdout) or
      vm_recreate_existing | default(true)

- name: Current VM - {{ vm.name }}
  debug:
    msg: "Current VM - {{ vm.name }} was not changed"
  when:
    - (vm.name in current_vms.stdout)
    - not vm_recreate_existing | default(true)

- name: Set current_vms_to_skip for VMs in next play
  set_fact:
    current_vms_to_skip: "{{ current_vms.stdout }}"
  delegate_to: "{{ vm.name }}"
  delegate_facts: True
