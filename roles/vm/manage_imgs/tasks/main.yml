##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: Set login_user fact
  set_fact:
    login_user: "{{ ansible_env.SUDO_USER | default(ansible_env.USER, True) }}"

- name: Set local_login_user fact
  set_fact:
    local_login_user: "{{ lookup('ansible.builtin.env', 'SUDO_USER')|default( lookup('ansible.builtin.env', 'USER'), True) }}"

- name: Get login_user home dir
  ansible.builtin.getent:
    database: passwd
    key: "{{ login_user }}"

- name: Set login_user_dir fact
  set_fact:
    login_user_dir: "{{ ansible_facts.getent_passwd[login_user][4] }}"

- name: Get local_login_user home dir
  ansible.builtin.getent:
    database: passwd
    key: "{{ local_login_user }}"
  delegate_to: localhost
  become: false

- name: Set local_login_user_dir fact
  set_fact:
    local_login_user_dir: "{{ ansible_facts.getent_passwd[local_login_user][4] }}"

- name: Generate VM image vars
  template:
    src: vm_image_vars.yml.j2
    dest: "vm_image_vars.yml"
    mode: 0644
  delegate_to: localhost
  become: false
  when: inventory_hostname == groups['vm_host'][0]

- name: Include vars for VM image
  include_vars: "vm_image_vars.yml"

- name: Generate VM image links vars
  template:
    src: vm_image_links_vars.yml.j2
    dest: "vm_image_links_vars.yml"
    mode: 0644
  delegate_to: localhost
  become: false
  when: inventory_hostname == groups['vm_host'][0]

- name: Include vars for VM image links
  include_vars: "vm_image_links_vars.yml"

- name: Ensure that .ssh directory exist
  file:
    path: "{{ login_user_dir }}/.ssh"
    state: directory
    owner: "{{ login_user }}"
    group: "{{ login_user }}"
    mode: 0700
  delegate_to: "{{ item }}"
  become: false
  loop: "{{ groups['vm_host'] }}"

- name: Generate SSH keypair if not present
  openssh_keypair:
    path: "{{ login_user_dir }}/.ssh/id_rsa"
    owner: "{{ login_user }}"
    group: "{{ login_user }}"
    regenerate: "never"
  delegate_to: "{{ item }}"
  become: false
  loop: "{{ groups['vm_host'] }}"

- name: Ensure that .ssh directory exist on localhost
  file:
    path: "{{ local_login_user_dir }}/.ssh"
    state: directory
    owner: "{{ local_login_user }}"
    group: "{{ local_login_user }}"
    mode: 0700
  delegate_to: localhost
  become: false

- name: Generate SSH keypair if not present on localhost
  openssh_keypair:
    path: "{{ local_login_user_dir }}/.ssh/id_rsa"
    owner: "{{ local_login_user }}"
    group: "{{ local_login_user }}"
    regenerate: "never"
  delegate_to: localhost
  become: false

- name: Fetch SSH public key from VM host
  slurp:
    src: "{{ login_user_dir }}/.ssh/id_rsa.pub"
  register: remote_pub
  delegate_to: "{{ item }}"
  become: false
  loop: "{{ groups['vm_host'] }}"

- name: check if {{ vm_image_destination_file }} is already downloaded
  stat:
    path: "{{ vm_image_destination_file }}"
  register: vm_image_downloaded

- block:
    - name: download vm_image checksums file
      get_url:
        url: "{{ vm_image_checksums }}"
        dest: "{{ vm_project_root_dir }}/{{ vm_image }}.checksums"
        mode: 0440
        force: yes
      register: result_sum
      retries: "{{ number_of_retries | default(5) }}"
      until: result_sum is succeeded
      delay: "{{ retry_delay | default(3) }}"
      environment:
        http_proxy: "{{ http_proxy | default('') }}"
        https_proxy: "{{ https_proxy | default('') }}"

    - name: extract checksum for requested image
      shell: set -o pipefail && cat "{{ vm_project_root_dir }}/{{ vm_image }}.checksums" | grep "{{ vm_image }}" | cut "{{ vm_image_checksum_cut_line }}" -d' '
      args:
        executable: /bin/bash
      register: vm_image_checksum
      changed_when: false

    - name: download vm_image file
      get_url:
        url: "{{ vm_image_url }}"
        dest: "{{ vm_project_root_dir }}/{{ vm_image }}"
        mode: 0440
        checksum: "{{ vm_image_checksum_type }}:{{ vm_image_checksum.stdout }}"
      register: result
      retries: "{{ number_of_retries | default(5) }}"
      until: result is succeeded
      delay: "{{ retry_delay | default(3) }}"
      environment:
        http_proxy: "{{ http_proxy | default('') }}"
        https_proxy: "{{ https_proxy | default('') }}"

  when: not vm_image_downloaded.stat.exists

- name: Register vm_image path
  stat:
    path: "{{ vm_project_root_dir }}/{{ vm_image }}"
  register: img

- name: Check that OS vm_image exists
  fail:
    msg: "Image not found in playbook directory"
  when: not img.stat.exists

- name: Prepare images for each VM
  include_tasks: prepare_vm_img.yml
  loop: "{{ vms }}"
  loop_control:
    loop_var: vm
