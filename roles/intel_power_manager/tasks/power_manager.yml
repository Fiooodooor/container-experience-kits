##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
# workaround to be removed once component will be updated to version, which supports higher golang version
# Required golang version here is 1.17.8
- name: check current golang version
  shell: "set -o pipefail && /usr/local/go/bin/go version|sed -e 's/go version go//g'|cut -d' ' -f1"
  args:
    executable: /bin/bash
  failed_when: false
  changed_when: false
  register: go_version

- name: set intel_power_manager - 'ipm' go version
  set_fact:
    ipm_go_version: 1.17.8

- name: install ipm specific golang version
  block:
    - name: workaround for old golang version needed for IPM
      vars:
        golang_version: "{{ ipm_go_version }}"
        golang_download_checksum: "sha256:980e65a863377e69fd9b67df9d8395fd8e93858e7a24c9f55803421e453f4f99"
        additional_go_version: "go_{{ ipm_go_version }}"
      include_role:
        name: bootstrap/golang_install

    - name: set gopath for ipm go version
      set_fact:
        ipm_go_root_path: "/usr/local/go_{{ ipm_go_version }}/go"
        ipm_go_path: "/root/go_{{ ipm_go_version }}/go"
  when: go_version.stdout > ipm_go_version

- name: set gopath for ipm go version
  set_fact:
    ipm_go_root_path: "/usr/local/go"
    ipm_go_path: "/root/go"
  when: go_version.stdout == ipm_go_version

- name: show remote PATH variable
  command: echo $PATH
  changed_when: false
  register: remote_path

# NOTE(pklimowx): repo must be cloned to the controller and, if we want to build
# images locally, to the first node as well.
- name: clone Intel Kubernetes Power Manager repository
  git:
    repo: "{{ intel_power_manager_git_url }}"
    version: "{{ intel_power_manager_git_ref }}"
    dest: "{{ intel_power_manager_dir }}"
    force: yes
  when:
    - inventory_hostname == groups['kube_control_plane'][0] or
      (inventory_hostname == groups['kube_node'][0] and intel_power_manager.build_image_locally | default(false) | bool)

- name: set facts for Intel Kubernetes Power Manager templates
  set_fact:
    power_operator_image: "{{ registry_local_address }}/intel-power-operator"
    power_operator_image_version: "{{ intel_power_manager_git_ref }}"
    node_agent_image: "{{ registry_local_address }}/intel-power-node-agent"
    node_agent_image_version: "{{ intel_power_manager_git_ref }}"
  when:
    - intel_power_manager.build_image_locally | default(false) | bool

# NOTE(pklimowx): node-agent DS is deployed automatically via Power Manager after providing
# PowerProfile. The yaml file needs to be patched before building image to provide correct source for it.
# Both images depend on intel_power_manager* variable as there is no public image for AppQoS
- name: patch Node Agent DaemonSet yaml
  block:
    - name: use node-agent image from local registry
      lineinfile:
        path: "{{ intel_power_manager_dir }}/build/manifests/power-node-agent-ds.yaml"
        regexp: "^        - image: intel/power-node-agent:{{ intel_power_manager_git_ref }}"
        line: "        - image: {{ node_agent_image }}:{{ node_agent_image_version }}"

    - name: use appqos image from local registry
      lineinfile:
        path: "{{ intel_power_manager_dir }}/build/manifests/power-node-agent-ds.yaml"
        regexp: "^        - image: 'appqos:latest'"
        line: "        - image: {{ app_qos_image }}"
  when:
    - intel_power_manager.build_image_locally | default(false) | bool
    - inventory_hostname == groups['kube_node'][0]

# docker runtime is in use
- name: prepare images for Intel Kubernetes Power Manager
  block:
    - name: build images for Intel Kubernetes Power Manager
      command: docker build -f build/{{ item.file }} -t {{ item.name }}:latest .
      changed_when: true
      args:
        chdir: "{{ intel_power_manager_dir }}"
      with_items:
        - {file: Dockerfile, name: intel-power-operator}
        - {file: Dockerfile.nodeagent, name: intel-power-node-agent}

    - name: tag Intel Kubernetes Power Manager images
      command: docker tag {{ item }}:latest {{ registry_local_address }}/{{ item }}:{{ intel_power_manager_git_ref }}
      changed_when: true
      with_items:
        - intel-power-operator
        - intel-power-node-agent

    - name: push Intel Kubernetes Power Manager images to local registry
      command: docker push {{ registry_local_address }}/{{ item }}:{{ intel_power_manager_git_ref }}
      changed_when: true
      with_items:
        - intel-power-operator
        - intel-power-node-agent
  when:
    - container_runtime == "docker"
    - intel_power_manager.build_image_locally | default(false) | bool
    - inventory_hostname == groups['kube_node'][0]
  environment:
    GOROOT: "{{ ipm_go_root_path }}"
    GOPATH: "{{ ipm_go_path }}"
    PATH: "{{ ipm_go_root_path }}/bin:{{ remote_path.stdout }}"

# crio/containerd runtime is in use
- name: prepare images for Intel Kubernetes Power Manager
  block:
    - name: build and tag images for Intel Kubernetes Power Manager
      command: podman build -f build/{{ item.file }} -t {{ registry_local_address }}/{{ item.name }}:{{ intel_power_manager_git_ref }} .
      changed_when: true
      args:
        chdir: "{{ intel_power_manager_dir }}"
      with_items:
        - {file: Dockerfile, name: intel-power-operator}
        - {file: Dockerfile.nodeagent, name: intel-power-node-agent}

    - name: push Intel Kubernetes Power Manager images to local registry
      command: podman push {{ registry_local_address }}/{{ item }}:{{ intel_power_manager_git_ref }}
      changed_when: true
      with_items:
        - intel-power-operator
        - intel-power-node-agent
  when:
    - container_runtime in ["crio", "containerd"]
    - intel_power_manager.build_image_locally | default(false) | bool
    - inventory_hostname == groups['kube_node'][0]
  environment:
    GOROOT: "{{ ipm_go_root_path }}"
    GOPATH: "{{ ipm_go_path }}"
    PATH: "{{ ipm_go_root_path }}/bin:{{ remote_path.stdout }}"

- name: prepare and deploy Intel Power Manager
  block:
    - name: create Intel Power Manager namespace
      k8s:
        name: "{{ intel_power_manager_namespace }}"
        kind: Namespace
        state: present
        definition:
          metadata:
            labels:
              control-plane: controller-manager

    - name: apply k8s prerequisites
      k8s:
        state: present
        src: "{{ (intel_power_manager_dir, 'config', 'rbac', 'rbac.yaml') | path_join }}"

    - name: create and install Intel Power Manager CRDs
      make:
        chdir: "{{ intel_power_manager_dir }}"

    - name: populate Intel Kubernetes Power Manager Controller Manager template
      template:
        src: controller_manager.yml.j2
        dest: "{{ (intel_power_manager_dir, 'controller_manager.yml') | path_join }}"
        force: yes
        mode: preserve

    - name: deploy Intel Kubernetes Power Manager Controller Manager
      k8s:
        state: present
        src: "{{ (intel_power_manager_dir, 'controller_manager.yml') | path_join }}"

    - name: populate Power Config template
      template:
        src: power_config.yml.j2
        dest: "{{ (intel_power_manager_dir, 'power_config.yml') | path_join }}"
        force: yes
        mode: preserve

    - name: apply Power Config
      k8s:
        state: present
        src: "{{ (intel_power_manager_dir, 'power_config.yml') | path_join }}"
  when: inventory_hostname == groups['kube_control_plane'][0]
  environment:
    GOROOT: "{{ ipm_go_root_path }}"
    GOPATH: "{{ ipm_go_path }}"
    PATH: "{{ ipm_go_root_path }}/bin:{{ remote_path.stdout }}"
