##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: create dest directory on node
  file:
    path: "{{ containerd_archive.dest | dirname }}"
    owner: "{{ containerd_archive.owner }}"
    mode: 0755
    state: directory
    recurse: yes

- name: download containerd archive
  get_url:
    url: "{{ containerd_archive.url }}"
    dest: "{{ containerd_archive.dest }}"
    owner: "{{ containerd_archive.owner }}"
    mode: "{{ containerd_archive.mode }}"
    checksum: "{{ 'sha256:' + containerd_archive.sha256 }}"
  delegate_to: "{{ inventory_hostname }}"
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: 5
  no_log: true

- name: unpack containerd archive
  unarchive:
    src: "{{ containerd_archive.dest }}"
    dest: "{{ containerd_bin_dir }}"
    mode: 0755
    remote_src: yes
    extra_opts:
      - --strip-components=1
  notify: restart containerd

- name: ensure containerd directories exist
  file:
    dest: "{{ item }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  with_items:
    - "{{ containerd_systemd_dir }}"
    - "{{ containerd_cfg_dir }}"
    - "{{ containerd_storage_dir }}"
    - "{{ containerd_state_dir }}"

- name: generate systemd service for containerd
  template:
    src: containerd.service.j2
    dest: /etc/systemd/system/containerd.service
    mode: 0644
  notify: restart containerd

- name: write containerd proxy drop-in
  template:
    src: http_proxy.conf.j2
    dest: /etc/systemd/system/containerd.service.d/http-proxy.conf
    mode: 0644
  notify: restart containerd
  when: http_proxy is defined or https_proxy is defined

- name: write base_runtime_specs
  copy:
    content: "{{ item.value }}"
    dest: "{{ containerd_cfg_dir }}/{{ item.key }}"
    owner: "root"
    mode: 0644
  with_dict: "{{ containerd_base_runtime_specs | default({}) }}"
  notify: restart containerd

- name: copy containerd config file
  template:
    src: config.toml.j2
    dest: "{{ containerd_cfg_dir }}/config.toml"
    owner: "root"
    mode: 0640
  notify: restart containerd

- name: flush handlers
  meta: flush_handlers

- name: ensure containerd is started and enabled
  service:
    name: containerd
    enabled: yes
    state: started

- name: install podman
  include_role:
    name: container_engine/podman # noqa role-name[path] - role in container_engine
