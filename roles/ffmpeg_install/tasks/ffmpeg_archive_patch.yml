##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: create patch directory
  ansible.builtin.file:
    path: '{{ ffmpeg_patch_path }}'
    state: directory
    mode: 0755

- name: download patch archive
  ansible.builtin.get_url:
    dest: '{{ ffmpeg_path }}'
    sha256sum: '{{ patch_item.sha256 }}'
    url: "{{ patch_item.url }}"
    mode: '0640'
  register: patch_download
  retries: "{{ number_of_retries | default(5) }}"
  until: patch_download is succeeded
  delay: "{{ retry_delay | default(3) }}"

- name: download and extract FFmpeg patches archive file to machine
  ansible.builtin.unarchive:
    src: '{{ patch_download.dest }}'
    dest: '{{ ffmpeg_patch_path }}'
    remote_src: true
    list_files: true
  register: tar_out

- name: get patch files
  block:
    - name: find all patch files
      ansible.builtin.find:
        paths: "{{ (ffmpeg_patch_path, tar_out.files[0], patch_item.subdirectory) | path_join }}"
      register: patch_file_list
    - name: sort patch files by Name
      set_fact:
        files_list: "{{ (patch_file_list.files | map(attribute='path') | list | sort) }}"

- name: patch FFmpeg sources
  ansible.posix.patch:
    src: "{{ item }}"
    basedir: "{{ (ffmpeg_path, 'ffmpeg_src') | path_join }}"
    remote_src: true
    strip: 1
  with_items: "{{ files_list }}"
  when:
    - patch_item.apply_all_patches

- name: patch FFmpeg sources
  ansible.posix.patch:
    src: "{{ (ffmpeg_patch_path, tar_out.files[0], patch_item.subdirectory, item) | path_join }}"
    basedir: "{{ (ffmpeg_path, 'ffmpeg_src') | path_join }}"
    remote_src: true
    strip: 1
  with_items: "{{ patch_item.patches_to_apply }}"
  when:
    - ((patch_item.apply_all_patches is not defined) or
      (not patch_item.apply_all_patches)) and
      (patch_item.patches_to_apply is defined)

- name: remove patch directory
  ansible.builtin.file:
    path: '{{ ffmpeg_patch_path }}'
    state: absent
