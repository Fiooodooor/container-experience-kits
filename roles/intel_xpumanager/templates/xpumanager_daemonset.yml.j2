---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: intel-xpumanager
  name: intel-xpumanager
  namespace: "{{ xpumanager_namespace }}"
spec:
  selector:
    matchLabels:
      app: intel-xpumanager
  template:
    metadata:
      labels:
        app: intel-xpumanager
    spec:
      # hostNetwork should be set true for getting xelink metrics
      hostNetwork: true
      containers:
      - name: xpumd
        image: "{{ xpumanager_image }}:{{ xpumanager_version }}"
        imagePullPolicy: IfNotPresent
        command: [ "/usr/bin/xpumd" ]
        env:
        - name: SPDLOG_LEVEL
          value: info
        - name: XPUM_REST_NO_TLS
          value: "1"
        - name: XPUM_EXPORTER_NO_AUTH
          value: "1"
        - name: XPUM_EXPORTER_ONLY
          value: "1"
        - name: XPUM_METRICS
          value: 0-38
        resources:
          limits:
            gpu.intel.com/i915_monitoring: 1
        securityContext:
          privileged: true
          readOnlyRootFilesystem: true
          runAsUser: 0
          capabilities:
            drop: [ "ALL" ]
            add:  [ "SYS_ADMIN", "SYS_RAWIO" ]
        volumeMounts:
          # for getting pod resources
        - mountPath: /var/lib/kubelet/pod-resources
          name: kubeletpodres
          # for PCIe read/write data collection
        - mountPath: /pcm/sys/firmware/acpi/tables/MCFG:ro
          name: mcfg
          # for PCIe read/write data collection
        - mountPath: /pcm/proc/bus/pci/
          name: pci
          # for PCIe read/write data collection
        - mountPath: /pcm/proc/sys/kernel/nmi_watchdog
          name: nmiwatchdog
        - name: sockdir
          mountPath: /tmp
      - name: python-exporter
        # - socket location for "xpumd" communication
        # - GPU device file names for "dev_file" label
        volumeMounts:
        - name: sockdir
          mountPath: /tmp
        - name: devdri
          mountPath: /dev/dri
          readOnly: true
        imagePullPolicy: IfNotPresent
        image: "{{ xpumanager_image }}:{{ xpumanager_version }}"
        # needs same user as "xpumd" to be able to access its socket
        securityContext:
          privileged: true
          readOnlyRootFilesystem: true
          runAsUser: 0
          capabilities:
            drop: [ "ALL" ]
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: XPUM_EXPORTER_NO_AUTH
            value: "1"
          # Run only Prometheus exporter, not rest XPUM
          - name: XPUM_EXPORTER_ONLY
            value: "1"
        # so that Gunicorn finds the Python files
        workingDir: /usr/lib/xpum/rest
        # There should be only single outstanding Prometheus request
        # being handled at the time + manual debugging calls as this
        # is cluster internal, so it does not need to scale as much
        # as Gunicorn defaults do.  For all settings, see:
        #   https://docs.gunicorn.org/en/stable/settings.html
        command: [
          "gunicorn",
          "--bind", "127.0.0.1:29999",
          "--worker-connections", "64",
          "--worker-class", "gthread",
          "--workers", "1",
          "--threads", "4",
          "xpum_rest_main:main()"
        ]
        startupProbe:
          httpGet:
            host: 127.0.0.1
            path: /metrics
            port: 29999
          failureThreshold: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            path: /healtz
            port: 29999
          initialDelaySeconds: 60
          periodSeconds: 10
      - name: rbac-proxy
        image: "{{ kube_rbac_proxy_image_repo }}:{{ kube_rbac_proxy_image_tag }}"
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: ssl
            mountPath: "{{ rbac_proxy_ssl_mount_path }}"
            readOnly: true
        ports:
          - containerPort: 8443
            name: metrics
            protocol: TCP
        args:
          - "--tls-cert-file={{ rbac_proxy_ssl_mount_path }}/{{ rbac_proxy_ssl_secret_name }}.cert"
          - "--tls-private-key-file={{ rbac_proxy_ssl_mount_path }}/{{ rbac_proxy_ssl_secret_name }}.key"
          - "--tls-cipher-suites={{ kube_rbac_proxy_tls_ciphers }}"
          - "--secure-listen-address=0.0.0.0:8443"
          - "--upstream=http://127.0.0.1:29999/"
      nodeSelector:
        intel.feature.node.kubernetes.io/gpu: "true"
      restartPolicy: Always
      volumes:
      - hostPath:
          path: /var/lib/kubelet/pod-resources
          type: ""
        name: kubeletpodres
      - hostPath:
          path: /sys/firmware/acpi/tables/MCFG
          type: ""
        name: mcfg
      - hostPath:
          path: /proc/bus/pci/
          type: ""
        name: pci
      - hostPath:
          path: /proc/sys/kernel/nmi_watchdog
          type: ""
        name: nmiwatchdog
      - emptyDir:
          medium: Memory
        name: sockdir
      - hostPath:
          path: /dev/dri
        name: devdri
      - name: ssl
        secret:
          secretName: "{{ rbac_proxy_ssl_secret_name }}"
