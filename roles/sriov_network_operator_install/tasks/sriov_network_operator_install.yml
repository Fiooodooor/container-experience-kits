##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: delete sriov-network-operator deployment
  command: "helm uninstall {{ sriov_network_operator_helm_release_name }} -n {{ sriov_network_operator_namespace }}"
  failed_when: false
  register: helm_result
  changed_when: "helm_result.rc == 0"
  when: inventory_hostname == groups['kube_control_plane'][0]

- name: Create sriov-network-operator charts directory if does not exist
  file:
    path: "{{ sriov_network_charts_dir }}"
    state: directory
    owner: root
    mode: 0755

- name: copy charts to charts directory
  copy:
    src: "{{ (role_path, 'charts', 'sriov-network-operator') | path_join }}/"
    dest: "{{ sriov_network_charts_dir }}"
    owner: root
    group: root
    mode: "0755"

- name: add correct appVersion to sriov-network-operator Chart.yml
  replace:
    path: "{{ (sriov_network_charts_dir, 'Chart.yaml') | path_join }}"
    regexp: '^appVersion: (.*)$'
    replace: 'appVersion: "{{ sriov_network_operator_version }}"'

- name: populate sriov-network-operator chart values template and push to controller node
  template:
    src: "values.yml.j2"
    dest: "{{ (sriov_network_charts_dir, 'values.yaml') | path_join }}"
    force: true
    mode: preserve
  changed_when: true

- name: label configured nodes with node-role.kubernetes.io/worker= label
  shell: "set -o pipefail &&  kubectl label nodes {{ hostvars[item]['ansible_hostname'] }} node-role.kubernetes.io/worker= --overwrite"
  args:
    executable: /bin/bash
  changed_when: true
  when:
    - hostvars[item]['dataplane_interfaces'] | default({}) | length > 0
  loop: "{{ groups['kube_node'] }}"

- name: deploy sriov-network-operator
  command: |
    helm upgrade \
    --install {{ sriov_network_operator_helm_release_name }} \
    --create-namespace \
    --wait \
    --namespace {{ sriov_network_operator_namespace }} ./
  args:
    chdir: "{{ sriov_network_charts_dir }}"
  changed_when: true

- name: wait for sriov-network-operator deployment to be ready
  k8s_info:
    kind: Deployment
    name: sriov-network-operator
    namespace: "{{ sriov_network_operator_namespace }}"
    wait: yes
    wait_timeout: 240
    wait_condition:
      reason: MinimumReplicasAvailable
      type: Available

- name: wait for sriov-network-config-daemon to be ready
  k8s_info:
    kind: DaemonSet
    name: sriov-network-config-daemon
    namespace: "{{ sriov_network_operator_namespace }}"
  register: ds_status
  retries: 30
  delay: 10
  until: |
    ds_status.failed or
    (
      ds_status.resources | length > 0 and
      ds_status.resources[0].status.numberReady > 0
    )

- name: wait for SriovNetworkNodeState CR to be created and sync completed
  k8s_info:
    kind: SriovNetworkNodeState
    name: "{{ hostvars[item]['ansible_hostname'] }}"
    namespace: "{{ sriov_network_operator_namespace }}"
  register: cr_status
  retries: 30
  delay: 10
  until: |
    cr_status.failed or
    (
      cr_status.resources | length > 0 and
      cr_status.resources[0].status.syncStatus is defined and
      cr_status.resources[0].status.syncStatus == "Succeeded"
    )
  loop: "{{ groups['kube_node'] }}"
