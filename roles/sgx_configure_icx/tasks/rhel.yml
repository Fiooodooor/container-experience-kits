##
##   Copyright (c) 2020-2021 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: install dependencies
  include_role:
    name: install_dependencies

- name: check CPU/BIOS is enabled for SGX
  shell:
    cmd: cpuid | grep -i sgx | grep -v ENCL
  register: cpuid_output
  failed_when: '"false" in cpuid_output.stdout'
  changed_when: false

- name: download DCAP drivers
  get_url:
    url: "{{ dcap_driver_url_rhel }}"
    dest: "/usr/src/"
    mode: u=rwx,g=rx,o=rx
    checksum: "{{ dcap_driver_checksum_rhel }}"
  when: ansible_distribution == "RedHat"

- name: check if sgx-{{ dcap_driver_series_rhel }} folder is present
  stat:
    path: "{{ sgx_folder_check_rhel }}"
  register: folder_check
  when: ansible_distribution == "RedHat"
  changed_when: true

- debug:
    msg: "sgx-{{ dcap_driver_series_rhel }} is already installed because folder exists, re-installation skipped as it can cause kernel module load issues"
  when:
    - ansible_distribution == "RedHat"
    - folder_check.stat.exists
  changed_when: true

- name: install DCAP driver
# noqa 305 - shell is used intentionally here
  shell: "./{{ dcap_driver_version_rhel }}"
  args:
    chdir: "/usr/src"
    executable: /bin/bash
  register: dcap_output_rhel
  failed_when: '"Installation is successful!" not in dcap_output_rhel.stdout'
  changed_when: '"Installation is successful!" in dcap_output_rhel.stdout'
  when:
    - ansible_distribution == "RedHat"
    - not folder_check.stat.exists

- name: confirm DCAP driver module is installed
  shell: "set -o pipefail && lsmod | grep sgx"
  args:
    chdir: "/usr/src"
    executable: /bin/bash
  register: lsmod_output
  failed_when: '"intel_sgx" not in lsmod_output.stdout'
  changed_when: false

- debug:
   var: lsmod_output.stdout_lines

- name: download SGX RPM local repository
  get_url:
    url: "{{ sgx_rpm_local_repo_url_rhel }}"
    dest: "/usr/src/"
    mode: u=rwx,g=rx,o=rx
    checksum: "{{ sgx_rpm_local_repo_checksum_rhel }}"

- name: ensure SGX RPM directory exists
  file:
    path: "{{ sgx_rpm_directory }}"
    state: directory
    mode: u=rwx,g=rx,o=rx

- name: unpack SGX RPM local repository
  unarchive:
    src: "/usr/src/{{ sgx_rpm_local_repo_version_rhel }}"
    dest: "{{ sgx_rpm_directory }}"
    extra_opts: "--strip-components=1"
    mode: u=rwx,g=rx,o=rx
    remote_src: yes
  when: ansible_distribution == "RedHat"

- name: add SGX RPM local repository
  command: "yum-config-manager --add-repo={{ sgx_rpm_directory }}"
  when: ansible_distribution == "RedHat"

- name: disable gpg check in local sgx repo
  lineinfile:
    dest: "/etc/yum.repos.d/usr_src_sgx_rpm_local_repo.repo"
    insertafter: 'EOF'
    line: 'gpgcheck=0'
    mode: '0644'
  when: ansible_distribution == "RedHat"

- name: install sgx platform sw
  package:
    disable_gpg_check: yes
    name:
      - libsgx-launch
      - libsgx-urts
      - libsgx-epid
      - libsgx-urts
      - libsgx-quote-ex
      - libsgx-enclave-common
      - libsgx-uae-service
      - sgx-aesm-service
      - libsgx-dcap-ql
    state: present
  when: ansible_distribution == "RedHat"

- name: start aesmd service, if not started
  service:
    state: started
    name: aesmd

- name: get aesmd service facts
  service_facts:
  register: service_info
  when: ansible_distribution == "RedHat"

- debug:
    var: service_info.ansible_facts.services['aesmd.service'].state
  failed_when: "'running' not in service_info.ansible_facts.services['aesmd.service'].state"
  when: ansible_distribution == "RedHat"

- name: download sgx sdk
  get_url:
    url: "{{ sgx_sdk_url_rhel }}"
    dest: "/usr/src/"
    mode: u=rwx,g=rx,o=rx
    checksum: "{{ sgx_sdk_checksum_rhel }}"
  when: ansible_distribution == "RedHat"

- name: install sgx sdk
  shell: "set -o pipefail && echo 'yes' | ./{{ sgx_sdk_version_rhel }}"
  args:
    chdir: "/usr/src"
    executable: /bin/bash
  register: sdk_output
  failed_when: '"Installation is successful!" not in sdk_output.stdout'
  changed_when: '"Installation is successful!" in sdk_output.stdout'
  when: ansible_distribution == "RedHat"

- name: setup environment & make code samples in hardware mode to ensure package works well
  shell: >
    source /usr/src/sgxsdk/environment &&
    make
  args:
    chdir: "/usr/src/sgxsdk/SampleCode/LocalAttestation"
    executable: /bin/bash
  register: make_confirm
  failed_when: '"The project has been built in hardware debug mode." not in make_confirm.stdout'
  changed_when: '"The project has been built in hardware debug mode." in make_confirm.stdout'

- name: ensure that sgx driver / psw is installed in hardware mode with code samples
  command: ./app
  args:
    chdir: /usr/src/sgxsdk/SampleCode/LocalAttestation/bin
  register: psw_confirm
  changed_when: '"Succeed" in psw_confirm.stdout'

- debug:
    var: psw_confirm.stdout_lines
  when: '"Succeed" in psw_confirm.stdout'
