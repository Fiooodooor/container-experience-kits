##
##   Copyright (c) 2020-2021 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: install dependencies
  include_role:
    name: install_dependencies

- name: Set SGX versions for KMRA
  include_role:
    name: KMRA/set_kmra_sgx_versions
  when: kmra_use_custom_package_versions is defined and kmra_use_custom_package_versions

- name: check CPU/BIOS is enabled for SGX
  shell:
    cmd: cpuid | grep -i sgx | grep -v ENCL
  register: cpuid_output
  failed_when: '"false" in cpuid_output.stdout'
  changed_when: false

- name: create configuration directory if it does not exist
  file:
    path: "{{ sgx_config_dir }}"
    state: directory
    mode: '0700'
  become: yes

- name: download DCAP drivers on Ubuntu <= 18.04.4
  get_url:
    url: "{{ dcap_driver_url_ubuntu_18 }}"
    dest: "{{ sgx_config_dir }}"
    mode: u=rwx,g=rx,o=rx
    checksum: "{{ dcap_driver_checksum_ubuntu_18 }}"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version <= '18.04.4'

- name: check if sgx-{{ dcap_driver_series_ubuntu_18 }} folder present on Ubuntu <= 18.04.4
  stat:
    path: "{{ sgx_folder_check_ubuntu_18 }}"
  register: folder_check
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version <= '18.04.4'
  changed_when: true

- debug:
    msg: "sgx-{{ dcap_driver_series_ubuntu_18 }} is already installed because folder exists, re-installation skipped as it can cause kernel module load issues"
  when:
    - ansible_distribution == "Ubuntu" and ansible_distribution_version <= '18.04.4'
    - folder_check.stat.exists
  changed_when: true

- name: install DCAP driver on Ubuntu <= 18.04.4
# noqa 305 - shell is used intentionally here
  shell: "./{{ dcap_driver_version_ubuntu_18 }}"
  args:
    chdir: "{{ sgx_config_dir }}"
    executable: /bin/bash
  register: dcap_output_ubuntu_18
  failed_when: '"Installation is successful!" not in dcap_output_ubuntu_18.stdout'
  changed_when: '"Installation is successful!" in dcap_output_ubuntu_18.stdout'
  when:
    - ansible_distribution == "Ubuntu" and ansible_distribution_version <= '18.04.4'
    - not folder_check.stat.exists

- name: download DCAP drivers on Ubuntu >= 20.04
  get_url:
    url: "{{ dcap_driver_url_ubuntu_20 }}"
    dest: "{{ sgx_config_dir }}"
    mode: u=rwx,g=rx,o=rx
    checksum: "{{ dcap_driver_checksum_ubuntu_20 }}"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version >= '20.04'

- name: check if sgx-{{ dcap_driver_series_ubuntu_20 }} folder present on Ubuntu >= 20.04
  stat:
    path: "{{ sgx_folder_check_ubuntu_20 }}"
  register: folder_re_check
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version >= '20.04'
  changed_when: true

- debug:
    msg: "sgx-{{ dcap_driver_series_ubuntu_20 }} is already installed because folder exists, re-installation skipped as it can cause kernel module load issues"
  when:
    - ansible_distribution == "Ubuntu" and ansible_distribution_version >= '20.04'
    - folder_re_check.stat.exists
  changed_when: true

- name: install DCAP driver on Ubuntu >= 20.04
# noqa 305 - shell is used intentionally here
  shell: "./{{ dcap_driver_version_ubuntu_20 }}"
  args:
    chdir: "{{ sgx_config_dir }}"
    executable: /bin/bash
  register: dcap_output_ubuntu_20
  failed_when: '"Installation is successful!" not in dcap_output_ubuntu_20.stdout'
  changed_when: '"Installation is successful!" in dcap_output_ubuntu_20.stdout'
  when:
    - ansible_distribution == "Ubuntu" and ansible_distribution_version >= '20.04'
    - not folder_re_check.stat.exists

- name: confirm DCAP driver module installed
  shell: "set -o pipefail && lsmod | grep sgx"
  args:
    chdir: "{{ sgx_config_dir }}"
    executable: /bin/bash
  register: lsmod_output
  failed_when: '"intel_sgx" not in lsmod_output.stdout'
  changed_when: false

- name: Load SGX module (DCAP)
  modprobe:
    name: intel_sgx
    state: present

- debug:
   var: lsmod_output.stdout_lines

- name: add {{ sgx_apt_source_list }} repo key
  apt_key:
    url: "{{ sgx_apt_repo_key }}"
  when: ansible_distribution == "Ubuntu"

- name: add sgx apt repository
  apt_repository:
    repo: "deb {{ sgx_apt_repo_url }} {{ ansible_distribution_release }} main"
    filename: "{{ sgx_apt_source_list }}"
  when: ansible_distribution == "Ubuntu"

- name: install sgx platform sw
  apt:
    name:
      - libsgx-launch=2.13.100.4-{{ ansible_distribution_release }}1
      - libsgx-urts=2.13.100.4-{{ ansible_distribution_release }}1
      - libsgx-epid=2.13.100.4-{{ ansible_distribution_release }}1
      - libsgx-urts=2.13.100.4-{{ ansible_distribution_release }}1
      - libsgx-quote-ex=2.13.100.4-{{ ansible_distribution_release }}1
      - libsgx-enclave-common=2.13.100.4-{{ ansible_distribution_release }}1
      - libsgx-uae-service=2.13.100.4-{{ ansible_distribution_release }}1
      - sgx-aesm-service=2.13.100.4-{{ ansible_distribution_release }}1
      - libsgx-dcap-ql=1.10.100.4-{{ ansible_distribution_release }}1
      - libsgx-ae-qe3=1.10.100.4-{{ ansible_distribution_release }}1
      - libsgx-ae-qve=1.10.100.4-{{ ansible_distribution_release }}1
      - libsgx-qe3-logic=1.10.100.4-{{ ansible_distribution_release }}1
      - libsgx-pce-logic=1.10.100.4-{{ ansible_distribution_release }}1
      - libsgx-dcap-ql-dev=1.10.100.4-{{ ansible_distribution_release }}1
      - libsgx-dcap-default-qpl=1.10.100.4-{{ ansible_distribution_release }}1
      - libsgx-dcap-default-qpl-dev=1.10.100.4-{{ ansible_distribution_release }}1
      - libsgx-dcap-quote-verify=1.10.100.4-{{ ansible_distribution_release }}1
      - libsgx-dcap-quote-verify-dev=1.10.100.4-{{ ansible_distribution_release }}1
  when:
    - ansible_distribution == "Ubuntu"
    - kmra_use_custom_package_versions is not defined

- name: Install DCAP and enclave runtime packages from 01.org
  apt:
    deb: '{{ sgx_dcap_1804_url_begin }}{{ item }}'
  with_items:
    - '{{ libsgx_aesm_service_url }}'
    - '{{ libsgx_common_url }}'
    - '{{ libsgx_epid_url }}'
    - '{{ libsgx_urts_url }}'
    - '{{ libsgx_ae_pce_url }}'
    - '{{ libsgx_headers_url }}'
    - '{{ libsgx_ae_qe3_url }}'
    - '{{ libsgx_ae_qve_url }}'
    - '{{ libsgx_qe3_logic_url }}'
    - '{{ libsgx_pce_logic_url }}'
    - '{{ libsgx_dcap_quote_verify_url }}'
    - '{{ libsgx_dcap_quote_verify_dev_url }}'
    - '{{ dcap_ql_url }}'
    - '{{ dcap_ql_dev_url }}'
    - '{{ dcap_default_qpl_url }}'
    - '{{ dcap_default_qpl_dev_url }}'
  when:
    - kmra_use_custom_package_versions is defined and kmra_use_custom_package_versions
    - ansible_distribution == "Ubuntu" and ansible_distribution_version == '18.04.4'

- name: Install DCAP and enclave runtime packages from 01.org
  apt:
    deb: '{{ sgx_dcap_2004_url_begin }}{{ item }}'
  with_items:
    - '{{ libsgx_aesm_service_url }}'
    - '{{ libsgx_common_url }}'
    - '{{ libsgx_epid_url }}'
    - '{{ libsgx_urts_url }}'
    - '{{ libsgx_ae_pce_url }}'
    - '{{ libsgx_headers_url }}'
    - '{{ libsgx_ae_qe3_url }}'
    - '{{ libsgx_ae_qve_url }}'
    - '{{ libsgx_qe3_logic_url }}'
    - '{{ libsgx_pce_logic_url }}'
    - '{{ libsgx_dcap_quote_verify_url }}'
    - '{{ libsgx_dcap_quote_verify_dev_url }}'
    - '{{ dcap_ql_url }}'
    - '{{ dcap_ql_dev_url }}'
    - '{{ dcap_default_qpl_url }}'
    - '{{ dcap_default_qpl_dev_url }}'
  when:
    - kmra_use_custom_package_versions is defined and kmra_use_custom_package_versions
    - ansible_distribution == "Ubuntu" and ansible_distribution_version == '20.04'

- name: get aesmd service facts
  service_facts:
  register: service_info
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version <= '18.04.4'

- debug:
    var: service_info.ansible_facts.services['aesmd.service'].state
  failed_when: "'running' not in service_info.ansible_facts.services['aesmd.service'].state"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version <= '18.04.4'

# ansible_facts.services is not supported currently on Ubuntu 20.04, once sorted will remove when conditions and merge code as one task.
- name: check status of aesmd service after started on Ubuntu >= 20.04
  command: systemctl status aesmd.service
  args:
    warn: false
  register: aesmd_enabled
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version >= '20.04'
  changed_when: true

- debug:
    var: aesmd_enabled.stdout_lines
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version >= '20.04'

- name: download sgx sdk on Ubuntu <= 18.04.4
  get_url:
    url: "{{ sgx_sdk_url_ubuntu_18 }}"
    dest: "{{ sgx_config_dir }}"
    mode: u=rwx,g=rx,o=rx
    checksum: "{{ sgx_sdk_checksum_ubuntu_18 }}"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version <= '18.04.4'

- name: install sgx sdk on Ubuntu <= 18.04.4
  shell: "set -o pipefail && echo 'yes' | ./{{ sgx_sdk_version_ubuntu_18 }}"
  args:
    chdir: "{{ sgx_config_dir }}"
    executable: /bin/bash
  register: sdk_output
  failed_when: '"Installation is successful!" not in sdk_output.stdout'
  changed_when: '"Installation is successful!" in sdk_output.stdout'
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version <= '18.04.4'

- name: download sgx sdk on Ubuntu >= 20.04
  get_url:
    url: "{{ sgx_sdk_url_ubuntu_20 }}"
    dest: "{{ sgx_config_dir }}"
    mode: u=rwx,g=rx,o=rx
    checksum: "{{ sgx_sdk_checksum_ubuntu_20 }}"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version >= '20.04'

- name: install sgx sdk on Ubuntu >= 20.04
  shell: "set -o pipefail && echo 'yes' | ./{{ sgx_sdk_version_ubuntu_20 }}"
  args:
    chdir: "{{ sgx_config_dir }}"
    executable: /bin/bash
  register: sdk_output
  failed_when: '"Installation is successful!" not in sdk_output.stdout'
  changed_when: '"Installation is successful!" in sdk_output.stdout'
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version >= '20.04'

- name: setup environment & make code samples in hardware mode to ensure package works well
  shell: >
    source {{ sgx_config_dir }}/sgxsdk/environment &&
    make
  args:
    chdir: "{{ sgx_config_dir }}/sgxsdk/SampleCode/LocalAttestation"
    executable: /bin/bash
  register: make_confirm
  failed_when: '"The project has been built in hardware debug mode." not in make_confirm.stdout'
  changed_when: '"The project has been built in hardware debug mode." in make_confirm.stdout'

- name: Ensure that sgx driver / psw installed in hardware mode with code samples
  command: ./app
  args:
    chdir: "{{ sgx_config_dir }}/sgxsdk/SampleCode/LocalAttestation/bin"
  register: psw_confirm
  changed_when: '"Succeed" in psw_confirm.stdout'

- debug:
    var: psw_confirm.stdout_lines
  when: '"Succeed" in psw_confirm.stdout'
