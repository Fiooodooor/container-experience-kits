##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: Create Intel Ethernet Operator namespace
  kubernetes.core.k8s:
    name: "{{ intel_ethernet_operator_namespace }}"
    kind: Namespace
    state: present

- name: Create IEO templates directory
  ansible.builtin.file:
    state: directory
    path: "{{ intel_ethernet_operator_files_dir }}"
    mode: '0750'

- name: Create Intel Ethernet Operator Catalog from source
  when: intel_ethernet_operator_local_build | default(false)
  block:
    - name: Clone Intel Ethernet Operator repository
      ansible.builtin.git:
        repo: "{{ intel_ethernet_operator_git }}"
        version: "{{ intel_ethernet_operator_git_ref }}"
        dest: "{{ intel_ethernet_operator_dir }}"
        force: true

    - name: Get GOPATH
      ansible.builtin.command: go env GOPATH
      register: gopath
      changed_when: false

    - name: Build Intel Ethernet Operator
      vars:
        # in case of RHEL 9.2 & podman, SYS_CHROOT is missing from default caps.
        # no need to limit only to RHEL OS, no impact to Ubuntu
        podman_build_args: "--cap-add SYS_CHROOT"
      community.general.make:
        target: "{{ item }}"
        chdir: "{{ intel_ethernet_operator_dir }}"
        params:
          VERSION: "{{ intel_ethernet_operator_build_version }}"
          IMAGE_REGISTRY: "{{ registry_local_address }}"
          IMGTOOL: "{{ 'docker' if container_runtime == 'docker' else 'podman' }}"
          TLS_VERIFY: "{{ intel_ethernet_operator_make_tls }}"
          TARGET_PLATFORM: "{{ intel_ethernet_operator_target_platform }}"
          UFT_IMAGE: "{{ uft_image }}:{{ uft_image_ver }}"
          DOCKERARGS: "{{ podman_build_args if container_runtime in ['crio', 'containerd'] else omit }}"
      register: ieo_build_status
      retries: 5
      delay: 120
      until:
        - "'Github rate-limiter failed the request.' not in ieo_build_status.stdout"
      environment:
        PATH: "{{ gopath.stdout }}/bin:/usr/local/go/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      loop:
        - build_all
        - push_all
        - catalog-build
        - catalog-push

    - name: Set local IEO catalog name
      ansible.builtin.set_fact:
        ieo_catalog_name: local-ieo-catalog

    - name: Template Catalog resource to target machine
      ansible.builtin.template:
        src: "catalog.yaml.j2"
        force: yes
        dest: "{{ (intel_ethernet_operator_files_dir, 'catalog.yaml') | path_join }}"
        mode: '0640'

    - name: Deploy local IEO catalog
      kubernetes.core.k8s:
        state: present
        template: "catalog.yaml.j2"

    - name: Wait for Catalog source to be running
      kubernetes.core.k8s_info:
        api_version: "operators.coreos.com/v1alpha1"
        kind: CatalogSource
        namespace: olm
        name: "{{ ieo_catalog_name }}"
      register: catalog_info
      retries: 12
      delay: 5
      until: |
        catalog_info.resources is defined and
        catalog_info.resources | length != 0 and
        catalog_info.resources[0].status.connectionState.lastObservedState | default("NOTREADY") == "READY"


- name: Template Subscription & OperatorGroup resources to target machine
  ansible.builtin.template:
    src: "{{ item.template }}"
    dest: "{{ (intel_ethernet_operator_files_dir, item.name) | path_join }}"
    mode: '0640'
  loop:
    - { name: 'operator-group.yaml', template: 'operator-group.yaml.j2' }
    - { name: 'subscription.yaml', template: 'subscription.yaml.j2' }

- name: Deploy Intel Ethernet Operator via Subscription & OperatorGroup
  kubernetes.core.k8s:
    state: present
    template: "{{ item }}"
  loop:
    - operator-group.yaml.j2
    - subscription.yaml.j2

- name: wait for Ethernet Operator deployment
  kubernetes.core.k8s_info:
    kind: InstallPlan
    namespace: "{{ intel_ethernet_operator_namespace }}"
    wait: true
    wait_condition:
      type: Installed
    wait_timeout: 240

- name: Check if pods are running
  ansible.builtin.include_role:
    name: wait_for_kubernetes_ready
