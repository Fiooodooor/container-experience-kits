##
##   Copyright (c) 2020-2022 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: clone Intel Ethernet Operator repository
  ansible.builtin.git:
    repo: "{{ intel_ethernet_operator_git }}"
    version: "{{ intel_ethernet_operator_git_ref }}"
    dest: "{{ intel_ethernet_operator_dir }}"
    force: yes

- name: get GOPATH
  ansible.builtin.command: go env GOPATH
  register: gopath
  changed_when: false

- name: build Intel Ethernet Operator
  ansible.builtin.make:
    target: "{{ item }}"
    chdir: "{{ intel_ethernet_operator_dir }}"
    params:
      VERSION: "{{ intel_ethernet_operator_img_ver }}"
      IMAGE_REGISTRY: "{{ registry_local_address }}"
      IMGTOOL: "{{ 'docker' if container_runtime == 'docker' else 'podman' }}"
      TLS_VERIFY: "{{ intel_ethernet_operator_make_tls }}"
      TARGET_PLATFORM: "{{ intel_ethernet_operator_target_platform }}"
  register: ieo_build_status
  retries: 5
  delay: 120
  until:
    - "'Github rate-limiter failed the request.' not in ieo_build_status.stdout"
  environment:
    PATH: "{{ gopath.stdout }}/bin:/usr/local/go/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  loop:
    - build_all
    - push_all
    - catalog-build
    - catalog-push

- name: create Intel Ethernet Operator directory to store yaml files
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0644'
  loop:
    - "{{ intel_ethernet_operator_files_dir }}"
    - "{{ intel_ethernet_operator_packages_dir }}"
    - "{{ intel_ethernet_operator_fw_files_dir }}"
    - "{{ intel_ethernet_operator_ddp_files_dir }}"
    - "{{ intel_ethernet_operator_flow_config_files_dir }}"
    - "{{ intel_ethernet_operator_flow_config_rules_dir }}"

- name: create Intel Ethernet Operator namespace
  kubernetes.core.k8s:
    name: "{{ intel_ethernet_operator_namespace }}"
    kind: Namespace
    state: present

- name: populate Intel Ethernet Operator yaml files and push to controller node
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ (intel_ethernet_operator_files_dir, item.dst) | path_join }}"
    force: yes
    mode: preserve
  loop:
    - {src: 'catalog.yml.j2', dst: 'catalog.yml'}
    - {src: 'operator-group.yml.j2', dst: 'operator-group.yml'}
    - {src: 'subscription.yml.j2', dst: 'subscription.yml'}

- name: Catalog and OperatorGroup
  kubernetes.core.k8s:
    state: present
    src: "{{ (intel_ethernet_operator_files_dir, item) | path_join }}"
  loop:
    - catalog.yml
    - operator-group.yml

- name: wait for catalog pod
  ansible.builtin.pause:
    seconds: 30

- name: create Subscription
  kubernetes.core.k8s:
    state: present
    src: "{{ (intel_ethernet_operator_files_dir, 'subscription.yml') | path_join }}"

- name: wait for Ethernet Operator deployment
  ansible.builtin.pause:
    seconds: 100

- name: check if all pods are running
  ansible.builtin.shell: set -o pipefail && kubectl get pods -A | awk 'NR != 1 { print $4 }'
  args:
    executable: /bin/bash
  register: ieo_pods_status
  retries: 50
  delay: 10
  until:
    - "'Error' not in ieo_pods_status.stdout"
    - "'CrashLoopBackOff' not in ieo_pods_status.stdout"
    - "'Terminating' not in ieo_pods_status.stdout"
    - "'ContainerCreating' not in ieo_pods_status.stdout"
    - "'Pending' not in ieo_pods_status.stdout"
  changed_when: false

- name: check if all containers are running
  ansible.builtin.shell: set -o pipefail && kubectl get pods -A | awk '! /Completed/ && NR != 1 { print $3 }'
  args:
    executable: /bin/bash
  register: ieo_containers_readiness
  retries: 50
  delay: 10
  until: "'0' not in ieo_containers_readiness.stdout"
  changed_when: false
