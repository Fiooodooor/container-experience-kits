##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---
- name: DDP update
  when: hostvars[node_name]['intel_ethernet_operator']['ddp_update'] |d(false)
  block:
    - name: Populate Intel Ethernet Operator yaml files and push to controller node
      ansible.builtin.template:
        src: "ddp-update.yml.j2"
        dest: "{{ (intel_ethernet_operator_ddp_files_dir, node_name + '-ddp-update.yml') | path_join }}"
        force: yes
        mode: preserve

    - name: Apply DDP update on {{ node_name }}
      kubernetes.core.k8s:
        state: present
        src: "{{ (intel_ethernet_operator_ddp_files_dir, node_name + '-ddp-update.yml') | path_join }}"

    - name: Wait for start of node reboot
      ansible.builtin.wait_for:
        host: "{{ hostvars[node_name]['ansible_host'] }}"
        port: 22
        state: stopped
        timeout: 60
      delegate_to: localhost
      become: false

    - name: Wait for node after reboot
      ansible.builtin.wait_for:
        host: "{{ hostvars[node_name]['ansible_host'] }}"
        port: 22
        connect_timeout: 5
        timeout: 1200
      delegate_to: localhost
      become: false

    # Update could be started on master node
    - name: Wait for kube-apiserver to be up
      ansible.builtin.uri:
        url: "https://127.0.0.1:6443/healthz"
        client_cert: "{{ kube_apiserver_cert }}"
        client_key: "{{ kube_apiserver_key }}"
        validate_certs: no
        use_proxy: no
      register: ddp_update_api_info
      until: ddp_update_api_info.status == 200
      retries: 60
      delay: 5

    - name: Check status of DDP update
      kubernetes.core.k8s_info:
        kind: EthernetNodeConfig
        name: "{{ hostvars[node_name]['ansible_hostname'] }}"
        namespace: "{{ intel_ethernet_operator_namespace }}"
      retries: 60
      delay: 5
      register: enc_status
      until: |
        enc_status.failed or
        (
          enc_status.resources[0].status.conditions[0].status == "True"
          and
          enc_status.resources[0].status.conditions[0].reason == "Succeeded"
        )

    - name: Check cluster after reboot
      ansible.builtin.include_role:
        name: wait_for_kubernetes_ready

    - name: Remove DDP CR after update
      kubernetes.core.k8s:
        src: "{{ (intel_ethernet_operator_ddp_files_dir, node_name + '-ddp-update.yml') | path_join }}"
        state: absent

    - name: Remove EthernetNodeConfig after update
      kubernetes.core.k8s:
        name: "{{ hostvars[node_name]['ansible_hostname'] }}"
        kind: EthernetNodeConfig
        namespace: "{{ intel_ethernet_operator_namespace }}"
        state: absent
        wait: true

    - name: Reload nic modules
      block:
        - name: register mgmt driver
          ansible.builtin.shell: >-
            set -o pipefail &&
            ethtool -i
            {{ hostvars[node_name]['ansible_default_ipv4']['interface'] }}
            | grep driver | sed 's/^driver: //'
          args:
            executable: /bin/bash
          register: mgmt_interface_driver_ieo
          delegate_to: "{{ node_name }}"
          changed_when: false

        - name: Check if IRDMA module is loaded
          ansible.builtin.command: "lsmod"
          register: ieo_lsmod
          delegate_to: "{{ node_name }}"
          changed_when: false

        - name: Unload ICE module
          community.general.modprobe:
            name: ice
            state: absent
          delegate_to: "{{ node_name }}"
          when:
            - not hostvars[node_name]['enable_ice_systemd_service'] |d(false)
            - mgmt_interface_driver_ieo.stdout != "ice"
            - "'irdma' not in ieo_lsmod.stdout"

        - name: Load ICE module
          community.general.modprobe:
            name: ice
            state: present
          delegate_to: "{{ node_name }}"
          when:
            - not hostvars[node_name]['enable_ice_systemd_service'] |d(false)
            - mgmt_interface_driver_ieo.stdout != "ice"
            - "'irdma' not in ieo_lsmod.stdout"

    - name: Create ddp service
      when: hostvars[node_name]['enable_ice_systemd_service'] |d(false)
      block:
        - name: Template the ddp-ice systemd service
          ansible.builtin.template:
            src: ddp-service.j2
            dest: /lib/systemd/system/ddp.service
            owner: root
            group: root
            mode: u=rw,g=r,o=r
          delegate_to: "{{ node_name }}"

        - name: Run ddp-ice service on boot
          ansible.builtin.systemd:
            daemon_reload: yes
            state: restarted
            name: ddp
            enabled: yes
          delegate_to: "{{ node_name }}"
