resource "aws_iam_role" "ansible-instance-role" {
  name = "cwdf-infra-{{ job_id }}-ansible-instance-role"

  assume_role_policy = jsonencode({
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
    Version = "2012-10-17"
  })

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-ansible-instance-role"
      JobId = "{{ job_id }}"
    }
  )
}

resource "aws_iam_policy" "eks-cluster-access-policy" {
  policy = jsonencode({
    Statement = [{
      Action = [
        "eks:*"
      ]
      Effect = "Allow"
      Resource = aws_eks_cluster.default.arn
    }]
    Version = "2012-10-17"
  })

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-eks-cluster-access-policy"
      JobId = "{{ job_id }}"
    }
  )
}

resource "aws_iam_role_policy_attachment" "ansible-instance-role-eks-cluster-access-policy" {
  policy_arn = aws_iam_policy.eks-cluster-access-policy.arn
  role       = aws_iam_role.ansible-instance-role.name
}

resource "aws_iam_instance_profile" "ansible-instance-profile" {
  name = "cwdf-infra-{{ job_id }}-ansible-instance-iam-profile"
  role = aws_iam_role.ansible-instance-role.name

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-ansible-instance-iam-profile"
      JobId = "{{ job_id }}"
    }
  )
}

data "aws_eks_cluster_auth" "default" {
  name = aws_eks_cluster.default.name
}

provider "kubernetes" {
  host                   = aws_eks_cluster.default.endpoint
  cluster_ca_certificate = base64decode(aws_eks_cluster.default.certificate_authority[0].data)
  token                  = data.aws_eks_cluster_auth.default.token

  exec {
    api_version = "client.authentication.k8s.io/v1beta1"
    args        = ["eks", "get-token", "--cluster-name", aws_eks_cluster.default.name]
    command     = "aws"
  }
}

resource "kubernetes_config_map" "aws-auth" {
  data = {
    "mapRoles" = yamlencode([
      {
        rolearn = aws_iam_role.eks-cluster-nodegroup-role.arn
        username = "system:node:{% raw %}{{EC2PrivateDNSName}}{% endraw %}"
        groups = [
          "system:bootstrappers",
          "system:nodes"
        ]
      },
      {
        rolearn = aws_iam_role.ansible-instance-role.arn
        username = "ansible"
        groups = [
          "system:masters"
        ]
      }
    ])
  }

  metadata {
    name      = "aws-auth"
    namespace = "kube-system"
  }
}

data "aws_ami" "ubuntu2004" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_instance" "ansible" {
  ami                    = data.aws_ami.ubuntu2004.id
  instance_type          = "t3.medium"

  vpc_security_group_ids = [aws_security_group.default.id]
  subnet_id              = aws_subnet.{{ subnets[0].name }}.id
  key_name               = aws_key_pair.default.key_name
  iam_instance_profile   = aws_iam_instance_profile.ansible-instance-profile.name

  root_block_device {
    volume_size = 64
    volume_type = "gp3"
  }

  user_data = <<EOF
#!/bin/bash
apt-get -qq -y update
apt-get -qq -y upgrade
apt-get -qq -y install python3-pip
apt-get -qq -y install zip unzip net-tools
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
unzip /tmp/awscliv2.zip -d /tmp/
/tmp/aws/install
rm -rf /tmp/aws
rm -rf /tmp/awscliv2.zip
curl -o /usr/local/bin/kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
chmod +x /usr/local/bin/kubectl
sudo -H -u ubuntu bash -c 'aws eks --region {{ region }} update-kubeconfig --name ${aws_eks_cluster.default.name}'
mkdir /home/ubuntu/cwdf_deployment
mkdir /home/ubuntu/cwdf_deployment/ssh
echo "{{ ssh_pub_key }}" >> /home/ubuntu/cwdf_deployment/ssh/id_rsa.pub
chown ubuntu /home/ubuntu/cwdf_deployment -R
sudo -H -u ubuntu bash -c 'pip install --user paramiko'
EOF

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-ansible-instance"
      JobId = "{{ job_id }}"
    }
  )

  depends_on = [aws_eks_cluster.default]
}

output "ansible_host_public_ip" {
  value = aws_instance.ansible.public_ip
}
