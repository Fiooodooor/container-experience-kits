resource "aws_vpc" "default" {
  cidr_block           = "{{ vpc_cidr_block }}"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-default-vpc"
      JobId = "{{ job_id }}"
    }
  )
}

resource "aws_internet_gateway" "default" {
  vpc_id = aws_vpc.default.id

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-default-igw"
      JobId = "{{ job_id }}"
    }
  )
}

resource "aws_route_table" "default" {
  vpc_id = aws_vpc.default.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.default.id
  }

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-default-rt"
      JobId = "{{ job_id }}"
    }
  )
}

{% for subnet in subnets %}
resource "aws_subnet" "{{ subnet.name }}" {
  vpc_id                  = aws_vpc.default.id
  map_public_ip_on_launch = true
  
  cidr_block              = "{{ subnet.cidr_block }}"
  availability_zone       = "{{ subnet.az }}"

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-subnet-{{ subnet.name }}"
      JobId = "{{ job_id }}"
    }
  )
}

resource "aws_route_table_association" "{{ subnet.name }}" {
  subnet_id      = aws_subnet.{{ subnet.name }}.id
  route_table_id = aws_route_table.default.id
}

{% endfor %}

resource "aws_security_group" "sg-{{ job_id }}" {
  name        = "cwdf-infra-{{ job_id }}-sg"
  description = "CWDF Job {{ job_id }} Default SG"
  vpc_id      = aws_vpc.default.id

  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = [{% for cidr_block in sg_whitelist_cidr_blocks %}"{{cidr_block}}",{% endfor %}]
    self             = true
  }

  ingress {
    description      = "PING"
    from_port        = 8
    to_port          = 0
    protocol         = "icmp"
    cidr_blocks      = [{% for cidr_block in sg_whitelist_cidr_blocks %}"{{cidr_block}}",{% endfor %}]
    self             = true
  }

  egress {
    description      = "Internet Access"
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-default-sg"
      JobId = "{{ job_id }}"
    }
  )
}

resource "aws_key_pair" "default" {
  key_name   = "cwdf-infra-{{ job_id }}-default-keypair"
  public_key = "{{ ssh_pub_key }}"

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-default-keypair"
      JobId = "{{ job_id }}"
    }
  )
}

data "aws_iam_policy_document" "flow_log_assume_role" {
  statement {
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["vpc-flow-logs.amazonaws.com"]
    }

    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role" "flow_log" {
  name               = "cwdf-infra-{{ job_id }}-vpc-flow-log-role"
  assume_role_policy = data.aws_iam_policy_document.flow_log_assume_role.json

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-vpc-flow-log-role"
      JobId = "{{ job_id }}"
    }
  )
}

data "aws_iam_policy_document" "flow_log" {
  statement {
    effect = "Allow"

    actions = [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogGroups",
      "logs:DescribeLogStreams",
    ]

    resources = [aws_cloudwatch_log_group.flow_log.arn]
  }
}

resource "aws_iam_role_policy" "flow_log" {
  name   = "cwdf-infra-{{ job_id }}-flow-log-policy"
  role   = aws_iam_role.flow_log.id
  policy = data.aws_iam_policy_document.flow_log.json
}

data "aws_iam_policy_document" "vpc_flow_log_kms" {
  statement {
    sid    = "Enable IAM User Permissions"
    effect = "Allow"
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::${data.aws_caller_identity.current.account_id}:root"]
    }

    actions = [
      "kms:*"
    ]
    resources = ["*"]
  }
  statement {
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["logs.{{ region }}.amazonaws.com"]
    }
    actions = [
      "kms:Encrypt*",
      "kms:Decrypt*",
      "kms:ReEncrypt*",
      "kms:GenerateDataKey*",
      "kms:Describe*"
    ]

    resources = ["*"]
    condition {
      test = "ArnEquals"
      values = [
        "arn:aws:logs:{{ region }}:${data.aws_caller_identity.current.account_id}:log-group:cwdf-infra-{{ job_id }}-cloudwatch-flow-log-group"
      ]
      variable = "kms:EncryptionContext:aws:logs:arn"
    }
  }
}

resource "aws_kms_key" "vpc_flow_log" {
  description             = "VPC {{ job_id }} Flow Logs Key"
  deletion_window_in_days = 7
  enable_key_rotation     = true
  policy                  = data.aws_iam_policy_document.vpc_flow_log_kms.json

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-vpc-flow-logs-key"
      JobId = "{{ job_id }}"
    }
  )
}


resource "aws_cloudwatch_log_group" "flow_log" {
  name = "cwdf-infra-{{ job_id }}-cloudwatch-flow-log-group"
  retention_in_days = 7
  skip_destroy      = false
  kms_key_id        = aws_kms_key.vpc_flow_log.arn

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-cloudwatch-flow-log-group"
      JobId = "{{ job_id }}"
    }
  )
}

resource "aws_flow_log" "default" {
  iam_role_arn    = aws_iam_role.flow_log.arn
  log_destination = aws_cloudwatch_log_group.flow_log.arn
  traffic_type    = "ALL"
  vpc_id          = aws_vpc.default.id

  tags = merge(
    jsondecode("{{ extra_tags_json }}"),
    {
      Name  = "cwdf-infra-{{ job_id }}-vpc-flow-log"
      JobId = "{{ job_id }}"
    }
  )
}

output "cloud_provider" {
  value = "aws"
}