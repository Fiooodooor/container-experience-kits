##
##   Copyright (c) 2020 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
---

# dpdk dev bind block
- block:
    - name: install config dpdk scripts to /usr/local/bin
      copy:
        src: "{{ item }}"
        dest: "/usr/local/bin/"
        mode: '0700'
        owner: root
        group: root
        force: true
      with_items:
        - 'cek_config_dpdk_bind.py'
        - 'cek_config_dpdk_rebind.py'
        - 'cek_config_dpdk_unbind.py'
        - 'cek_config_dpdk_util.py'
        - 'cek_config_dpdk.sh'
      become: true

    - name: execute dpdk bind script
      command: "python3 /usr/local/bin/cek_config_dpdk_bind.py
                {{ config_dpdk_bind_nic_type }}
                {{ config_dpdk_bind_drv_type }}
                {{ config_dpdk_bind_port_offset }}
                {{ config_dpdk_bind_port_count }}"
      register: dpdk_bind_result
      changed_when: false

    - name: output dpdk bind result
      debug:
        msg: "{{ dpdk_bind_result.stdout_lines }}"

    - name: install config dpdk service to /lib/systemd/system
      copy:
        src: "cek_config_dpdk.service"
        dest: /lib/systemd/system/
        owner: root
        group: root
        mode: '0644'
      become: true

    - name: enable the service which will do dpdk rebind after reboot
      systemd:
        name: cek_config_dpdk
        state: started
        enabled: true
        daemon_reload: true
      become: true

  when:
    - dyna_config_dpdk_bind | default(false) | bool


# dpdk dev link blocks
- block:
    - name: pull network_env.conf from node to localhost
      synchronize:
        src: /etc/network_env.conf
        dest: "/tmp/network_env_{{ inventory_hostname }}.conf"
        mode: pull
  when:
    - dyna_config_dpdk_link | default(false) | bool
    - dpdk_link_pre | default(false) | bool

- block:
    - name: copy dpdk link script to localhost
      copy:
        src: "{{ item }}"
        dest: "/tmp/"
        mode: '0644'
      with_items:
        - 'cek_config_dpdk_link.py'
        - 'cek_config_dpdk_util.py'

    - name: execute dpdk link script on localhost
      command: "python3 /tmp/cek_config_dpdk_link.py
              /tmp/network_env_{{ dpdk_link_node1 }}.conf  /tmp/network_env_{{ dpdk_link_node2 }}.conf"
      register: dpdk_link_result
      changed_when: false

    - name: output dpdk link result
      debug:
        msg: "{{ dpdk_link_result.stdout_lines }}"

    - name: remove tmp files on localhost
      file:
        path: "/tmp/{{ item }}"
        state: absent
      with_items:
        - 'cek_config_dpdk_link.py'
        - 'cek_config_dpdk_util.py'
  when:
    - dyna_config_dpdk_link | default(false) | bool
    - not (dpdk_link_pre | default(false) | bool)
    - not (dpdk_link_post | default(false) | bool)

- block:
    - name: push network_env.conf from localhost to node
      synchronize:
        src: /tmp/network_env_{{ inventory_hostname }}.conf
        dest: /etc/network_env.conf
        mode: push

    - name: remove tmp files on localhost
      file:
        path: "/tmp/network_env_{{ inventory_hostname }}.conf"
        state: absent
      delegate_to: localhost
  when:
    - dyna_config_dpdk_link | default(false) | bool
    - dpdk_link_post | default(false) | bool

# dpdk dev unbind block
- block:
    - import_tasks: cleanup.yml
  when:
    - dyna_config_dpdk_unbind | default(false) | bool
